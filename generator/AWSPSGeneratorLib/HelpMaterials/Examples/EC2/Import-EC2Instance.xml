<?xml version="1.0" encoding="utf-8"?>
<examples>
	<example>
		<code>PS C:\> Import-EC2Instance -ImageFile .\windows2012r2-disk1.vmdk -InstanceType m1.large -Architecture x86_64 -VolumeSize 30 `
-BucketName myimages -KeyPrefix windows2012r2.image -Platform Windows
				   
ConversionTaskId : import-i-123456
ExpirationTime   : 2014-06-23T15:45:03Z
ImportInstance   : Amazon.EC2.Model.ImportInstanceTaskDetails
ImportVolume     :
State            : active
StatusMessage    : Pending
Tags             : {}</code>
		<description>This example uploads and requests conversion of the specified disk image to a m1.large instance type with a volume size of 30GB. The file format parameter value is inferred from the file extension of the image file (vmdk). The image file artifacts are uploaded to the Amazon S3 bucket 'myimages' (created if it does not exist), with a key format of of '/windows2012r2.image/{guid}/windows2012r2-disk1.*, where {guid} is replaced by a new GUID formatted as 32 digits separated by hyphens. The conversion task object returned by Amazon EC2 is output to the pipeline and can be used to monitor conversion progress using Get-EC2ConversionTask or cancel it using Stop-EC2ConversionTask. If the image file upload fails, the manifest and any successfully uploaded image file content are retained in the S3 bucket so that the cmdlet can be re-executed in 'resume' mode to complete the import.</description>
	</example>
	<example>
		<code>PS C:\> Import-EC2Instance -ImageFile .\windows2012r2-disk1.vmdk -InstanceType m1.large -Architecture x86_64 -VolumeSize 30 `
-BucketName myimages -KeyPrefix windows2012r2.image -Platform Windows `
-RollbackOnUploadError

ConversionTaskId : import-i-123456
ExpirationTime   : 2014-06-23T15:45:03Z
ImportInstance   : Amazon.EC2.Model.ImportInstanceTaskDetails
ImportVolume     :
State            : active
StatusMessage    : Pending
Tags             : {}</code>
		<description>This example uploads and requests conversion of the specified disk image. If the image file upload fails, the manifest and any successfully uploaded image file content are deleted from the S3 bucket because the -RollbackOnUploadError parameter is used.</description>
	</example>
	<example>
		<code>PS C:\> Import-EC2Instance -ImageFile .\windows2012r2-disk1.vmdk -InstanceType m1.large -Architecture x86_64 -VolumeSize 30 `
-BucketName myimages -KeyPrefix windows2012r2.image -Platform Windows `
-Resume
				   
ConversionTaskId : import-i-123456
ExpirationTime   : 2014-06-23T15:45:03Z
ImportInstance   : Amazon.EC2.Model.ImportInstanceTaskDetails
ImportVolume     :
State            : active
StatusMessage    : Pending
Tags             : {}</code>
		<description>This example resumes importing an instance after a previous upload failure. The cmdlet analyzes the import manifest for the image to determine which image file parts were not uploaded, and then uploads just those pieces. Note that 'resume' mode is not applicable if the -RollbackOnUploadError switch was used in the original upload command.</description>
	</example>
	<example>
		<code>PS C:\> Import-EC2Instance -ImageFile .\windows2012r2-disk1.vmdk -UploadOnly -VolumeSize 30 -BucketName myimages `
-KeyPrefix windows2012r2.image

windows2012r2.image/cc164294-94b0-42cc-ac8f-9ae2ddffaa53/windows2012r2-disk1.vmdkmanifest.xml</code>
		<description>This example uploads an image file ready for conversion at a later time. The cmdlet outputs the S3 object key of the uploaded manifest. This can be used at a later time to start conversion using the -ManifestFileKey parameter. If the image file upload fails, the manifest and any successfully uploaded image file content are retained in the S3 bucket. Upload can then be resumed using the -Resume parameter as shown in other examples. Use the -RollbackOnUploadError switch to automatically clean the S3 bucket of any uploaded content after an error occurs during upload.</description>
	</example>
	<example>
		<code>PS C:\> Import-EC2Instance -ManifestFileKey "windows2012r2.image/cc164294-94b0-42cc-ac8f-9ae2ddffaa53/windows2012r2-disk1.vmdkmanifest.xml" `
-BucketName myimages -InstanceType m1.large -Architecture x86_64 -Platform Windows

ConversionTaskId : import-i-123456
ExpirationTime   : 2014-06-23T15:45:03Z
ImportInstance   : Amazon.EC2.Model.ImportInstanceTaskDetails
ImportVolume     :
State            : active
StatusMessage    : Pending
Tags             : {}</code>
		<description>This example requests image file conversion using artifacts uploaded previously using the -UploadOnly parameter. The conversion task object returned by Amazon EC2 is output to the pipeline and can be used to monitor conversion progress using Get-EC2ConversionTask or cancel it using Stop-EC2ConversionTask. (Note that this variation of the parameters, replacing the -ImageFile parameter with the -ManifestFileKey parameter, is also used if an error occurs when requesting import conversion after successful upload of the image file and manifest. The error message in that scenario describes the parameter substitutions required to allow import to be resumed.)</description>
	</example>
	<example>
		<code>PS C:\> $m1 = Import-EC2Instance -ImageFile .\windows2012r2.vmdk -UploadOnly -BucketName myimages -KeyPrefix windows2012r2.image
PS C:\> $m2 = Import-EC2Instance -ImageFile .\windows2008r2.vmdk -UploadOnly -BucketName myimages -KeyPrefix windows2008r2.image

PS C:\> Import-EC2Instance -ManifestFileKey @($m1, $m2) -BucketName myimages -InstanceType m1.large -Architecture x86_64 -Platform Windows

ConversionTaskId : import-i-121212
ExpirationTime   : 2014-06-23T15:45:03Z
ImportInstance   : Amazon.EC2.Model.ImportInstanceTaskDetails
ImportVolume     :
State            : active
StatusMessage    : Pending
Tags             : {}				   

ConversionTaskId : import-i-232323
ExpirationTime   : 2014-06-23T15:45:10Z
ImportInstance   : Amazon.EC2.Model.ImportInstanceTaskDetails
ImportVolume     :
State            : active
StatusMessage    : Pending
Tags             : {}</code>
		<description>This example requests image file conversion for a collection of images uploaded previously using the -UploadOnly switch. The conversion task object for each image is output to the pipeline and can be used to monitor conversion progress using Get-EC2ConversionTask or cancel it using Stop-EC2ConversionTask. In this example, the volume size for the imported instance is inferred from the size of the image file.</description>
	</example>
</examples>