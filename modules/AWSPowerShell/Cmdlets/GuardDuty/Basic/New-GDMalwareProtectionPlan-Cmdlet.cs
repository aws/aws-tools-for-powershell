/*******************************************************************************
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 *  this file except in compliance with the License. A copy of the License is located at
 *
 *  http://aws.amazon.com/apache2.0
 *
 *  or in the "license" file accompanying this file.
 *  This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 *  CONDITIONS OF ANY KIND, either express or implied. See the License for the
 *  specific language governing permissions and limitations under the License.
 * *****************************************************************************
 *
 *  AWS Tools for Windows (TM) PowerShell (TM)
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;
using System.Text;
using Amazon.PowerShell.Common;
using Amazon.Runtime;
using Amazon.GuardDuty;
using Amazon.GuardDuty.Model;

namespace Amazon.PowerShell.Cmdlets.GD
{
    /// <summary>
    /// Creates a new Malware Protection plan for the protected resource.
    /// 
    ///  
    /// <para>
    /// When you create a Malware Protection plan, the Amazon Web Services service terms for
    /// GuardDuty Malware Protection apply. For more information, see <a href="http://aws.amazon.com/service-terms/#87._Amazon_GuardDuty">Amazon
    /// Web Services service terms for GuardDuty Malware Protection</a>.
    /// </para>
    /// </summary>
    [Cmdlet("New", "GDMalwareProtectionPlan", SupportsShouldProcess = true, ConfirmImpact = ConfirmImpact.Medium)]
    [OutputType("System.String")]
    [AWSCmdlet("Calls the Amazon GuardDuty CreateMalwareProtectionPlan API operation.", Operation = new[] {"CreateMalwareProtectionPlan"}, SelectReturnType = typeof(Amazon.GuardDuty.Model.CreateMalwareProtectionPlanResponse))]
    [AWSCmdletOutput("System.String or Amazon.GuardDuty.Model.CreateMalwareProtectionPlanResponse",
        "This cmdlet returns a System.String object.",
        "The service call response (type Amazon.GuardDuty.Model.CreateMalwareProtectionPlanResponse) can be returned by specifying '-Select *'."
    )]
    public partial class NewGDMalwareProtectionPlanCmdlet : AmazonGuardDutyClientCmdlet, IExecutor
    {
        
        protected override bool IsGeneratedCmdlet { get; set; } = true;
        
        #region Parameter S3Bucket_BucketName
        /// <summary>
        /// <para>
        /// <para>Name of the S3 bucket.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [Alias("ProtectedResource_S3Bucket_BucketName")]
        public System.String S3Bucket_BucketName { get; set; }
        #endregion
        
        #region Parameter S3Bucket_ObjectPrefix
        /// <summary>
        /// <para>
        /// <para>Information about the specified object prefixes. The S3 object will be scanned only
        /// if it belongs to any of the specified object prefixes.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [Alias("ProtectedResource_S3Bucket_ObjectPrefixes")]
        public System.String[] S3Bucket_ObjectPrefix { get; set; }
        #endregion
        
        #region Parameter Role
        /// <summary>
        /// <para>
        /// <para>Amazon Resource Name (ARN) of the IAM role that has the permissions to scan and add
        /// tags to the associated protected resource.</para>
        /// </para>
        /// </summary>
        #if !MODULAR
        [System.Management.Automation.Parameter(Position = 0, ValueFromPipelineByPropertyName = true, ValueFromPipeline = true)]
        #else
        [System.Management.Automation.Parameter(Position = 0, ValueFromPipelineByPropertyName = true, ValueFromPipeline = true, Mandatory = true)]
        [System.Management.Automation.AllowEmptyString]
        [System.Management.Automation.AllowNull]
        #endif
        [Amazon.PowerShell.Common.AWSRequiredParameter]
        public System.String Role { get; set; }
        #endregion
        
        #region Parameter Tagging_Status
        /// <summary>
        /// <para>
        /// <para>Indicates whether or not the tags will added.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [Alias("Actions_Tagging_Status")]
        [AWSConstantClassSource("Amazon.GuardDuty.MalwareProtectionPlanTaggingActionStatus")]
        public Amazon.GuardDuty.MalwareProtectionPlanTaggingActionStatus Tagging_Status { get; set; }
        #endregion
        
        #region Parameter Tag
        /// <summary>
        /// <para>
        /// <para>Tags added to the Malware Protection plan resource. </para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [Alias("Tags")]
        public System.Collections.Hashtable Tag { get; set; }
        #endregion
        
        #region Parameter ClientToken
        /// <summary>
        /// <para>
        /// <para>The idempotency token for the create request.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public System.String ClientToken { get; set; }
        #endregion
        
        #region Parameter Select
        /// <summary>
        /// Use the -Select parameter to control the cmdlet output. The default value is 'MalwareProtectionPlanId'.
        /// Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.GuardDuty.Model.CreateMalwareProtectionPlanResponse).
        /// Specifying the name of a property of type Amazon.GuardDuty.Model.CreateMalwareProtectionPlanResponse will result in that property being returned.
        /// Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public string Select { get; set; } = "MalwareProtectionPlanId";
        #endregion
        
        #region Parameter PassThru
        /// <summary>
        /// Changes the cmdlet behavior to return the value passed to the Role parameter.
        /// The -PassThru parameter is deprecated, use -Select '^Role' instead. This parameter will be removed in a future version.
        /// </summary>
        [System.Obsolete("The -PassThru parameter is deprecated, use -Select '^Role' instead. This parameter will be removed in a future version.")]
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public SwitchParameter PassThru { get; set; }
        #endregion
        
        #region Parameter Force
        /// <summary>
        /// This parameter overrides confirmation prompts to force 
        /// the cmdlet to continue its operation. This parameter should always
        /// be used with caution.
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public SwitchParameter Force { get; set; }
        #endregion
        
        protected override void ProcessRecord()
        {
            this._AWSSignerType = "v4";
            base.ProcessRecord();
            
            var resourceIdentifiersText = FormatParameterValuesForConfirmationMsg(nameof(this.S3Bucket_BucketName), MyInvocation.BoundParameters);
            if (!ConfirmShouldProceed(this.Force.IsPresent, resourceIdentifiersText, "New-GDMalwareProtectionPlan (CreateMalwareProtectionPlan)"))
            {
                return;
            }
            
            var context = new CmdletContext();
            
            // allow for manipulation of parameters prior to loading into context
            PreExecutionContextLoad(context);
            
            #pragma warning disable CS0618, CS0612 //A class member was marked with the Obsolete attribute
            if (ParameterWasBound(nameof(this.Select)))
            {
                context.Select = CreateSelectDelegate<Amazon.GuardDuty.Model.CreateMalwareProtectionPlanResponse, NewGDMalwareProtectionPlanCmdlet>(Select) ??
                    throw new System.ArgumentException("Invalid value for -Select parameter.", nameof(this.Select));
                if (this.PassThru.IsPresent)
                {
                    throw new System.ArgumentException("-PassThru cannot be used when -Select is specified.", nameof(this.Select));
                }
            }
            else if (this.PassThru.IsPresent)
            {
                context.Select = (response, cmdlet) => this.Role;
            }
            #pragma warning restore CS0618, CS0612 //A class member was marked with the Obsolete attribute
            context.Tagging_Status = this.Tagging_Status;
            context.ClientToken = this.ClientToken;
            context.S3Bucket_BucketName = this.S3Bucket_BucketName;
            if (this.S3Bucket_ObjectPrefix != null)
            {
                context.S3Bucket_ObjectPrefix = new List<System.String>(this.S3Bucket_ObjectPrefix);
            }
            context.Role = this.Role;
            #if MODULAR
            if (this.Role == null && ParameterWasBound(nameof(this.Role)))
            {
                WriteWarning("You are passing $null as a value for parameter Role which is marked as required. In case you believe this parameter was incorrectly marked as required, report this by opening an issue at https://github.com/aws/aws-tools-for-powershell/issues.");
            }
            #endif
            if (this.Tag != null)
            {
                context.Tag = new Dictionary<System.String, System.String>(StringComparer.Ordinal);
                foreach (var hashKey in this.Tag.Keys)
                {
                    context.Tag.Add((String)hashKey, (System.String)(this.Tag[hashKey]));
                }
            }
            
            // allow further manipulation of loaded context prior to processing
            PostExecutionContextLoad(context);
            
            var output = Execute(context) as CmdletOutput;
            ProcessOutput(output);
        }
        
        #region IExecutor Members
        
        public object Execute(ExecutorContext context)
        {
            var cmdletContext = context as CmdletContext;
            // create request
            var request = new Amazon.GuardDuty.Model.CreateMalwareProtectionPlanRequest();
            
            
             // populate Actions
            var requestActionsIsNull = true;
            request.Actions = new Amazon.GuardDuty.Model.MalwareProtectionPlanActions();
            Amazon.GuardDuty.Model.MalwareProtectionPlanTaggingAction requestActions_actions_Tagging = null;
            
             // populate Tagging
            var requestActions_actions_TaggingIsNull = true;
            requestActions_actions_Tagging = new Amazon.GuardDuty.Model.MalwareProtectionPlanTaggingAction();
            Amazon.GuardDuty.MalwareProtectionPlanTaggingActionStatus requestActions_actions_Tagging_tagging_Status = null;
            if (cmdletContext.Tagging_Status != null)
            {
                requestActions_actions_Tagging_tagging_Status = cmdletContext.Tagging_Status;
            }
            if (requestActions_actions_Tagging_tagging_Status != null)
            {
                requestActions_actions_Tagging.Status = requestActions_actions_Tagging_tagging_Status;
                requestActions_actions_TaggingIsNull = false;
            }
             // determine if requestActions_actions_Tagging should be set to null
            if (requestActions_actions_TaggingIsNull)
            {
                requestActions_actions_Tagging = null;
            }
            if (requestActions_actions_Tagging != null)
            {
                request.Actions.Tagging = requestActions_actions_Tagging;
                requestActionsIsNull = false;
            }
             // determine if request.Actions should be set to null
            if (requestActionsIsNull)
            {
                request.Actions = null;
            }
            if (cmdletContext.ClientToken != null)
            {
                request.ClientToken = cmdletContext.ClientToken;
            }
            
             // populate ProtectedResource
            var requestProtectedResourceIsNull = true;
            request.ProtectedResource = new Amazon.GuardDuty.Model.CreateProtectedResource();
            Amazon.GuardDuty.Model.CreateS3BucketResource requestProtectedResource_protectedResource_S3Bucket = null;
            
             // populate S3Bucket
            var requestProtectedResource_protectedResource_S3BucketIsNull = true;
            requestProtectedResource_protectedResource_S3Bucket = new Amazon.GuardDuty.Model.CreateS3BucketResource();
            System.String requestProtectedResource_protectedResource_S3Bucket_s3Bucket_BucketName = null;
            if (cmdletContext.S3Bucket_BucketName != null)
            {
                requestProtectedResource_protectedResource_S3Bucket_s3Bucket_BucketName = cmdletContext.S3Bucket_BucketName;
            }
            if (requestProtectedResource_protectedResource_S3Bucket_s3Bucket_BucketName != null)
            {
                requestProtectedResource_protectedResource_S3Bucket.BucketName = requestProtectedResource_protectedResource_S3Bucket_s3Bucket_BucketName;
                requestProtectedResource_protectedResource_S3BucketIsNull = false;
            }
            List<System.String> requestProtectedResource_protectedResource_S3Bucket_s3Bucket_ObjectPrefix = null;
            if (cmdletContext.S3Bucket_ObjectPrefix != null)
            {
                requestProtectedResource_protectedResource_S3Bucket_s3Bucket_ObjectPrefix = cmdletContext.S3Bucket_ObjectPrefix;
            }
            if (requestProtectedResource_protectedResource_S3Bucket_s3Bucket_ObjectPrefix != null)
            {
                requestProtectedResource_protectedResource_S3Bucket.ObjectPrefixes = requestProtectedResource_protectedResource_S3Bucket_s3Bucket_ObjectPrefix;
                requestProtectedResource_protectedResource_S3BucketIsNull = false;
            }
             // determine if requestProtectedResource_protectedResource_S3Bucket should be set to null
            if (requestProtectedResource_protectedResource_S3BucketIsNull)
            {
                requestProtectedResource_protectedResource_S3Bucket = null;
            }
            if (requestProtectedResource_protectedResource_S3Bucket != null)
            {
                request.ProtectedResource.S3Bucket = requestProtectedResource_protectedResource_S3Bucket;
                requestProtectedResourceIsNull = false;
            }
             // determine if request.ProtectedResource should be set to null
            if (requestProtectedResourceIsNull)
            {
                request.ProtectedResource = null;
            }
            if (cmdletContext.Role != null)
            {
                request.Role = cmdletContext.Role;
            }
            if (cmdletContext.Tag != null)
            {
                request.Tags = cmdletContext.Tag;
            }
            
            CmdletOutput output;
            
            // issue call
            var client = Client ?? CreateClient(_CurrentCredentials, _RegionEndpoint);
            try
            {
                var response = CallAWSServiceOperation(client, request);
                object pipelineOutput = null;
                pipelineOutput = cmdletContext.Select(response, this);
                output = new CmdletOutput
                {
                    PipelineOutput = pipelineOutput,
                    ServiceResponse = response
                };
            }
            catch (Exception e)
            {
                output = new CmdletOutput { ErrorResponse = e };
            }
            
            return output;
        }
        
        public ExecutorContext CreateContext()
        {
            return new CmdletContext();
        }
        
        #endregion
        
        #region AWS Service Operation Call
        
        private Amazon.GuardDuty.Model.CreateMalwareProtectionPlanResponse CallAWSServiceOperation(IAmazonGuardDuty client, Amazon.GuardDuty.Model.CreateMalwareProtectionPlanRequest request)
        {
            Utils.Common.WriteVerboseEndpointMessage(this, client.Config, "Amazon GuardDuty", "CreateMalwareProtectionPlan");
            try
            {
                #if DESKTOP
                return client.CreateMalwareProtectionPlan(request);
                #elif CORECLR
                return client.CreateMalwareProtectionPlanAsync(request).GetAwaiter().GetResult();
                #else
                        #error "Unknown build edition"
                #endif
            }
            catch (AmazonServiceException exc)
            {
                var webException = exc.InnerException as System.Net.WebException;
                if (webException != null)
                {
                    throw new Exception(Utils.Common.FormatNameResolutionFailureMessage(client.Config, webException.Message), webException);
                }
                throw;
            }
        }
        
        #endregion
        
        internal partial class CmdletContext : ExecutorContext
        {
            public Amazon.GuardDuty.MalwareProtectionPlanTaggingActionStatus Tagging_Status { get; set; }
            public System.String ClientToken { get; set; }
            public System.String S3Bucket_BucketName { get; set; }
            public List<System.String> S3Bucket_ObjectPrefix { get; set; }
            public System.String Role { get; set; }
            public Dictionary<System.String, System.String> Tag { get; set; }
            public System.Func<Amazon.GuardDuty.Model.CreateMalwareProtectionPlanResponse, NewGDMalwareProtectionPlanCmdlet, object> Select { get; set; } =
                (response, cmdlet) => response.MalwareProtectionPlanId;
        }
        
    }
}
