/*******************************************************************************
 *  Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 *  this file except in compliance with the License. A copy of the License is located at
 *
 *  http://aws.amazon.com/apache2.0
 *
 *  or in the "license" file accompanying this file.
 *  This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 *  CONDITIONS OF ANY KIND, either express or implied. See the License for the
 *  specific language governing permissions and limitations under the License.
 * *****************************************************************************
 *
 *  AWS Tools for Windows (TM) PowerShell (TM)
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;
using System.Text;
using Amazon.PowerShell.Common;
using Amazon.Runtime;
using Amazon.Lambda;
using Amazon.Lambda.Model;

namespace Amazon.PowerShell.Cmdlets.LM
{
    /// <summary>
    /// Submits an invocation request to Lambda. Upon receiving the request, Lambda executes
    /// the specified cloud function asynchronously. To see the logs generated by the cloud
    /// function execution, see the CloudWatch logs console.
    /// 
    ///  
    /// <para>
    /// This operation requires permission for the <code>lambda:InvokeAsync</code> action.
    /// </para>
    /// </summary>
    [Cmdlet("Invoke", "LMFunctionAsync", SupportsShouldProcess = true, ConfirmImpact = ConfirmImpact.Low)]
    [OutputType("System.Int32")]
    [AWSCmdlet("Invokes the InvokeAsync operation against Amazon Lambda.", Operation = new [] {"InvokeAsync"})]
    [AWSCmdletOutput("System.Int32",
        "This cmdlet returns a Int32 object.",
        "The service call response (type InvokeAsyncResponse) can also be referenced from properties attached to the cmdlet entry in the $AWSHistory stack."
    )]
    public class InvokeLMFunctionAsyncCmdlet : AmazonLambdaClientCmdlet, IExecutor
    {
        /// <summary>
        /// <para>
        /// Gets and sets the property FunctionName. 
        /// <para>
        /// The cloud function name.
        /// </para>
        /// </para>
        /// </summary>
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = true, ValueFromPipeline = true)]
        public String FunctionName { get; set; }
        
        /// <summary>
        /// <para>
        /// Gets and sets the property InvokeArgs. 
        /// <para>
        /// JSON that you want to provide to your cloud function as input.
        /// </para>
        /// </para>
        /// </summary>
        [Parameter(Position = 1)]
        [Alias("InvokeArgs")]
        public String InvokeArg { get; set; }

        /// <summary>
        /// This parameter overrides confirmation prompts to force 
        /// the cmdlet to continue its operation. This parameter should always
        /// be used with caution.
        /// </summary>
        [Parameter]
        public SwitchParameter Force { get; set; }

        protected override void ProcessRecord()
        {
            base.ProcessRecord();

            if (!ConfirmShouldProceed(this.Force.IsPresent, this.FunctionName, "Invoke-LMFunctionAsync (InvokeAsync)"))
                return;

            var context = new CmdletContext
            {
                Region = this.Region,
                Credentials = this.CurrentCredentials, 
                FunctionName = this.FunctionName, 
                InvokeArgs = this.InvokeArg
            };

            var output = Execute(context) as CmdletOutput;
            ProcessOutput(output);
        }
        
        #region IExecutor Members
        
        public object Execute(ExecutorContext context)
        {
            var cmdletContext = context as CmdletContext;
            // create request
            var request = new InvokeAsyncRequest();
            
            if (cmdletContext.FunctionName != null)
            {
                request.FunctionName = cmdletContext.FunctionName;
            }

            request.InvokeArgs = cmdletContext.InvokeArgs ?? "{}";
            
            CmdletOutput output;
            
            // issue call
            var client = Client ?? CreateClient(context.Credentials, context.Region);
            try
            {
                var response = client.InvokeAsync(request);
                Dictionary<string, object> notes = null;
                object pipelineOutput = response.Status;
                output = new CmdletOutput
                {
                    PipelineOutput = pipelineOutput,
                    ServiceResponse = response,
                    Notes = notes
                };
            }
            catch (Exception e)
            {
                output = new CmdletOutput { ErrorResponse = e };
            }
            
            return output;
        }
        
        public ExecutorContext CreateContext()
        {
            return new CmdletContext();
        }
        
        #endregion
        
        
        internal class CmdletContext : ExecutorContext
        {
            public String FunctionName { get; set; }
            public String InvokeArgs { get; set; }
        }
        
    }
}
