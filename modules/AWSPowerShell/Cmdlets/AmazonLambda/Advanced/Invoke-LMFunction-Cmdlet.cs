/*******************************************************************************
 *  Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 *  this file except in compliance with the License. A copy of the License is located at
 *
 *  http://aws.amazon.com/apache2.0
 *
 *  or in the "license" file accompanying this file.
 *  This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 *  CONDITIONS OF ANY KIND, either express or implied. See the License for the
 *  specific language governing permissions and limitations under the License.
 * *****************************************************************************
 *
 *  AWS Tools for Windows (TM) PowerShell (TM)
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;
using System.Text;
using Amazon.PowerShell.Common;
using Amazon.Runtime;
using Amazon.Lambda;
using Amazon.Lambda.Model;

namespace Amazon.PowerShell.Cmdlets.LM
{
    /// <summary>
    /// Submits an invocation request to Lambda. Upon receiving the request, Lambda executes
    /// the specified cloud function. To see the logs generated by the cloud
    /// function execution, see the CloudWatch logs console.
    /// 
    ///  
    /// <para>
    /// This operation requires permission for the <code>lambda:Invoke</code> action.
    /// </para>
    /// </summary>
    [Cmdlet("Invoke", "LMFunction", SupportsShouldProcess = true, ConfirmImpact = ConfirmImpact.Low)]
    [OutputType("System.Int32")]
    [AWSCmdlet("Invokes the Invoke operation against Amazon Lambda.", Operation = new [] {"Invoke"})]
    [AWSCmdletOutput("System.Int32",
        "This cmdlet returns a System.Int32 object.",
        "The service call response (type Amazon.Lambda.Model.InvokeResponse) can also be referenced from properties attached to the cmdlet entry in the $AWSHistory stack."
    )]
    public class InvokeLMFunctionCmdlet : AmazonLambdaClientCmdlet, IExecutor
    {
        #region Parameter FunctionName
        /// <summary>
        /// <para>
        /// The Lambda function name.
        /// </para>
        /// <para>
        /// You can specify a function name (for example, Thumbnail) or you can specify Amazon Resource Name (ARN) of 
        /// the function (for example, arn:aws:lambda:us-west-2:account-id:function:ThumbNail). AWS Lambda also allows 
        /// you to specify a partial ARN (for example, account-id:Thumbnail). Note that the length constraint applies 
        /// only to the ARN. If you specify only the function name, it is limited to 64 character in length.
        /// </para>
        /// <para>
        /// Length constraints: Minimum length of 1. Maximum length of 140.
        /// </para>
        /// <para>
        /// Pattern: (arn:aws:lambda:)?([a-z]{2}-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?
        /// </para>
        /// </summary>
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = true, ValueFromPipeline = true)]
        public System.String FunctionName { get; set; }
        #endregion

        #region Parameter Payload
        /// <summary>
        /// JSON that you want to provide to your Lambda function as input.
        /// </summary>
        [Parameter(Position = 1)]
        public System.String Payload { get; set; }
        #endregion

        #region Parameter ClientContext
        /// <summary>
        /// Using the <code>ClientContext</code> you can pass client-specific information to the
        /// Lambda function you are invoking. You can then process the client information in your
        /// Lambda function as you choose through the context variable. For an example of a ClientContext
        /// JSON, go to <a href="http://docs.aws.amazon.com/mobileanalytics/latest/ug/PutEvents.html">PutEvents</a>
        /// in the <i>Amazon Mobile Analytics API Reference and User Guide</i>.
        /// </summary>
        [Parameter(Position = 2)]
        public System.String ClientContext { get; set; }
        #endregion

        #region Parameter InvocationType
        /// <summary>
        /// By default, the <code>Invoke</code> API assumes "RequestResponse" invocation type.
        /// You can optionally request asynchronous execution by specifying "Event" as the <code>InvocationType</code>.
        /// You can also use this parameter to request AWS Lambda to not execute the function
        /// but do some verification, such as if the caller is authorized to invoke the function
        /// and if the inputs are valid. You request this by specifying "DryRun" as the <code>InvocationType</code>.
        /// This is useful in a cross-account scenario when you want to verify access to a function
        /// without running it. 
        /// </summary>
        [Parameter(Position = 3)]
        [AWSConstantClassSource("Amazon.Lambda.InvocationType")]
        public Amazon.Lambda.InvocationType InvocationType { get; set; }
        #endregion

        #region Parameter LogType 
        /// <summary>
        /// You can set this optional parameter to "Tail" in the request only if you specify the
        /// <code>InvocationType</code> parameter with value "RequestResponse". In this case,
        /// AWS Lambda returns the base64-encoded last 4 KB of log data produced by your Lambda
        /// function in the <code>x-amz-log-results</code> header. 
        /// </summary>
        [Parameter(Position = 4)]
        [AWSConstantClassSource("Amazon.Lambda.LogType")]
        public Amazon.Lambda.LogType LogType { get; set; }
        #endregion

        #region Parameter Force
        /// <summary>
        /// This parameter overrides confirmation prompts to force 
        /// the cmdlet to continue its operation. This parameter should always
        /// be used with caution.
        /// </summary>
        [Parameter]
        public SwitchParameter Force { get; set; }
        #endregion

        protected override void ProcessRecord()
        {
            base.ProcessRecord();

            if (!ConfirmShouldProceed(this.Force.IsPresent, this.FunctionName, "Invoke-LMFunction (Invoke)"))
                return;

            var context = new CmdletContext
            {
                Region = this.Region,
                Credentials = this.CurrentCredentials,
                FunctionName = this.FunctionName,
                ClientContext = this.ClientContext,
                InvocationType = this.InvocationType,
                LogType = this.LogType,
                Payload = this.Payload
            };

            var output = Execute(context) as CmdletOutput;
            ProcessOutput(output);
        }
        
        #region IExecutor Members
        
        public object Execute(ExecutorContext context)
        {
            var cmdletContext = context as CmdletContext;
            // create request
            var request = new InvokeRequest();
            
            if (cmdletContext.FunctionName != null)
                request.FunctionName = cmdletContext.FunctionName;
            if (cmdletContext.LogType != null)
                request.LogType = cmdletContext.LogType;
            if (cmdletContext.InvocationType != null)
                request.InvocationType = cmdletContext.InvocationType;

            request.Payload = cmdletContext.Payload ?? "{}";
            request.ClientContext = cmdletContext.ClientContext ?? "{}";

            var client = Client ?? CreateClient(context.Credentials, context.Region);
            CmdletOutput output;
            
            // issue call
            try
            {
                var response = CallAWSServiceOperation(client, request);
                Dictionary<string, object> notes = null;
                object pipelineOutput = response;
                output = new CmdletOutput
                {
                    PipelineOutput = pipelineOutput,
                    ServiceResponse = response,
                    Notes = notes
                };
            }
            catch (Exception e)
            {
                output = new CmdletOutput { ErrorResponse = e };
            }
            
            return output;
        }
        
        public ExecutorContext CreateContext()
        {
            return new CmdletContext();
        }

        #endregion

        #region AWS Service Operation Call

        private static Amazon.Lambda.Model.InvokeResponse CallAWSServiceOperation(IAmazonLambda client, Amazon.Lambda.Model.InvokeRequest request)
        {
            return client.Invoke(request);
        }

        #endregion

        internal class CmdletContext : ExecutorContext
        {
            public String FunctionName { get; set; }
            public String Payload { get; set; }
            public String ClientContext { get; set; }
            public InvocationType InvocationType { get; set; }
            public LogType LogType { get; set; }
        }
        
    }
}
