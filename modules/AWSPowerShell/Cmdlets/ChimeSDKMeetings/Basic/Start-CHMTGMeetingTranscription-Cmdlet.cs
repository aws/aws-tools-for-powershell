/*******************************************************************************
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 *  this file except in compliance with the License. A copy of the License is located at
 *
 *  http://aws.amazon.com/apache2.0
 *
 *  or in the "license" file accompanying this file.
 *  This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 *  CONDITIONS OF ANY KIND, either express or implied. See the License for the
 *  specific language governing permissions and limitations under the License.
 * *****************************************************************************
 *
 *  AWS Tools for Windows (TM) PowerShell (TM)
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;
using System.Text;
using Amazon.PowerShell.Common;
using Amazon.Runtime;
using Amazon.ChimeSDKMeetings;
using Amazon.ChimeSDKMeetings.Model;

namespace Amazon.PowerShell.Cmdlets.CHMTG
{
    /// <summary>
    /// Starts transcription for the specified <c>meetingId</c>. For more information, refer
    /// to <a href="https://docs.aws.amazon.com/chime-sdk/latest/dg/meeting-transcription.html">
    /// Using Amazon Chime SDK live transcription </a> in the <i>Amazon Chime SDK Developer
    /// Guide</i>.
    /// 
    ///  
    /// <para>
    /// If you specify an invalid configuration, a <c>TranscriptFailed</c> event will be sent
    /// with the contents of the <c>BadRequestException</c> generated by Amazon Transcribe.
    /// For more information on each parameter and which combinations are valid, refer to
    /// the <a href="https://docs.aws.amazon.com/transcribe/latest/APIReference/API_streaming_StartStreamTranscription.html">StartStreamTranscription</a>
    /// API in the <i>Amazon Transcribe Developer Guide</i>.
    /// </para><note><para>
    /// By default, Amazon Transcribe may use and store audio content processed by the service
    /// to develop and improve Amazon Web Services AI/ML services as further described in
    /// section 50 of the <a href="https://aws.amazon.com/service-terms/">Amazon Web Services
    /// Service Terms</a>. Using Amazon Transcribe may be subject to federal and state laws
    /// or regulations regarding the recording or interception of electronic communications.
    /// It is your and your end users’ responsibility to comply with all applicable laws regarding
    /// the recording, including properly notifying all participants in a recorded session
    /// or communication that the session or communication is being recorded, and obtaining
    /// all necessary consents. You can opt out from Amazon Web Services using audio content
    /// to develop and improve AWS AI/ML services by configuring an AI services opt out policy
    /// using Amazon Web Services Organizations.
    /// </para></note>
    /// </summary>
    [Cmdlet("Start", "CHMTGMeetingTranscription", SupportsShouldProcess = true, ConfirmImpact = ConfirmImpact.Medium)]
    [OutputType("None")]
    [AWSCmdlet("Calls the Amazon Chime SDK Meetings StartMeetingTranscription API operation.", Operation = new[] {"StartMeetingTranscription"}, SelectReturnType = typeof(Amazon.ChimeSDKMeetings.Model.StartMeetingTranscriptionResponse))]
    [AWSCmdletOutput("None or Amazon.ChimeSDKMeetings.Model.StartMeetingTranscriptionResponse",
        "This cmdlet does not generate any output." +
        "The service response (type Amazon.ChimeSDKMeetings.Model.StartMeetingTranscriptionResponse) be returned by specifying '-Select *'."
    )]
    public partial class StartCHMTGMeetingTranscriptionCmdlet : AmazonChimeSDKMeetingsClientCmdlet, IExecutor
    {
        
        protected override bool IsGeneratedCmdlet { get; set; } = true;
        
        #region Parameter EngineTranscribeMedicalSettings_ContentIdentificationType
        /// <summary>
        /// <para>
        /// <para>Set this field to <c>PHI</c> to identify personal health information in the transcription
        /// output.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [Alias("TranscriptionConfiguration_EngineTranscribeMedicalSettings_ContentIdentificationType")]
        [AWSConstantClassSource("Amazon.ChimeSDKMeetings.TranscribeMedicalContentIdentificationType")]
        public Amazon.ChimeSDKMeetings.TranscribeMedicalContentIdentificationType EngineTranscribeMedicalSettings_ContentIdentificationType { get; set; }
        #endregion
        
        #region Parameter EngineTranscribeSettings_ContentIdentificationType
        /// <summary>
        /// <para>
        /// <para>Labels all personally identifiable information (PII) identified in your transcript.
        /// If you don't include <c>PiiEntityTypes</c>, all PII is identified.</para><note><para>You can’t set <c>ContentIdentificationType</c> and <c>ContentRedactionType</c>.</para></note>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [Alias("TranscriptionConfiguration_EngineTranscribeSettings_ContentIdentificationType")]
        [AWSConstantClassSource("Amazon.ChimeSDKMeetings.TranscribeContentIdentificationType")]
        public Amazon.ChimeSDKMeetings.TranscribeContentIdentificationType EngineTranscribeSettings_ContentIdentificationType { get; set; }
        #endregion
        
        #region Parameter EngineTranscribeSettings_ContentRedactionType
        /// <summary>
        /// <para>
        /// <para>Content redaction is performed at the segment level. If you don't include <c>PiiEntityTypes</c>,
        /// all PII is redacted.</para><note><para>You can’t set <c>ContentRedactionType</c> and <c>ContentIdentificationType</c>.</para></note>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [Alias("TranscriptionConfiguration_EngineTranscribeSettings_ContentRedactionType")]
        [AWSConstantClassSource("Amazon.ChimeSDKMeetings.TranscribeContentRedactionType")]
        public Amazon.ChimeSDKMeetings.TranscribeContentRedactionType EngineTranscribeSettings_ContentRedactionType { get; set; }
        #endregion
        
        #region Parameter EngineTranscribeSettings_EnablePartialResultsStabilization
        /// <summary>
        /// <para>
        /// <para>Enables partial result stabilization for your transcription. Partial result stabilization
        /// can reduce latency in your output, but may impact accuracy.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [Alias("TranscriptionConfiguration_EngineTranscribeSettings_EnablePartialResultsStabilization")]
        public System.Boolean? EngineTranscribeSettings_EnablePartialResultsStabilization { get; set; }
        #endregion
        
        #region Parameter EngineTranscribeSettings_IdentifyLanguage
        /// <summary>
        /// <para>
        /// <para>Enables automatic language identification for your transcription.</para><para>If you include <c>IdentifyLanguage</c>, you can optionally use <c>LanguageOptions</c>
        /// to include a list of language codes that you think may be present in your audio stream.
        /// Including language options can improve transcription accuracy.</para><para>You can also use <c>PreferredLanguage</c> to include a preferred language. Doing so
        /// can help Amazon Transcribe identify the language faster.</para><para>You must include either <c>LanguageCode</c> or <c>IdentifyLanguage</c>.</para><para>Language identification can't be combined with custom language models or redaction.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [Alias("TranscriptionConfiguration_EngineTranscribeSettings_IdentifyLanguage")]
        public System.Boolean? EngineTranscribeSettings_IdentifyLanguage { get; set; }
        #endregion
        
        #region Parameter EngineTranscribeMedicalSettings_LanguageCode
        /// <summary>
        /// <para>
        /// <para>The language code specified for the Amazon Transcribe Medical engine.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [Alias("TranscriptionConfiguration_EngineTranscribeMedicalSettings_LanguageCode")]
        [AWSConstantClassSource("Amazon.ChimeSDKMeetings.TranscribeMedicalLanguageCode")]
        public Amazon.ChimeSDKMeetings.TranscribeMedicalLanguageCode EngineTranscribeMedicalSettings_LanguageCode { get; set; }
        #endregion
        
        #region Parameter EngineTranscribeSettings_LanguageCode
        /// <summary>
        /// <para>
        /// <para>Specify the language code that represents the language spoken.</para><para>If you're unsure of the language spoken in your audio, consider using <c>IdentifyLanguage</c>
        /// to enable automatic language identification.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [Alias("TranscriptionConfiguration_EngineTranscribeSettings_LanguageCode")]
        [AWSConstantClassSource("Amazon.ChimeSDKMeetings.TranscribeLanguageCode")]
        public Amazon.ChimeSDKMeetings.TranscribeLanguageCode EngineTranscribeSettings_LanguageCode { get; set; }
        #endregion
        
        #region Parameter EngineTranscribeSettings_LanguageModelName
        /// <summary>
        /// <para>
        /// <para>Specify the name of the custom language model that you want to use when processing
        /// your transcription. Note that language model names are case sensitive.</para><para>The language of the specified language model must match the language code. If the
        /// languages don't match, the custom language model isn't applied. There are no errors
        /// or warnings associated with a language mismatch.</para><para>If you use Amazon Transcribe in multiple Regions, the custom language model must be
        /// available in Amazon Transcribe in each Region.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [Alias("TranscriptionConfiguration_EngineTranscribeSettings_LanguageModelName")]
        public System.String EngineTranscribeSettings_LanguageModelName { get; set; }
        #endregion
        
        #region Parameter EngineTranscribeSettings_LanguageOption
        /// <summary>
        /// <para>
        /// <para>Specify two or more language codes that represent the languages you think may be present
        /// in your media; including more than five is not recommended. If you're unsure what
        /// languages are present, do not include this parameter.</para><para>Including language options can improve the accuracy of language identification.</para><para>If you include <c>LanguageOptions</c>, you must also include <c>IdentifyLanguage</c>.</para><important><para>You can only include one language dialect per language. For example, you cannot include
        /// <c>en-US</c> and <c>en-AU</c>.</para></important>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [Alias("TranscriptionConfiguration_EngineTranscribeSettings_LanguageOptions")]
        public System.String EngineTranscribeSettings_LanguageOption { get; set; }
        #endregion
        
        #region Parameter MeetingId
        /// <summary>
        /// <para>
        /// <para>The unique ID of the meeting being transcribed.</para>
        /// </para>
        /// </summary>
        #if !MODULAR
        [System.Management.Automation.Parameter(Position = 0, ValueFromPipelineByPropertyName = true, ValueFromPipeline = true)]
        #else
        [System.Management.Automation.Parameter(Position = 0, ValueFromPipelineByPropertyName = true, ValueFromPipeline = true, Mandatory = true)]
        [System.Management.Automation.AllowEmptyString]
        [System.Management.Automation.AllowNull]
        #endif
        [Amazon.PowerShell.Common.AWSRequiredParameter]
        public System.String MeetingId { get; set; }
        #endregion
        
        #region Parameter EngineTranscribeSettings_PartialResultsStability
        /// <summary>
        /// <para>
        /// <para>Specify the level of stability to use when you enable partial results stabilization
        /// (<c>EnablePartialResultsStabilization</c>).</para><para>Low stability provides the highest accuracy. High stability transcribes faster, but
        /// with slightly lower accuracy.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [Alias("TranscriptionConfiguration_EngineTranscribeSettings_PartialResultsStability")]
        [AWSConstantClassSource("Amazon.ChimeSDKMeetings.TranscribePartialResultsStability")]
        public Amazon.ChimeSDKMeetings.TranscribePartialResultsStability EngineTranscribeSettings_PartialResultsStability { get; set; }
        #endregion
        
        #region Parameter EngineTranscribeSettings_PiiEntityType
        /// <summary>
        /// <para>
        /// <para>Specify which types of personally identifiable information (PII) you want to redact
        /// in your transcript. You can include as many types as you'd like, or you can select
        /// <c>ALL</c>.</para><para>Values must be comma-separated and can include: <c>ADDRESS</c>, <c>BANK_ACCOUNT_NUMBER</c>,
        /// <c>BANK_ROUTING</c>, <c>CREDIT_DEBIT_CVV</c>, <c>CREDIT_DEBIT_EXPIRY</c><c>CREDIT_DEBIT_NUMBER</c>,
        /// <c>EMAIL</c>,<c>NAME</c>, <c>PHONE</c>, <c>PIN</c>, <c>SSN</c>, or <c>ALL</c>.</para><para>Note that if you include <c>PiiEntityTypes</c>, you must also include <c>ContentIdentificationType</c>
        /// or <c>ContentRedactionType</c>.</para><para>If you include <c>ContentRedactionType</c> or <c>ContentIdentificationType</c>, but
        /// do not include PiiEntityTypes, all PII is redacted or identified.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [Alias("TranscriptionConfiguration_EngineTranscribeSettings_PiiEntityTypes")]
        public System.String EngineTranscribeSettings_PiiEntityType { get; set; }
        #endregion
        
        #region Parameter EngineTranscribeSettings_PreferredLanguage
        /// <summary>
        /// <para>
        /// <para>Specify a preferred language from the subset of languages codes you specified in <c>LanguageOptions</c>.</para><para>You can only use this parameter if you include <c>IdentifyLanguage</c> and <c>LanguageOptions</c>.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [Alias("TranscriptionConfiguration_EngineTranscribeSettings_PreferredLanguage")]
        [AWSConstantClassSource("Amazon.ChimeSDKMeetings.TranscribeLanguageCode")]
        public Amazon.ChimeSDKMeetings.TranscribeLanguageCode EngineTranscribeSettings_PreferredLanguage { get; set; }
        #endregion
        
        #region Parameter EngineTranscribeMedicalSettings_Region
        /// <summary>
        /// <para>
        /// <para>The Amazon Web Services Region passed to Amazon Transcribe Medical. If you don't specify
        /// a Region, Amazon Chime uses the meeting's Region. </para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [Alias("TranscriptionConfiguration_EngineTranscribeMedicalSettings_Region")]
        [AWSConstantClassSource("Amazon.ChimeSDKMeetings.TranscribeMedicalRegion")]
        public Amazon.ChimeSDKMeetings.TranscribeMedicalRegion EngineTranscribeMedicalSettings_Region { get; set; }
        #endregion
        
        #region Parameter EngineTranscribeSettings_Region
        /// <summary>
        /// <para>
        /// <para>The Amazon Web Services Region in which to use Amazon Transcribe.</para><para>If you don't specify a Region, then the <a href="https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_CreateMeeting.html">MediaRegion</a>
        /// of the meeting is used. However, if Amazon Transcribe is not available in the <c>MediaRegion</c>,
        /// then a <c>TranscriptFailed</c> event is sent.</para><para>Use <c>auto</c> to use Amazon Transcribe in a Region near the meeting’s <c>MediaRegion</c>.
        /// For more information, refer to <a href="https://docs.aws.amazon.com/chime-sdk/latest/dg/transcription-options.html#choose-region">Choosing
        /// a transcription Region</a> in the <i>Amazon Chime SDK Developer Guide</i>.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [Alias("TranscriptionConfiguration_EngineTranscribeSettings_Region")]
        [AWSConstantClassSource("Amazon.ChimeSDKMeetings.TranscribeRegion")]
        public Amazon.ChimeSDKMeetings.TranscribeRegion EngineTranscribeSettings_Region { get; set; }
        #endregion
        
        #region Parameter EngineTranscribeMedicalSettings_Specialty
        /// <summary>
        /// <para>
        /// <para>The specialty specified for the Amazon Transcribe Medical engine.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [Alias("TranscriptionConfiguration_EngineTranscribeMedicalSettings_Specialty")]
        [AWSConstantClassSource("Amazon.ChimeSDKMeetings.TranscribeMedicalSpecialty")]
        public Amazon.ChimeSDKMeetings.TranscribeMedicalSpecialty EngineTranscribeMedicalSettings_Specialty { get; set; }
        #endregion
        
        #region Parameter EngineTranscribeMedicalSettings_Type
        /// <summary>
        /// <para>
        /// <para>The type of transcription.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [Alias("TranscriptionConfiguration_EngineTranscribeMedicalSettings_Type")]
        [AWSConstantClassSource("Amazon.ChimeSDKMeetings.TranscribeMedicalType")]
        public Amazon.ChimeSDKMeetings.TranscribeMedicalType EngineTranscribeMedicalSettings_Type { get; set; }
        #endregion
        
        #region Parameter EngineTranscribeSettings_VocabularyFilterMethod
        /// <summary>
        /// <para>
        /// <para>Specify how you want your vocabulary filter applied to your transcript.</para><para>To replace words with <c>***</c>, choose <c>mask</c>.</para><para>To delete words, choose <c>remove</c>.</para><para>To flag words without changing them, choose <c>tag</c>.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [Alias("TranscriptionConfiguration_EngineTranscribeSettings_VocabularyFilterMethod")]
        [AWSConstantClassSource("Amazon.ChimeSDKMeetings.TranscribeVocabularyFilterMethod")]
        public Amazon.ChimeSDKMeetings.TranscribeVocabularyFilterMethod EngineTranscribeSettings_VocabularyFilterMethod { get; set; }
        #endregion
        
        #region Parameter EngineTranscribeSettings_VocabularyFilterName
        /// <summary>
        /// <para>
        /// <para>Specify the name of the custom vocabulary filter that you want to use when processing
        /// your transcription. Note that vocabulary filter names are case sensitive. </para><para>If you use Amazon Transcribe in multiple Regions, the vocabulary filter must be available
        /// in Amazon Transcribe in each Region.</para><para>If you include <c>IdentifyLanguage</c> and want to use one or more vocabulary filters
        /// with your transcription, use the <c>VocabularyFilterNames</c> parameter instead.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [Alias("TranscriptionConfiguration_EngineTranscribeSettings_VocabularyFilterName")]
        public System.String EngineTranscribeSettings_VocabularyFilterName { get; set; }
        #endregion
        
        #region Parameter TranscriptionConfiguration_EngineTranscribeSettings_VocabularyFilterNames
        /// <summary>
        /// <para>
        /// <para>Specify the names of the custom vocabulary filters that you want to use when processing
        /// your transcription. Note that vocabulary filter names are case sensitive.</para><para>If you use Amazon Transcribe in multiple Regions, the vocabulary filter must be available
        /// in Amazon Transcribe in each Region.</para><para> If you're <i>not</i> including <c>IdentifyLanguage</c> and want to use a custom vocabulary
        /// filter with your transcription, use the <c>VocabularyFilterName</c> parameter instead.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [Alias("EngineTranscribeSettings_VocabularyFilterNames")]
        public System.String TranscriptionConfiguration_EngineTranscribeSettings_VocabularyFilterNames { get; set; }
        #endregion
        
        #region Parameter EngineTranscribeMedicalSettings_VocabularyName
        /// <summary>
        /// <para>
        /// <para>The name of the vocabulary passed to Amazon Transcribe Medical.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [Alias("TranscriptionConfiguration_EngineTranscribeMedicalSettings_VocabularyName")]
        public System.String EngineTranscribeMedicalSettings_VocabularyName { get; set; }
        #endregion
        
        #region Parameter EngineTranscribeSettings_VocabularyName
        /// <summary>
        /// <para>
        /// <para>Specify the name of the custom vocabulary that you want to use when processing your
        /// transcription. Note that vocabulary names are case sensitive.</para><para>If you use Amazon Transcribe multiple Regions, the vocabulary must be available in
        /// Amazon Transcribe in each Region.</para><para>If you include <c>IdentifyLanguage</c> and want to use one or more custom vocabularies
        /// with your transcription, use the <c>VocabularyNames</c> parameter instead.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [Alias("TranscriptionConfiguration_EngineTranscribeSettings_VocabularyName")]
        public System.String EngineTranscribeSettings_VocabularyName { get; set; }
        #endregion
        
        #region Parameter TranscriptionConfiguration_EngineTranscribeSettings_VocabularyNames
        /// <summary>
        /// <para>
        /// <para>Specify the names of the custom vocabularies that you want to use when processing
        /// your transcription. Note that vocabulary names are case sensitive.</para><para>If you use Amazon Transcribe in multiple Regions, the vocabulary must be available
        /// in Amazon Transcribe in each Region.</para><para>If you don't include <c>IdentifyLanguage</c> and want to use a custom vocabulary with
        /// your transcription, use the <c>VocabularyName</c> parameter instead.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [Alias("EngineTranscribeSettings_VocabularyNames")]
        public System.String TranscriptionConfiguration_EngineTranscribeSettings_VocabularyNames { get; set; }
        #endregion
        
        #region Parameter Select
        /// <summary>
        /// Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
        /// Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ChimeSDKMeetings.Model.StartMeetingTranscriptionResponse).
        /// Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public string Select { get; set; } = "*";
        #endregion
        
        #region Parameter PassThru
        /// <summary>
        /// Changes the cmdlet behavior to return the value passed to the MeetingId parameter.
        /// The -PassThru parameter is deprecated, use -Select '^MeetingId' instead. This parameter will be removed in a future version.
        /// </summary>
        [System.Obsolete("The -PassThru parameter is deprecated, use -Select '^MeetingId' instead. This parameter will be removed in a future version.")]
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public SwitchParameter PassThru { get; set; }
        #endregion
        
        #region Parameter Force
        /// <summary>
        /// This parameter overrides confirmation prompts to force 
        /// the cmdlet to continue its operation. This parameter should always
        /// be used with caution.
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public SwitchParameter Force { get; set; }
        #endregion
        
        protected override void ProcessRecord()
        {
            this._AWSSignerType = "v4";
            base.ProcessRecord();
            
            var resourceIdentifiersText = FormatParameterValuesForConfirmationMsg(nameof(this.MeetingId), MyInvocation.BoundParameters);
            if (!ConfirmShouldProceed(this.Force.IsPresent, resourceIdentifiersText, "Start-CHMTGMeetingTranscription (StartMeetingTranscription)"))
            {
                return;
            }
            
            var context = new CmdletContext();
            
            // allow for manipulation of parameters prior to loading into context
            PreExecutionContextLoad(context);
            
            #pragma warning disable CS0618, CS0612 //A class member was marked with the Obsolete attribute
            if (ParameterWasBound(nameof(this.Select)))
            {
                context.Select = CreateSelectDelegate<Amazon.ChimeSDKMeetings.Model.StartMeetingTranscriptionResponse, StartCHMTGMeetingTranscriptionCmdlet>(Select) ??
                    throw new System.ArgumentException("Invalid value for -Select parameter.", nameof(this.Select));
                if (this.PassThru.IsPresent)
                {
                    throw new System.ArgumentException("-PassThru cannot be used when -Select is specified.", nameof(this.Select));
                }
            }
            else if (this.PassThru.IsPresent)
            {
                context.Select = (response, cmdlet) => this.MeetingId;
            }
            #pragma warning restore CS0618, CS0612 //A class member was marked with the Obsolete attribute
            context.MeetingId = this.MeetingId;
            #if MODULAR
            if (this.MeetingId == null && ParameterWasBound(nameof(this.MeetingId)))
            {
                WriteWarning("You are passing $null as a value for parameter MeetingId which is marked as required. In case you believe this parameter was incorrectly marked as required, report this by opening an issue at https://github.com/aws/aws-tools-for-powershell/issues.");
            }
            #endif
            context.EngineTranscribeMedicalSettings_ContentIdentificationType = this.EngineTranscribeMedicalSettings_ContentIdentificationType;
            context.EngineTranscribeMedicalSettings_LanguageCode = this.EngineTranscribeMedicalSettings_LanguageCode;
            context.EngineTranscribeMedicalSettings_Region = this.EngineTranscribeMedicalSettings_Region;
            context.EngineTranscribeMedicalSettings_Specialty = this.EngineTranscribeMedicalSettings_Specialty;
            context.EngineTranscribeMedicalSettings_Type = this.EngineTranscribeMedicalSettings_Type;
            context.EngineTranscribeMedicalSettings_VocabularyName = this.EngineTranscribeMedicalSettings_VocabularyName;
            context.EngineTranscribeSettings_ContentIdentificationType = this.EngineTranscribeSettings_ContentIdentificationType;
            context.EngineTranscribeSettings_ContentRedactionType = this.EngineTranscribeSettings_ContentRedactionType;
            context.EngineTranscribeSettings_EnablePartialResultsStabilization = this.EngineTranscribeSettings_EnablePartialResultsStabilization;
            context.EngineTranscribeSettings_IdentifyLanguage = this.EngineTranscribeSettings_IdentifyLanguage;
            context.EngineTranscribeSettings_LanguageCode = this.EngineTranscribeSettings_LanguageCode;
            context.EngineTranscribeSettings_LanguageModelName = this.EngineTranscribeSettings_LanguageModelName;
            context.EngineTranscribeSettings_LanguageOption = this.EngineTranscribeSettings_LanguageOption;
            context.EngineTranscribeSettings_PartialResultsStability = this.EngineTranscribeSettings_PartialResultsStability;
            context.EngineTranscribeSettings_PiiEntityType = this.EngineTranscribeSettings_PiiEntityType;
            context.EngineTranscribeSettings_PreferredLanguage = this.EngineTranscribeSettings_PreferredLanguage;
            context.EngineTranscribeSettings_Region = this.EngineTranscribeSettings_Region;
            context.EngineTranscribeSettings_VocabularyFilterMethod = this.EngineTranscribeSettings_VocabularyFilterMethod;
            context.EngineTranscribeSettings_VocabularyFilterName = this.EngineTranscribeSettings_VocabularyFilterName;
            context.TranscriptionConfiguration_EngineTranscribeSettings_VocabularyFilterNames = this.TranscriptionConfiguration_EngineTranscribeSettings_VocabularyFilterNames;
            context.EngineTranscribeSettings_VocabularyName = this.EngineTranscribeSettings_VocabularyName;
            context.TranscriptionConfiguration_EngineTranscribeSettings_VocabularyNames = this.TranscriptionConfiguration_EngineTranscribeSettings_VocabularyNames;
            
            // allow further manipulation of loaded context prior to processing
            PostExecutionContextLoad(context);
            
            var output = Execute(context) as CmdletOutput;
            ProcessOutput(output);
        }
        
        #region IExecutor Members
        
        public object Execute(ExecutorContext context)
        {
            var cmdletContext = context as CmdletContext;
            // create request
            var request = new Amazon.ChimeSDKMeetings.Model.StartMeetingTranscriptionRequest();
            
            if (cmdletContext.MeetingId != null)
            {
                request.MeetingId = cmdletContext.MeetingId;
            }
            
             // populate TranscriptionConfiguration
            var requestTranscriptionConfigurationIsNull = true;
            request.TranscriptionConfiguration = new Amazon.ChimeSDKMeetings.Model.TranscriptionConfiguration();
            Amazon.ChimeSDKMeetings.Model.EngineTranscribeMedicalSettings requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeMedicalSettings = null;
            
             // populate EngineTranscribeMedicalSettings
            var requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeMedicalSettingsIsNull = true;
            requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeMedicalSettings = new Amazon.ChimeSDKMeetings.Model.EngineTranscribeMedicalSettings();
            Amazon.ChimeSDKMeetings.TranscribeMedicalContentIdentificationType requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeMedicalSettings_engineTranscribeMedicalSettings_ContentIdentificationType = null;
            if (cmdletContext.EngineTranscribeMedicalSettings_ContentIdentificationType != null)
            {
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeMedicalSettings_engineTranscribeMedicalSettings_ContentIdentificationType = cmdletContext.EngineTranscribeMedicalSettings_ContentIdentificationType;
            }
            if (requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeMedicalSettings_engineTranscribeMedicalSettings_ContentIdentificationType != null)
            {
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeMedicalSettings.ContentIdentificationType = requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeMedicalSettings_engineTranscribeMedicalSettings_ContentIdentificationType;
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeMedicalSettingsIsNull = false;
            }
            Amazon.ChimeSDKMeetings.TranscribeMedicalLanguageCode requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeMedicalSettings_engineTranscribeMedicalSettings_LanguageCode = null;
            if (cmdletContext.EngineTranscribeMedicalSettings_LanguageCode != null)
            {
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeMedicalSettings_engineTranscribeMedicalSettings_LanguageCode = cmdletContext.EngineTranscribeMedicalSettings_LanguageCode;
            }
            if (requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeMedicalSettings_engineTranscribeMedicalSettings_LanguageCode != null)
            {
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeMedicalSettings.LanguageCode = requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeMedicalSettings_engineTranscribeMedicalSettings_LanguageCode;
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeMedicalSettingsIsNull = false;
            }
            Amazon.ChimeSDKMeetings.TranscribeMedicalRegion requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeMedicalSettings_engineTranscribeMedicalSettings_Region = null;
            if (cmdletContext.EngineTranscribeMedicalSettings_Region != null)
            {
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeMedicalSettings_engineTranscribeMedicalSettings_Region = cmdletContext.EngineTranscribeMedicalSettings_Region;
            }
            if (requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeMedicalSettings_engineTranscribeMedicalSettings_Region != null)
            {
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeMedicalSettings.Region = requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeMedicalSettings_engineTranscribeMedicalSettings_Region;
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeMedicalSettingsIsNull = false;
            }
            Amazon.ChimeSDKMeetings.TranscribeMedicalSpecialty requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeMedicalSettings_engineTranscribeMedicalSettings_Specialty = null;
            if (cmdletContext.EngineTranscribeMedicalSettings_Specialty != null)
            {
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeMedicalSettings_engineTranscribeMedicalSettings_Specialty = cmdletContext.EngineTranscribeMedicalSettings_Specialty;
            }
            if (requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeMedicalSettings_engineTranscribeMedicalSettings_Specialty != null)
            {
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeMedicalSettings.Specialty = requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeMedicalSettings_engineTranscribeMedicalSettings_Specialty;
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeMedicalSettingsIsNull = false;
            }
            Amazon.ChimeSDKMeetings.TranscribeMedicalType requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeMedicalSettings_engineTranscribeMedicalSettings_Type = null;
            if (cmdletContext.EngineTranscribeMedicalSettings_Type != null)
            {
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeMedicalSettings_engineTranscribeMedicalSettings_Type = cmdletContext.EngineTranscribeMedicalSettings_Type;
            }
            if (requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeMedicalSettings_engineTranscribeMedicalSettings_Type != null)
            {
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeMedicalSettings.Type = requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeMedicalSettings_engineTranscribeMedicalSettings_Type;
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeMedicalSettingsIsNull = false;
            }
            System.String requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeMedicalSettings_engineTranscribeMedicalSettings_VocabularyName = null;
            if (cmdletContext.EngineTranscribeMedicalSettings_VocabularyName != null)
            {
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeMedicalSettings_engineTranscribeMedicalSettings_VocabularyName = cmdletContext.EngineTranscribeMedicalSettings_VocabularyName;
            }
            if (requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeMedicalSettings_engineTranscribeMedicalSettings_VocabularyName != null)
            {
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeMedicalSettings.VocabularyName = requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeMedicalSettings_engineTranscribeMedicalSettings_VocabularyName;
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeMedicalSettingsIsNull = false;
            }
             // determine if requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeMedicalSettings should be set to null
            if (requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeMedicalSettingsIsNull)
            {
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeMedicalSettings = null;
            }
            if (requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeMedicalSettings != null)
            {
                request.TranscriptionConfiguration.EngineTranscribeMedicalSettings = requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeMedicalSettings;
                requestTranscriptionConfigurationIsNull = false;
            }
            Amazon.ChimeSDKMeetings.Model.EngineTranscribeSettings requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings = null;
            
             // populate EngineTranscribeSettings
            var requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettingsIsNull = true;
            requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings = new Amazon.ChimeSDKMeetings.Model.EngineTranscribeSettings();
            Amazon.ChimeSDKMeetings.TranscribeContentIdentificationType requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_ContentIdentificationType = null;
            if (cmdletContext.EngineTranscribeSettings_ContentIdentificationType != null)
            {
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_ContentIdentificationType = cmdletContext.EngineTranscribeSettings_ContentIdentificationType;
            }
            if (requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_ContentIdentificationType != null)
            {
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings.ContentIdentificationType = requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_ContentIdentificationType;
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettingsIsNull = false;
            }
            Amazon.ChimeSDKMeetings.TranscribeContentRedactionType requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_ContentRedactionType = null;
            if (cmdletContext.EngineTranscribeSettings_ContentRedactionType != null)
            {
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_ContentRedactionType = cmdletContext.EngineTranscribeSettings_ContentRedactionType;
            }
            if (requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_ContentRedactionType != null)
            {
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings.ContentRedactionType = requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_ContentRedactionType;
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettingsIsNull = false;
            }
            System.Boolean? requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_EnablePartialResultsStabilization = null;
            if (cmdletContext.EngineTranscribeSettings_EnablePartialResultsStabilization != null)
            {
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_EnablePartialResultsStabilization = cmdletContext.EngineTranscribeSettings_EnablePartialResultsStabilization.Value;
            }
            if (requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_EnablePartialResultsStabilization != null)
            {
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings.EnablePartialResultsStabilization = requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_EnablePartialResultsStabilization.Value;
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettingsIsNull = false;
            }
            System.Boolean? requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_IdentifyLanguage = null;
            if (cmdletContext.EngineTranscribeSettings_IdentifyLanguage != null)
            {
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_IdentifyLanguage = cmdletContext.EngineTranscribeSettings_IdentifyLanguage.Value;
            }
            if (requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_IdentifyLanguage != null)
            {
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings.IdentifyLanguage = requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_IdentifyLanguage.Value;
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettingsIsNull = false;
            }
            Amazon.ChimeSDKMeetings.TranscribeLanguageCode requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_LanguageCode = null;
            if (cmdletContext.EngineTranscribeSettings_LanguageCode != null)
            {
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_LanguageCode = cmdletContext.EngineTranscribeSettings_LanguageCode;
            }
            if (requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_LanguageCode != null)
            {
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings.LanguageCode = requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_LanguageCode;
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettingsIsNull = false;
            }
            System.String requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_LanguageModelName = null;
            if (cmdletContext.EngineTranscribeSettings_LanguageModelName != null)
            {
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_LanguageModelName = cmdletContext.EngineTranscribeSettings_LanguageModelName;
            }
            if (requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_LanguageModelName != null)
            {
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings.LanguageModelName = requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_LanguageModelName;
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettingsIsNull = false;
            }
            System.String requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_LanguageOption = null;
            if (cmdletContext.EngineTranscribeSettings_LanguageOption != null)
            {
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_LanguageOption = cmdletContext.EngineTranscribeSettings_LanguageOption;
            }
            if (requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_LanguageOption != null)
            {
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings.LanguageOptions = requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_LanguageOption;
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettingsIsNull = false;
            }
            Amazon.ChimeSDKMeetings.TranscribePartialResultsStability requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_PartialResultsStability = null;
            if (cmdletContext.EngineTranscribeSettings_PartialResultsStability != null)
            {
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_PartialResultsStability = cmdletContext.EngineTranscribeSettings_PartialResultsStability;
            }
            if (requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_PartialResultsStability != null)
            {
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings.PartialResultsStability = requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_PartialResultsStability;
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettingsIsNull = false;
            }
            System.String requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_PiiEntityType = null;
            if (cmdletContext.EngineTranscribeSettings_PiiEntityType != null)
            {
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_PiiEntityType = cmdletContext.EngineTranscribeSettings_PiiEntityType;
            }
            if (requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_PiiEntityType != null)
            {
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings.PiiEntityTypes = requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_PiiEntityType;
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettingsIsNull = false;
            }
            Amazon.ChimeSDKMeetings.TranscribeLanguageCode requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_PreferredLanguage = null;
            if (cmdletContext.EngineTranscribeSettings_PreferredLanguage != null)
            {
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_PreferredLanguage = cmdletContext.EngineTranscribeSettings_PreferredLanguage;
            }
            if (requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_PreferredLanguage != null)
            {
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings.PreferredLanguage = requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_PreferredLanguage;
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettingsIsNull = false;
            }
            Amazon.ChimeSDKMeetings.TranscribeRegion requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_Region = null;
            if (cmdletContext.EngineTranscribeSettings_Region != null)
            {
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_Region = cmdletContext.EngineTranscribeSettings_Region;
            }
            if (requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_Region != null)
            {
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings.Region = requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_Region;
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettingsIsNull = false;
            }
            Amazon.ChimeSDKMeetings.TranscribeVocabularyFilterMethod requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_VocabularyFilterMethod = null;
            if (cmdletContext.EngineTranscribeSettings_VocabularyFilterMethod != null)
            {
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_VocabularyFilterMethod = cmdletContext.EngineTranscribeSettings_VocabularyFilterMethod;
            }
            if (requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_VocabularyFilterMethod != null)
            {
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings.VocabularyFilterMethod = requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_VocabularyFilterMethod;
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettingsIsNull = false;
            }
            System.String requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_VocabularyFilterName = null;
            if (cmdletContext.EngineTranscribeSettings_VocabularyFilterName != null)
            {
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_VocabularyFilterName = cmdletContext.EngineTranscribeSettings_VocabularyFilterName;
            }
            if (requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_VocabularyFilterName != null)
            {
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings.VocabularyFilterName = requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_VocabularyFilterName;
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettingsIsNull = false;
            }
            System.String requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_transcriptionConfiguration_EngineTranscribeSettings_VocabularyFilterNames = null;
            if (cmdletContext.TranscriptionConfiguration_EngineTranscribeSettings_VocabularyFilterNames != null)
            {
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_transcriptionConfiguration_EngineTranscribeSettings_VocabularyFilterNames = cmdletContext.TranscriptionConfiguration_EngineTranscribeSettings_VocabularyFilterNames;
            }
            if (requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_transcriptionConfiguration_EngineTranscribeSettings_VocabularyFilterNames != null)
            {
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings.VocabularyFilterNames = requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_transcriptionConfiguration_EngineTranscribeSettings_VocabularyFilterNames;
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettingsIsNull = false;
            }
            System.String requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_VocabularyName = null;
            if (cmdletContext.EngineTranscribeSettings_VocabularyName != null)
            {
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_VocabularyName = cmdletContext.EngineTranscribeSettings_VocabularyName;
            }
            if (requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_VocabularyName != null)
            {
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings.VocabularyName = requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_engineTranscribeSettings_VocabularyName;
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettingsIsNull = false;
            }
            System.String requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_transcriptionConfiguration_EngineTranscribeSettings_VocabularyNames = null;
            if (cmdletContext.TranscriptionConfiguration_EngineTranscribeSettings_VocabularyNames != null)
            {
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_transcriptionConfiguration_EngineTranscribeSettings_VocabularyNames = cmdletContext.TranscriptionConfiguration_EngineTranscribeSettings_VocabularyNames;
            }
            if (requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_transcriptionConfiguration_EngineTranscribeSettings_VocabularyNames != null)
            {
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings.VocabularyNames = requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings_transcriptionConfiguration_EngineTranscribeSettings_VocabularyNames;
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettingsIsNull = false;
            }
             // determine if requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings should be set to null
            if (requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettingsIsNull)
            {
                requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings = null;
            }
            if (requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings != null)
            {
                request.TranscriptionConfiguration.EngineTranscribeSettings = requestTranscriptionConfiguration_transcriptionConfiguration_EngineTranscribeSettings;
                requestTranscriptionConfigurationIsNull = false;
            }
             // determine if request.TranscriptionConfiguration should be set to null
            if (requestTranscriptionConfigurationIsNull)
            {
                request.TranscriptionConfiguration = null;
            }
            
            CmdletOutput output;
            
            // issue call
            var client = Client ?? CreateClient(_CurrentCredentials, _RegionEndpoint);
            try
            {
                var response = CallAWSServiceOperation(client, request);
                object pipelineOutput = null;
                pipelineOutput = cmdletContext.Select(response, this);
                output = new CmdletOutput
                {
                    PipelineOutput = pipelineOutput,
                    ServiceResponse = response
                };
            }
            catch (Exception e)
            {
                output = new CmdletOutput { ErrorResponse = e };
            }
            
            return output;
        }
        
        public ExecutorContext CreateContext()
        {
            return new CmdletContext();
        }
        
        #endregion
        
        #region AWS Service Operation Call
        
        private Amazon.ChimeSDKMeetings.Model.StartMeetingTranscriptionResponse CallAWSServiceOperation(IAmazonChimeSDKMeetings client, Amazon.ChimeSDKMeetings.Model.StartMeetingTranscriptionRequest request)
        {
            Utils.Common.WriteVerboseEndpointMessage(this, client.Config, "Amazon Chime SDK Meetings", "StartMeetingTranscription");
            try
            {
                #if DESKTOP
                return client.StartMeetingTranscription(request);
                #elif CORECLR
                return client.StartMeetingTranscriptionAsync(request).GetAwaiter().GetResult();
                #else
                        #error "Unknown build edition"
                #endif
            }
            catch (AmazonServiceException exc)
            {
                var webException = exc.InnerException as System.Net.WebException;
                if (webException != null)
                {
                    throw new Exception(Utils.Common.FormatNameResolutionFailureMessage(client.Config, webException.Message), webException);
                }
                throw;
            }
        }
        
        #endregion
        
        internal partial class CmdletContext : ExecutorContext
        {
            public System.String MeetingId { get; set; }
            public Amazon.ChimeSDKMeetings.TranscribeMedicalContentIdentificationType EngineTranscribeMedicalSettings_ContentIdentificationType { get; set; }
            public Amazon.ChimeSDKMeetings.TranscribeMedicalLanguageCode EngineTranscribeMedicalSettings_LanguageCode { get; set; }
            public Amazon.ChimeSDKMeetings.TranscribeMedicalRegion EngineTranscribeMedicalSettings_Region { get; set; }
            public Amazon.ChimeSDKMeetings.TranscribeMedicalSpecialty EngineTranscribeMedicalSettings_Specialty { get; set; }
            public Amazon.ChimeSDKMeetings.TranscribeMedicalType EngineTranscribeMedicalSettings_Type { get; set; }
            public System.String EngineTranscribeMedicalSettings_VocabularyName { get; set; }
            public Amazon.ChimeSDKMeetings.TranscribeContentIdentificationType EngineTranscribeSettings_ContentIdentificationType { get; set; }
            public Amazon.ChimeSDKMeetings.TranscribeContentRedactionType EngineTranscribeSettings_ContentRedactionType { get; set; }
            public System.Boolean? EngineTranscribeSettings_EnablePartialResultsStabilization { get; set; }
            public System.Boolean? EngineTranscribeSettings_IdentifyLanguage { get; set; }
            public Amazon.ChimeSDKMeetings.TranscribeLanguageCode EngineTranscribeSettings_LanguageCode { get; set; }
            public System.String EngineTranscribeSettings_LanguageModelName { get; set; }
            public System.String EngineTranscribeSettings_LanguageOption { get; set; }
            public Amazon.ChimeSDKMeetings.TranscribePartialResultsStability EngineTranscribeSettings_PartialResultsStability { get; set; }
            public System.String EngineTranscribeSettings_PiiEntityType { get; set; }
            public Amazon.ChimeSDKMeetings.TranscribeLanguageCode EngineTranscribeSettings_PreferredLanguage { get; set; }
            public Amazon.ChimeSDKMeetings.TranscribeRegion EngineTranscribeSettings_Region { get; set; }
            public Amazon.ChimeSDKMeetings.TranscribeVocabularyFilterMethod EngineTranscribeSettings_VocabularyFilterMethod { get; set; }
            public System.String EngineTranscribeSettings_VocabularyFilterName { get; set; }
            public System.String TranscriptionConfiguration_EngineTranscribeSettings_VocabularyFilterNames { get; set; }
            public System.String EngineTranscribeSettings_VocabularyName { get; set; }
            public System.String TranscriptionConfiguration_EngineTranscribeSettings_VocabularyNames { get; set; }
            public System.Func<Amazon.ChimeSDKMeetings.Model.StartMeetingTranscriptionResponse, StartCHMTGMeetingTranscriptionCmdlet, object> Select { get; set; } =
                (response, cmdlet) => null;
        }
        
    }
}
