/*******************************************************************************
 *  Copyright 2012-2015 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 *  this file except in compliance with the License. A copy of the License is located at
 *
 *  http://aws.amazon.com/apache2.0
 *
 *  or in the "license" file accompanying this file.
 *  This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 *  CONDITIONS OF ANY KIND, either express or implied. See the License for the
 *  specific language governing permissions and limitations under the License.
 * *****************************************************************************
 *
 *  AWS Tools for Windows (TM) PowerShell (TM)
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;
using System.Text;
using Amazon.PowerShell.Common;
using Amazon.Runtime;
using Amazon.Inspector;
using Amazon.Inspector.Model;

namespace Amazon.PowerShell.Cmdlets.INS
{
    /// <summary>
    /// Lists findings generated by the assessment run(s) specified by the assessment run
    /// ARN(s).
    /// </summary>
    [Cmdlet("Get", "INSFindingList")]
    [OutputType("System.String")]
    [AWSCmdlet("Invokes the ListFindings operation against Amazon Inspector.", Operation = new[] {"ListFindings"})]
    [AWSCmdletOutput("System.String",
        "This cmdlet returns a collection of String objects.",
        "The service call response (type Amazon.Inspector.Model.ListFindingsResponse) can also be referenced from properties attached to the cmdlet entry in the $AWSHistory stack.",
        "Additionally, the following properties are added as Note properties to the service response type instance for the cmdlet entry in the $AWSHistory stack: NextToken (type System.String)"
    )]
    public class GetINSFindingListCmdlet : AmazonInspectorClientCmdlet, IExecutor
    {
        
        #region Parameter Filter_AgentId
        /// <summary>
        /// <para>
        /// <para>For a record to match a filter, one of the values specified for this data type property
        /// must be the exact match of the value of the <b>agentId</b> property of the <a>Finding</a>
        /// data type.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter]
        [Alias("Filter_AgentIds")]
        public System.String[] Filter_AgentId { get; set; }
        #endregion
        
        #region Parameter AssessmentRunArn
        /// <summary>
        /// <para>
        /// <para>The ARNs of the assessment run(s) that generate the findings that you want to list.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [Alias("AssessmentRunArns")]
        public System.String[] AssessmentRunArn { get; set; }
        #endregion
        
        #region Parameter Filter_Attribute
        /// <summary>
        /// <para>
        /// <para>For a record to match a filter, the list of values specified for this data type property
        /// must be contained in the list of values of the <b>attributes</b> property of the <a>Finding</a>
        /// data type.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter]
        [Alias("Filter_Attributes")]
        public Amazon.Inspector.Model.Attribute[] Filter_Attribute { get; set; }
        #endregion
        
        #region Parameter Filter_AutoScalingGroup
        /// <summary>
        /// <para>
        /// <para>For a record to match a filter, one of the values specified for this data type property
        /// must be the exact match of the value of the <b>autoScalingGroup</b> property of the
        /// <a>Finding</a> data type.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter]
        [Alias("Filter_AutoScalingGroups")]
        public System.String[] Filter_AutoScalingGroup { get; set; }
        #endregion
        
        #region Parameter CreationTimeRange_BeginDate
        /// <summary>
        /// <para>
        /// <para>The minimum value of the timestamp range.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter]
        [Alias("Filter_CreationTimeRange_BeginDate")]
        public System.DateTime CreationTimeRange_BeginDate { get; set; }
        #endregion
        
        #region Parameter CreationTimeRange_EndDate
        /// <summary>
        /// <para>
        /// <para>The maximum value of the timestamp range.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter]
        [Alias("Filter_CreationTimeRange_EndDate")]
        public System.DateTime CreationTimeRange_EndDate { get; set; }
        #endregion
        
        #region Parameter Filter_RuleName
        /// <summary>
        /// <para>
        /// <para>For a record to match a filter, one of the values specified for this data type property
        /// must be the exact match of the value of the <b>ruleName</b> property of the <a>Finding</a>
        /// data type.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter]
        [Alias("Filter_RuleNames")]
        public System.String[] Filter_RuleName { get; set; }
        #endregion
        
        #region Parameter Filter_RulesPackageArn
        /// <summary>
        /// <para>
        /// <para>For a record to match a filter, one of the values specified for this data type property
        /// must be the exact match of the value of the <b>rulesPackageArn</b> property of the
        /// <a>Finding</a> data type.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter]
        [Alias("Filter_RulesPackageArns")]
        public System.String[] Filter_RulesPackageArn { get; set; }
        #endregion
        
        #region Parameter Filter_Severity
        /// <summary>
        /// <para>
        /// <para>For a record to match a filter, one of the values specified for this data type property
        /// must be the exact match of the value of the <b>severity</b> property of the <a>Finding</a>
        /// data type.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter]
        [Alias("Filter_Severities")]
        public System.String[] Filter_Severity { get; set; }
        #endregion
        
        #region Parameter Filter_UserAttribute
        /// <summary>
        /// <para>
        /// <para>For a record to match a filter, the value specified for this data type property must
        /// be contained in the list of values of the <b>userAttributes</b> property of the <a>Finding</a>
        /// data type.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter]
        [Alias("Filter_UserAttributes")]
        public Amazon.Inspector.Model.Attribute[] Filter_UserAttribute { get; set; }
        #endregion
        
        #region Parameter MaxResult
        /// <summary>
        /// <para>
        /// <para>You can use this parameter to indicate the maximum number of items you want in the
        /// response. The default value is 10. The maximum value is 500.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter]
        [Alias("MaxItems","MaxResults")]
        public int MaxResult { get; set; }
        #endregion
        
        #region Parameter NextToken
        /// <summary>
        /// <para>
        /// <para>You can use this parameter when paginating results. Set the value of this parameter
        /// to 'null' on your first call to the <b>ListFindings</b> action. Subsequent calls to
        /// the action fill <b>nextToken</b> in the request with the value of <b>NextToken</b>
        /// from previous response to continue listing data.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter]
        public System.String NextToken { get; set; }
        #endregion
        
        protected override void ProcessRecord()
        {
            base.ProcessRecord();
            
            var context = new CmdletContext
            {
                Region = this.Region,
                Credentials = this.CurrentCredentials
            };
            
            if (this.AssessmentRunArn != null)
            {
                context.AssessmentRunArns = new List<System.String>(this.AssessmentRunArn);
            }
            if (this.Filter_AgentId != null)
            {
                context.Filter_AgentIds = new List<System.String>(this.Filter_AgentId);
            }
            if (this.Filter_Attribute != null)
            {
                context.Filter_Attributes = new List<Amazon.Inspector.Model.Attribute>(this.Filter_Attribute);
            }
            if (this.Filter_AutoScalingGroup != null)
            {
                context.Filter_AutoScalingGroups = new List<System.String>(this.Filter_AutoScalingGroup);
            }
            if (ParameterWasBound("CreationTimeRange_BeginDate"))
                context.Filter_CreationTimeRange_BeginDate = this.CreationTimeRange_BeginDate;
            if (ParameterWasBound("CreationTimeRange_EndDate"))
                context.Filter_CreationTimeRange_EndDate = this.CreationTimeRange_EndDate;
            if (this.Filter_RuleName != null)
            {
                context.Filter_RuleNames = new List<System.String>(this.Filter_RuleName);
            }
            if (this.Filter_RulesPackageArn != null)
            {
                context.Filter_RulesPackageArns = new List<System.String>(this.Filter_RulesPackageArn);
            }
            if (this.Filter_Severity != null)
            {
                context.Filter_Severities = new List<System.String>(this.Filter_Severity);
            }
            if (this.Filter_UserAttribute != null)
            {
                context.Filter_UserAttributes = new List<Amazon.Inspector.Model.Attribute>(this.Filter_UserAttribute);
            }
            if (ParameterWasBound("MaxResult"))
                context.MaxResults = this.MaxResult;
            context.NextToken = this.NextToken;
            
            var output = Execute(context) as CmdletOutput;
            ProcessOutput(output);
        }
        
        #region IExecutor Members
        
        public object Execute(ExecutorContext context)
        {
            var cmdletContext = context as CmdletContext;
            
            // create request and set iteration invariants
            var request = new Amazon.Inspector.Model.ListFindingsRequest();
            if (cmdletContext.AssessmentRunArns != null)
            {
                request.AssessmentRunArns = cmdletContext.AssessmentRunArns;
            }
            
             // populate Filter
            bool requestFilterIsNull = true;
            request.Filter = new Amazon.Inspector.Model.FindingFilter();
            List<System.String> requestFilter_filter_AgentId = null;
            if (cmdletContext.Filter_AgentIds != null)
            {
                requestFilter_filter_AgentId = cmdletContext.Filter_AgentIds;
            }
            if (requestFilter_filter_AgentId != null)
            {
                request.Filter.AgentIds = requestFilter_filter_AgentId;
                requestFilterIsNull = false;
            }
            List<Amazon.Inspector.Model.Attribute> requestFilter_filter_Attribute = null;
            if (cmdletContext.Filter_Attributes != null)
            {
                requestFilter_filter_Attribute = cmdletContext.Filter_Attributes;
            }
            if (requestFilter_filter_Attribute != null)
            {
                request.Filter.Attributes = requestFilter_filter_Attribute;
                requestFilterIsNull = false;
            }
            List<System.String> requestFilter_filter_AutoScalingGroup = null;
            if (cmdletContext.Filter_AutoScalingGroups != null)
            {
                requestFilter_filter_AutoScalingGroup = cmdletContext.Filter_AutoScalingGroups;
            }
            if (requestFilter_filter_AutoScalingGroup != null)
            {
                request.Filter.AutoScalingGroups = requestFilter_filter_AutoScalingGroup;
                requestFilterIsNull = false;
            }
            List<System.String> requestFilter_filter_RuleName = null;
            if (cmdletContext.Filter_RuleNames != null)
            {
                requestFilter_filter_RuleName = cmdletContext.Filter_RuleNames;
            }
            if (requestFilter_filter_RuleName != null)
            {
                request.Filter.RuleNames = requestFilter_filter_RuleName;
                requestFilterIsNull = false;
            }
            List<System.String> requestFilter_filter_RulesPackageArn = null;
            if (cmdletContext.Filter_RulesPackageArns != null)
            {
                requestFilter_filter_RulesPackageArn = cmdletContext.Filter_RulesPackageArns;
            }
            if (requestFilter_filter_RulesPackageArn != null)
            {
                request.Filter.RulesPackageArns = requestFilter_filter_RulesPackageArn;
                requestFilterIsNull = false;
            }
            List<System.String> requestFilter_filter_Severity = null;
            if (cmdletContext.Filter_Severities != null)
            {
                requestFilter_filter_Severity = cmdletContext.Filter_Severities;
            }
            if (requestFilter_filter_Severity != null)
            {
                request.Filter.Severities = requestFilter_filter_Severity;
                requestFilterIsNull = false;
            }
            List<Amazon.Inspector.Model.Attribute> requestFilter_filter_UserAttribute = null;
            if (cmdletContext.Filter_UserAttributes != null)
            {
                requestFilter_filter_UserAttribute = cmdletContext.Filter_UserAttributes;
            }
            if (requestFilter_filter_UserAttribute != null)
            {
                request.Filter.UserAttributes = requestFilter_filter_UserAttribute;
                requestFilterIsNull = false;
            }
            Amazon.Inspector.Model.TimestampRange requestFilter_filter_CreationTimeRange = null;
            
             // populate CreationTimeRange
            bool requestFilter_filter_CreationTimeRangeIsNull = true;
            requestFilter_filter_CreationTimeRange = new Amazon.Inspector.Model.TimestampRange();
            System.DateTime? requestFilter_filter_CreationTimeRange_creationTimeRange_BeginDate = null;
            if (cmdletContext.Filter_CreationTimeRange_BeginDate != null)
            {
                requestFilter_filter_CreationTimeRange_creationTimeRange_BeginDate = cmdletContext.Filter_CreationTimeRange_BeginDate.Value;
            }
            if (requestFilter_filter_CreationTimeRange_creationTimeRange_BeginDate != null)
            {
                requestFilter_filter_CreationTimeRange.BeginDate = requestFilter_filter_CreationTimeRange_creationTimeRange_BeginDate.Value;
                requestFilter_filter_CreationTimeRangeIsNull = false;
            }
            System.DateTime? requestFilter_filter_CreationTimeRange_creationTimeRange_EndDate = null;
            if (cmdletContext.Filter_CreationTimeRange_EndDate != null)
            {
                requestFilter_filter_CreationTimeRange_creationTimeRange_EndDate = cmdletContext.Filter_CreationTimeRange_EndDate.Value;
            }
            if (requestFilter_filter_CreationTimeRange_creationTimeRange_EndDate != null)
            {
                requestFilter_filter_CreationTimeRange.EndDate = requestFilter_filter_CreationTimeRange_creationTimeRange_EndDate.Value;
                requestFilter_filter_CreationTimeRangeIsNull = false;
            }
             // determine if requestFilter_filter_CreationTimeRange should be set to null
            if (requestFilter_filter_CreationTimeRangeIsNull)
            {
                requestFilter_filter_CreationTimeRange = null;
            }
            if (requestFilter_filter_CreationTimeRange != null)
            {
                request.Filter.CreationTimeRange = requestFilter_filter_CreationTimeRange;
                requestFilterIsNull = false;
            }
             // determine if request.Filter should be set to null
            if (requestFilterIsNull)
            {
                request.Filter = null;
            }
            
            // Initialize loop variants and commence piping
            System.String _nextMarker = null;
            int? _emitLimit = null;
            int _retrievedSoFar = 0;
            if (AutoIterationHelpers.HasValue(cmdletContext.NextToken))
            {
                _nextMarker = cmdletContext.NextToken;
            }
            if (AutoIterationHelpers.HasValue(cmdletContext.MaxResults))
            {
                _emitLimit = cmdletContext.MaxResults;
            }
            bool _userControllingPaging = AutoIterationHelpers.HasValue(cmdletContext.NextToken) || AutoIterationHelpers.HasValue(cmdletContext.MaxResults);
            bool _continueIteration = true;
            
            try
            {
                do
                {
                    request.NextToken = _nextMarker;
                    if (AutoIterationHelpers.HasValue(_emitLimit))
                    {
                        request.MaxResults = AutoIterationHelpers.ConvertEmitLimitToInt32(_emitLimit.Value);
                    }
                    
                    var client = Client ?? CreateClient(context.Credentials, context.Region);
                    CmdletOutput output;
                    
                    try
                    {
                        
                        var response = client.ListFindings(request);
                        Dictionary<string, object> notes = null;
                        object pipelineOutput = response.FindingArns;
                        notes = new Dictionary<string, object>();
                        notes["NextToken"] = response.NextToken;
                        output = new CmdletOutput
                        {
                            PipelineOutput = pipelineOutput,
                            ServiceResponse = response,
                            Notes = notes
                        };
                        int _receivedThisCall = response.FindingArns.Count;
                        if (_userControllingPaging)
                        {
                            WriteProgressRecord("Retrieving", string.Format("Retrieved {0} records starting from marker '{1}'", _receivedThisCall, request.NextToken));
                        }
                        
                        _nextMarker = response.NextToken;
                        
                        _retrievedSoFar += _receivedThisCall;
                        if (AutoIterationHelpers.HasValue(_emitLimit) && (_retrievedSoFar == 0 || _retrievedSoFar >= _emitLimit.Value))
                        {
                            _continueIteration = false;
                        }
                    }
                    catch (Exception e)
                    {
                        output = new CmdletOutput { ErrorResponse = e };
                    }
                    
                    ProcessOutput(output);
                } while (_continueIteration && AutoIterationHelpers.HasValue(_nextMarker));
                
            }
            finally
            {
                if (_userControllingPaging)
                {
                    WriteProgressCompleteRecord("Retrieving", "Retrieved records");
                }
            }
            
            return null;
        }
        
        public ExecutorContext CreateContext()
        {
            return new CmdletContext();
        }
        
        #endregion
        
        
        internal class CmdletContext : ExecutorContext
        {
            public List<System.String> AssessmentRunArns { get; set; }
            public List<System.String> Filter_AgentIds { get; set; }
            public List<Amazon.Inspector.Model.Attribute> Filter_Attributes { get; set; }
            public List<System.String> Filter_AutoScalingGroups { get; set; }
            public System.DateTime? Filter_CreationTimeRange_BeginDate { get; set; }
            public System.DateTime? Filter_CreationTimeRange_EndDate { get; set; }
            public List<System.String> Filter_RuleNames { get; set; }
            public List<System.String> Filter_RulesPackageArns { get; set; }
            public List<System.String> Filter_Severities { get; set; }
            public List<Amazon.Inspector.Model.Attribute> Filter_UserAttributes { get; set; }
            public int? MaxResults { get; set; }
            public System.String NextToken { get; set; }
        }
        
    }
}
