/*******************************************************************************
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 *  this file except in compliance with the License. A copy of the License is located at
 *
 *  http://aws.amazon.com/apache2.0
 *
 *  or in the "license" file accompanying this file.
 *  This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 *  CONDITIONS OF ANY KIND, either express or implied. See the License for the
 *  specific language governing permissions and limitations under the License.
 * *****************************************************************************
 *
 *  AWS Tools for Windows (TM) PowerShell (TM)
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;
using System.Text;
using Amazon.PowerShell.Common;
using Amazon.Runtime;
using Amazon.PartnerCentralSelling;
using Amazon.PartnerCentralSelling.Model;

namespace Amazon.PowerShell.Cmdlets.PC
{
    /// <summary>
    /// This request accepts a list of filters that retrieve opportunity subsets as well as
    /// sort options. This feature is available to partners from <a href="https://partnercentral.awspartner.com/">Partner
    /// Central</a> using the <c>ListOpportunities</c> API action.
    /// 
    ///  
    /// <para>
    /// To synchronize your system with Amazon Web Services, list only the opportunities that
    /// were newly created or updated. We recommend you rely on events emitted by the service
    /// into your Amazon Web Services account’s Amazon EventBridge default event bus. You
    /// can also use the <c>ListOpportunities</c> action.
    /// </para><para>
    /// We recommend the following approach:
    /// </para><ol><li><para>
    /// Find the latest <c>LastModifiedDate</c> that you stored, and only use the values that
    /// came from Amazon Web Services. Don’t use values generated by your system.
    /// </para></li><li><para>
    /// When you send a <c>ListOpportunities</c> request, submit the date in ISO 8601 format
    /// in the <c>AfterLastModifiedDate</c> filter.
    /// </para></li><li><para>
    /// Amazon Web Services only returns opportunities created or updated on or after that
    /// date and time. Use <c>NextToken</c> to iterate over all pages.
    /// </para></li></ol>
    /// </summary>
    [Cmdlet("Get", "PCOpportunityList")]
    [OutputType("Amazon.PartnerCentralSelling.Model.OpportunitySummary")]
    [AWSCmdlet("Calls the Partner Central Selling API ListOpportunities API operation.", Operation = new[] {"ListOpportunities"}, SelectReturnType = typeof(Amazon.PartnerCentralSelling.Model.ListOpportunitiesResponse))]
    [AWSCmdletOutput("Amazon.PartnerCentralSelling.Model.OpportunitySummary or Amazon.PartnerCentralSelling.Model.ListOpportunitiesResponse",
        "This cmdlet returns a collection of Amazon.PartnerCentralSelling.Model.OpportunitySummary objects.",
        "The service call response (type Amazon.PartnerCentralSelling.Model.ListOpportunitiesResponse) can be returned by specifying '-Select *'."
    )]
    public partial class GetPCOpportunityListCmdlet : AmazonPartnerCentralSellingClientCmdlet, IExecutor
    {
        
        protected override bool IsSensitiveResponse { get; set; } = true;
        
        protected override bool IsGeneratedCmdlet { get; set; } = true;
        
        #region Parameter LastModifiedDate_AfterLastModifiedDate
        /// <summary>
        /// <para>
        /// <para>Specifies the date after which the opportunities were modified. Use this filter to
        /// retrieve only those opportunities that were modified after a given timestamp.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public System.DateTime? LastModifiedDate_AfterLastModifiedDate { get; set; }
        #endregion
        
        #region Parameter LastModifiedDate_BeforeLastModifiedDate
        /// <summary>
        /// <para>
        /// <para>Specifies the date before which the opportunities were modified. Use this filter to
        /// retrieve only those opportunities that were modified before a given timestamp.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public System.DateTime? LastModifiedDate_BeforeLastModifiedDate { get; set; }
        #endregion
        
        #region Parameter Catalog
        /// <summary>
        /// <para>
        /// <para>Specifies the catalog associated with the request. This field takes a string value
        /// from a predefined list: <c>AWS</c> or <c>Sandbox</c>. The catalog determines which
        /// environment the opportunities are listed in. Use <c>AWS</c> for listing real opportunities
        /// in the Amazon Web Services catalog, and <c>Sandbox</c> for testing in secure, isolated
        /// environments.</para>
        /// </para>
        /// </summary>
        #if !MODULAR
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        #else
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true, Mandatory = true)]
        [System.Management.Automation.AllowEmptyString]
        [System.Management.Automation.AllowNull]
        #endif
        [Amazon.PowerShell.Common.AWSRequiredParameter]
        public System.String Catalog { get; set; }
        #endregion
        
        #region Parameter CustomerCompanyName
        /// <summary>
        /// <para>
        /// <para>Filters the opportunities based on the customer's company name. This allows partners
        /// to search for opportunities associated with a specific customer by matching the provided
        /// company name string.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public System.String[] CustomerCompanyName { get; set; }
        #endregion
        
        #region Parameter Identifier
        /// <summary>
        /// <para>
        /// <para>Filters the opportunities based on the opportunity identifier. This allows partners
        /// to retrieve specific opportunities by providing their unique identifiers, ensuring
        /// precise results.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public System.String[] Identifier { get; set; }
        #endregion
        
        #region Parameter LifeCycleReviewStatus
        /// <summary>
        /// <para>
        /// <para>Filters the opportunities based on their current lifecycle approval status. Use this
        /// filter to retrieve opportunities with statuses such as <c>Pending Submission</c>,
        /// <c>In Review</c>, <c>Action Required</c>, or <c>Approved</c>.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public System.String[] LifeCycleReviewStatus { get; set; }
        #endregion
        
        #region Parameter LifeCycleStage
        /// <summary>
        /// <para>
        /// <para>Filters the opportunities based on their lifecycle stage. This filter allows partners
        /// to retrieve opportunities at various stages in the sales cycle, such as <c>Qualified</c>,
        /// <c>Technical Validation</c>, <c>Business Validation</c>, or <c>Closed Won</c>.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public System.String[] LifeCycleStage { get; set; }
        #endregion
        
        #region Parameter Sort_SortBy
        /// <summary>
        /// <para>
        /// <para>Field name to sort by.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [AWSConstantClassSource("Amazon.PartnerCentralSelling.OpportunitySortName")]
        public Amazon.PartnerCentralSelling.OpportunitySortName Sort_SortBy { get; set; }
        #endregion
        
        #region Parameter Sort_SortOrder
        /// <summary>
        /// <para>
        /// <para>Sort order.</para><para>Default: <c>Descending</c></para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [AWSConstantClassSource("Amazon.PartnerCentralSelling.SortOrder")]
        public Amazon.PartnerCentralSelling.SortOrder Sort_SortOrder { get; set; }
        #endregion
        
        #region Parameter MaxResult
        /// <summary>
        /// <para>
        /// <para>Specifies the maximum number of results to return in a single call. This limits the
        /// number of opportunities returned in the response to avoid providing too many results
        /// at once.</para><para>Default: 20</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [Alias("MaxResults")]
        public System.Int32? MaxResult { get; set; }
        #endregion
        
        #region Parameter NextToken
        /// <summary>
        /// <para>
        /// <para>A pagination token used to retrieve the next set of results in subsequent calls. This
        /// token is included in the response only if there are additional result pages available.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(Position = 0, ValueFromPipelineByPropertyName = true, ValueFromPipeline = true)]
        public System.String NextToken { get; set; }
        #endregion
        
        #region Parameter Select
        /// <summary>
        /// Use the -Select parameter to control the cmdlet output. The default value is 'OpportunitySummaries'.
        /// Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.PartnerCentralSelling.Model.ListOpportunitiesResponse).
        /// Specifying the name of a property of type Amazon.PartnerCentralSelling.Model.ListOpportunitiesResponse will result in that property being returned.
        /// Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public string Select { get; set; } = "OpportunitySummaries";
        #endregion
        
        #region Parameter PassThru
        /// <summary>
        /// Changes the cmdlet behavior to return the value passed to the NextToken parameter.
        /// The -PassThru parameter is deprecated, use -Select '^NextToken' instead. This parameter will be removed in a future version.
        /// </summary>
        [System.Obsolete("The -PassThru parameter is deprecated, use -Select '^NextToken' instead. This parameter will be removed in a future version.")]
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public SwitchParameter PassThru { get; set; }
        #endregion
        
        protected override void ProcessRecord()
        {
            this._AWSSignerType = "v4";
            base.ProcessRecord();
            
            var context = new CmdletContext();
            
            // allow for manipulation of parameters prior to loading into context
            PreExecutionContextLoad(context);
            
            #pragma warning disable CS0618, CS0612 //A class member was marked with the Obsolete attribute
            if (ParameterWasBound(nameof(this.Select)))
            {
                context.Select = CreateSelectDelegate<Amazon.PartnerCentralSelling.Model.ListOpportunitiesResponse, GetPCOpportunityListCmdlet>(Select) ??
                    throw new System.ArgumentException("Invalid value for -Select parameter.", nameof(this.Select));
                if (this.PassThru.IsPresent)
                {
                    throw new System.ArgumentException("-PassThru cannot be used when -Select is specified.", nameof(this.Select));
                }
            }
            else if (this.PassThru.IsPresent)
            {
                context.Select = (response, cmdlet) => this.NextToken;
            }
            #pragma warning restore CS0618, CS0612 //A class member was marked with the Obsolete attribute
            context.Catalog = this.Catalog;
            #if MODULAR
            if (this.Catalog == null && ParameterWasBound(nameof(this.Catalog)))
            {
                WriteWarning("You are passing $null as a value for parameter Catalog which is marked as required. In case you believe this parameter was incorrectly marked as required, report this by opening an issue at https://github.com/aws/aws-tools-for-powershell/issues.");
            }
            #endif
            if (this.CustomerCompanyName != null)
            {
                context.CustomerCompanyName = new List<System.String>(this.CustomerCompanyName);
            }
            if (this.Identifier != null)
            {
                context.Identifier = new List<System.String>(this.Identifier);
            }
            context.LastModifiedDate_AfterLastModifiedDate = this.LastModifiedDate_AfterLastModifiedDate;
            context.LastModifiedDate_BeforeLastModifiedDate = this.LastModifiedDate_BeforeLastModifiedDate;
            if (this.LifeCycleReviewStatus != null)
            {
                context.LifeCycleReviewStatus = new List<System.String>(this.LifeCycleReviewStatus);
            }
            if (this.LifeCycleStage != null)
            {
                context.LifeCycleStage = new List<System.String>(this.LifeCycleStage);
            }
            context.MaxResult = this.MaxResult;
            context.NextToken = this.NextToken;
            context.Sort_SortBy = this.Sort_SortBy;
            context.Sort_SortOrder = this.Sort_SortOrder;
            
            // allow further manipulation of loaded context prior to processing
            PostExecutionContextLoad(context);
            
            var output = Execute(context) as CmdletOutput;
            ProcessOutput(output);
        }
        
        #region IExecutor Members
        
        public object Execute(ExecutorContext context)
        {
            var cmdletContext = context as CmdletContext;
            // create request
            var request = new Amazon.PartnerCentralSelling.Model.ListOpportunitiesRequest();
            
            if (cmdletContext.Catalog != null)
            {
                request.Catalog = cmdletContext.Catalog;
            }
            if (cmdletContext.CustomerCompanyName != null)
            {
                request.CustomerCompanyName = cmdletContext.CustomerCompanyName;
            }
            if (cmdletContext.Identifier != null)
            {
                request.Identifier = cmdletContext.Identifier;
            }
            
             // populate LastModifiedDate
            var requestLastModifiedDateIsNull = true;
            request.LastModifiedDate = new Amazon.PartnerCentralSelling.Model.LastModifiedDate();
            System.DateTime? requestLastModifiedDate_lastModifiedDate_AfterLastModifiedDate = null;
            if (cmdletContext.LastModifiedDate_AfterLastModifiedDate != null)
            {
                requestLastModifiedDate_lastModifiedDate_AfterLastModifiedDate = cmdletContext.LastModifiedDate_AfterLastModifiedDate.Value;
            }
            if (requestLastModifiedDate_lastModifiedDate_AfterLastModifiedDate != null)
            {
                request.LastModifiedDate.AfterLastModifiedDate = requestLastModifiedDate_lastModifiedDate_AfterLastModifiedDate.Value;
                requestLastModifiedDateIsNull = false;
            }
            System.DateTime? requestLastModifiedDate_lastModifiedDate_BeforeLastModifiedDate = null;
            if (cmdletContext.LastModifiedDate_BeforeLastModifiedDate != null)
            {
                requestLastModifiedDate_lastModifiedDate_BeforeLastModifiedDate = cmdletContext.LastModifiedDate_BeforeLastModifiedDate.Value;
            }
            if (requestLastModifiedDate_lastModifiedDate_BeforeLastModifiedDate != null)
            {
                request.LastModifiedDate.BeforeLastModifiedDate = requestLastModifiedDate_lastModifiedDate_BeforeLastModifiedDate.Value;
                requestLastModifiedDateIsNull = false;
            }
             // determine if request.LastModifiedDate should be set to null
            if (requestLastModifiedDateIsNull)
            {
                request.LastModifiedDate = null;
            }
            if (cmdletContext.LifeCycleReviewStatus != null)
            {
                request.LifeCycleReviewStatus = cmdletContext.LifeCycleReviewStatus;
            }
            if (cmdletContext.LifeCycleStage != null)
            {
                request.LifeCycleStage = cmdletContext.LifeCycleStage;
            }
            if (cmdletContext.MaxResult != null)
            {
                request.MaxResults = cmdletContext.MaxResult.Value;
            }
            if (cmdletContext.NextToken != null)
            {
                request.NextToken = cmdletContext.NextToken;
            }
            
             // populate Sort
            var requestSortIsNull = true;
            request.Sort = new Amazon.PartnerCentralSelling.Model.OpportunitySort();
            Amazon.PartnerCentralSelling.OpportunitySortName requestSort_sort_SortBy = null;
            if (cmdletContext.Sort_SortBy != null)
            {
                requestSort_sort_SortBy = cmdletContext.Sort_SortBy;
            }
            if (requestSort_sort_SortBy != null)
            {
                request.Sort.SortBy = requestSort_sort_SortBy;
                requestSortIsNull = false;
            }
            Amazon.PartnerCentralSelling.SortOrder requestSort_sort_SortOrder = null;
            if (cmdletContext.Sort_SortOrder != null)
            {
                requestSort_sort_SortOrder = cmdletContext.Sort_SortOrder;
            }
            if (requestSort_sort_SortOrder != null)
            {
                request.Sort.SortOrder = requestSort_sort_SortOrder;
                requestSortIsNull = false;
            }
             // determine if request.Sort should be set to null
            if (requestSortIsNull)
            {
                request.Sort = null;
            }
            
            CmdletOutput output;
            
            // issue call
            var client = Client ?? CreateClient(_CurrentCredentials, _RegionEndpoint);
            try
            {
                var response = CallAWSServiceOperation(client, request);
                object pipelineOutput = null;
                pipelineOutput = cmdletContext.Select(response, this);
                output = new CmdletOutput
                {
                    PipelineOutput = pipelineOutput,
                    ServiceResponse = response
                };
            }
            catch (Exception e)
            {
                output = new CmdletOutput { ErrorResponse = e };
            }
            
            return output;
        }
        
        public ExecutorContext CreateContext()
        {
            return new CmdletContext();
        }
        
        #endregion
        
        #region AWS Service Operation Call
        
        private Amazon.PartnerCentralSelling.Model.ListOpportunitiesResponse CallAWSServiceOperation(IAmazonPartnerCentralSelling client, Amazon.PartnerCentralSelling.Model.ListOpportunitiesRequest request)
        {
            Utils.Common.WriteVerboseEndpointMessage(this, client.Config, "Partner Central Selling API", "ListOpportunities");
            try
            {
                #if DESKTOP
                return client.ListOpportunities(request);
                #elif CORECLR
                return client.ListOpportunitiesAsync(request).GetAwaiter().GetResult();
                #else
                        #error "Unknown build edition"
                #endif
            }
            catch (AmazonServiceException exc)
            {
                var webException = exc.InnerException as System.Net.WebException;
                if (webException != null)
                {
                    throw new Exception(Utils.Common.FormatNameResolutionFailureMessage(client.Config, webException.Message), webException);
                }
                throw;
            }
        }
        
        #endregion
        
        internal partial class CmdletContext : ExecutorContext
        {
            public System.String Catalog { get; set; }
            public List<System.String> CustomerCompanyName { get; set; }
            public List<System.String> Identifier { get; set; }
            public System.DateTime? LastModifiedDate_AfterLastModifiedDate { get; set; }
            public System.DateTime? LastModifiedDate_BeforeLastModifiedDate { get; set; }
            public List<System.String> LifeCycleReviewStatus { get; set; }
            public List<System.String> LifeCycleStage { get; set; }
            public System.Int32? MaxResult { get; set; }
            public System.String NextToken { get; set; }
            public Amazon.PartnerCentralSelling.OpportunitySortName Sort_SortBy { get; set; }
            public Amazon.PartnerCentralSelling.SortOrder Sort_SortOrder { get; set; }
            public System.Func<Amazon.PartnerCentralSelling.Model.ListOpportunitiesResponse, GetPCOpportunityListCmdlet, object> Select { get; set; } =
                (response, cmdlet) => response.OpportunitySummaries;
        }
        
    }
}
