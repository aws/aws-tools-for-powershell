/*******************************************************************************
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 *  this file except in compliance with the License. A copy of the License is located at
 *
 *  http://aws.amazon.com/apache2.0
 *
 *  or in the "license" file accompanying this file.
 *  This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 *  CONDITIONS OF ANY KIND, either express or implied. See the License for the
 *  specific language governing permissions and limitations under the License.
 * *****************************************************************************
 *
 *  AWS Tools for Windows (TM) PowerShell (TM)
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;
using System.Text;
using Amazon.PowerShell.Common;
using Amazon.Runtime;
using Amazon.SocialMessaging;
using Amazon.SocialMessaging.Model;

namespace Amazon.PowerShell.Cmdlets.SOCIAL
{
    /// <summary>
    /// This is only used through the Amazon Web Services console during sign-up to associate
    /// your WhatsApp Business Account to your Amazon Web Services account.
    /// </summary>
    [Cmdlet("Connect", "SOCIALWhatsAppBusinessAccount", SupportsShouldProcess = true, ConfirmImpact = ConfirmImpact.Medium)]
    [OutputType("Amazon.SocialMessaging.Model.AssociateWhatsAppBusinessAccountResponse")]
    [AWSCmdlet("Calls the AWS End User Messaging Social AssociateWhatsAppBusinessAccount API operation.", Operation = new[] {"AssociateWhatsAppBusinessAccount"}, SelectReturnType = typeof(Amazon.SocialMessaging.Model.AssociateWhatsAppBusinessAccountResponse))]
    [AWSCmdletOutput("Amazon.SocialMessaging.Model.AssociateWhatsAppBusinessAccountResponse",
        "This cmdlet returns an Amazon.SocialMessaging.Model.AssociateWhatsAppBusinessAccountResponse object containing multiple properties."
    )]
    public partial class ConnectSOCIALWhatsAppBusinessAccountCmdlet : AmazonSocialMessagingClientCmdlet, IExecutor
    {
        
        protected override bool IsSensitiveRequest { get; set; } = true;
        
        protected override bool IsSensitiveResponse { get; set; } = true;
        
        protected override bool IsGeneratedCmdlet { get; set; } = true;
        
        #region Parameter SignupCallback_AccessToken
        /// <summary>
        /// <para>
        /// <para>The access token for your WhatsApp Business Account. The <c>accessToken</c> value
        /// is provided by Meta.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public System.String SignupCallback_AccessToken { get; set; }
        #endregion
        
        #region Parameter SetupFinalization_AssociateInProgressToken
        /// <summary>
        /// <para>
        /// <para>An Amazon Web Services access token generated by <c>WhatsAppSignupCallback</c> and
        /// used by <c>WhatsAppSetupFinalization</c>.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public System.String SetupFinalization_AssociateInProgressToken { get; set; }
        #endregion
        
        #region Parameter SignupCallback_CallbackUrl
        /// <summary>
        /// <para>
        /// <para>The URL where WhatsApp will send callback notifications for this account.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public System.String SignupCallback_CallbackUrl { get; set; }
        #endregion
        
        #region Parameter Waba_EventDestination
        /// <summary>
        /// <para>
        /// <para>The event destinations for the linked WhatsApp Business Account.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [Alias("SetupFinalization_Waba_EventDestinations")]
        public Amazon.SocialMessaging.Model.WhatsAppBusinessAccountEventDestination[] Waba_EventDestination { get; set; }
        #endregion
        
        #region Parameter Waba_Id
        /// <summary>
        /// <para>
        /// <para>The ID of the linked WhatsApp Business Account, formatted as <c>waba-01234567890123456789012345678901</c>.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [Alias("SetupFinalization_Waba_Id")]
        public System.String Waba_Id { get; set; }
        #endregion
        
        #region Parameter SetupFinalization_PhoneNumberParent
        /// <summary>
        /// <para>
        /// <para>Used to add a new phone number to an existing WhatsApp Business Account. This field
        /// can't be used when the <c>waba</c> field is present.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public System.String SetupFinalization_PhoneNumberParent { get; set; }
        #endregion
        
        #region Parameter SetupFinalization_PhoneNumber
        /// <summary>
        /// <para>
        /// <para>An array of WabaPhoneNumberSetupFinalization objects containing the details of each
        /// phone number associated with the WhatsApp Business Account.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [Alias("SetupFinalization_PhoneNumbers")]
        public Amazon.SocialMessaging.Model.WabaPhoneNumberSetupFinalization[] SetupFinalization_PhoneNumber { get; set; }
        #endregion
        
        #region Parameter Waba_Tag
        /// <summary>
        /// <para>
        /// <para>An array of key and value pair tags.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [Alias("SetupFinalization_Waba_Tags")]
        public Amazon.SocialMessaging.Model.Tag[] Waba_Tag { get; set; }
        #endregion
        
        #region Parameter Select
        /// <summary>
        /// Use the -Select parameter to control the cmdlet output. The default value is '*'.
        /// Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.SocialMessaging.Model.AssociateWhatsAppBusinessAccountResponse).
        /// Specifying the name of a property of type Amazon.SocialMessaging.Model.AssociateWhatsAppBusinessAccountResponse will result in that property being returned.
        /// Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public string Select { get; set; } = "*";
        #endregion
        
        #region Parameter Force
        /// <summary>
        /// This parameter overrides confirmation prompts to force 
        /// the cmdlet to continue its operation. This parameter should always
        /// be used with caution.
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public SwitchParameter Force { get; set; }
        #endregion
        
        protected override void ProcessRecord()
        {
            this._AWSSignerType = "v4";
            base.ProcessRecord();
            
            var resourceIdentifiersText = FormatParameterValuesForConfirmationMsg(nameof(this.Waba_Id), MyInvocation.BoundParameters);
            if (!ConfirmShouldProceed(this.Force.IsPresent, resourceIdentifiersText, "Connect-SOCIALWhatsAppBusinessAccount (AssociateWhatsAppBusinessAccount)"))
            {
                return;
            }
            
            var context = new CmdletContext();
            
            // allow for manipulation of parameters prior to loading into context
            PreExecutionContextLoad(context);
            
            if (ParameterWasBound(nameof(this.Select)))
            {
                context.Select = CreateSelectDelegate<Amazon.SocialMessaging.Model.AssociateWhatsAppBusinessAccountResponse, ConnectSOCIALWhatsAppBusinessAccountCmdlet>(Select) ??
                    throw new System.ArgumentException("Invalid value for -Select parameter.", nameof(this.Select));
            }
            context.SetupFinalization_AssociateInProgressToken = this.SetupFinalization_AssociateInProgressToken;
            context.SetupFinalization_PhoneNumberParent = this.SetupFinalization_PhoneNumberParent;
            if (this.SetupFinalization_PhoneNumber != null)
            {
                context.SetupFinalization_PhoneNumber = new List<Amazon.SocialMessaging.Model.WabaPhoneNumberSetupFinalization>(this.SetupFinalization_PhoneNumber);
            }
            if (this.Waba_EventDestination != null)
            {
                context.Waba_EventDestination = new List<Amazon.SocialMessaging.Model.WhatsAppBusinessAccountEventDestination>(this.Waba_EventDestination);
            }
            context.Waba_Id = this.Waba_Id;
            if (this.Waba_Tag != null)
            {
                context.Waba_Tag = new List<Amazon.SocialMessaging.Model.Tag>(this.Waba_Tag);
            }
            context.SignupCallback_AccessToken = this.SignupCallback_AccessToken;
            context.SignupCallback_CallbackUrl = this.SignupCallback_CallbackUrl;
            
            // allow further manipulation of loaded context prior to processing
            PostExecutionContextLoad(context);
            
            var output = Execute(context) as CmdletOutput;
            ProcessOutput(output);
        }
        
        #region IExecutor Members
        
        public object Execute(ExecutorContext context)
        {
            var cmdletContext = context as CmdletContext;
            // create request
            var request = new Amazon.SocialMessaging.Model.AssociateWhatsAppBusinessAccountRequest();
            
            
             // populate SetupFinalization
            var requestSetupFinalizationIsNull = true;
            request.SetupFinalization = new Amazon.SocialMessaging.Model.WhatsAppSetupFinalization();
            System.String requestSetupFinalization_setupFinalization_AssociateInProgressToken = null;
            if (cmdletContext.SetupFinalization_AssociateInProgressToken != null)
            {
                requestSetupFinalization_setupFinalization_AssociateInProgressToken = cmdletContext.SetupFinalization_AssociateInProgressToken;
            }
            if (requestSetupFinalization_setupFinalization_AssociateInProgressToken != null)
            {
                request.SetupFinalization.AssociateInProgressToken = requestSetupFinalization_setupFinalization_AssociateInProgressToken;
                requestSetupFinalizationIsNull = false;
            }
            System.String requestSetupFinalization_setupFinalization_PhoneNumberParent = null;
            if (cmdletContext.SetupFinalization_PhoneNumberParent != null)
            {
                requestSetupFinalization_setupFinalization_PhoneNumberParent = cmdletContext.SetupFinalization_PhoneNumberParent;
            }
            if (requestSetupFinalization_setupFinalization_PhoneNumberParent != null)
            {
                request.SetupFinalization.PhoneNumberParent = requestSetupFinalization_setupFinalization_PhoneNumberParent;
                requestSetupFinalizationIsNull = false;
            }
            List<Amazon.SocialMessaging.Model.WabaPhoneNumberSetupFinalization> requestSetupFinalization_setupFinalization_PhoneNumber = null;
            if (cmdletContext.SetupFinalization_PhoneNumber != null)
            {
                requestSetupFinalization_setupFinalization_PhoneNumber = cmdletContext.SetupFinalization_PhoneNumber;
            }
            if (requestSetupFinalization_setupFinalization_PhoneNumber != null)
            {
                request.SetupFinalization.PhoneNumbers = requestSetupFinalization_setupFinalization_PhoneNumber;
                requestSetupFinalizationIsNull = false;
            }
            Amazon.SocialMessaging.Model.WabaSetupFinalization requestSetupFinalization_setupFinalization_Waba = null;
            
             // populate Waba
            var requestSetupFinalization_setupFinalization_WabaIsNull = true;
            requestSetupFinalization_setupFinalization_Waba = new Amazon.SocialMessaging.Model.WabaSetupFinalization();
            List<Amazon.SocialMessaging.Model.WhatsAppBusinessAccountEventDestination> requestSetupFinalization_setupFinalization_Waba_waba_EventDestination = null;
            if (cmdletContext.Waba_EventDestination != null)
            {
                requestSetupFinalization_setupFinalization_Waba_waba_EventDestination = cmdletContext.Waba_EventDestination;
            }
            if (requestSetupFinalization_setupFinalization_Waba_waba_EventDestination != null)
            {
                requestSetupFinalization_setupFinalization_Waba.EventDestinations = requestSetupFinalization_setupFinalization_Waba_waba_EventDestination;
                requestSetupFinalization_setupFinalization_WabaIsNull = false;
            }
            System.String requestSetupFinalization_setupFinalization_Waba_waba_Id = null;
            if (cmdletContext.Waba_Id != null)
            {
                requestSetupFinalization_setupFinalization_Waba_waba_Id = cmdletContext.Waba_Id;
            }
            if (requestSetupFinalization_setupFinalization_Waba_waba_Id != null)
            {
                requestSetupFinalization_setupFinalization_Waba.Id = requestSetupFinalization_setupFinalization_Waba_waba_Id;
                requestSetupFinalization_setupFinalization_WabaIsNull = false;
            }
            List<Amazon.SocialMessaging.Model.Tag> requestSetupFinalization_setupFinalization_Waba_waba_Tag = null;
            if (cmdletContext.Waba_Tag != null)
            {
                requestSetupFinalization_setupFinalization_Waba_waba_Tag = cmdletContext.Waba_Tag;
            }
            if (requestSetupFinalization_setupFinalization_Waba_waba_Tag != null)
            {
                requestSetupFinalization_setupFinalization_Waba.Tags = requestSetupFinalization_setupFinalization_Waba_waba_Tag;
                requestSetupFinalization_setupFinalization_WabaIsNull = false;
            }
             // determine if requestSetupFinalization_setupFinalization_Waba should be set to null
            if (requestSetupFinalization_setupFinalization_WabaIsNull)
            {
                requestSetupFinalization_setupFinalization_Waba = null;
            }
            if (requestSetupFinalization_setupFinalization_Waba != null)
            {
                request.SetupFinalization.Waba = requestSetupFinalization_setupFinalization_Waba;
                requestSetupFinalizationIsNull = false;
            }
             // determine if request.SetupFinalization should be set to null
            if (requestSetupFinalizationIsNull)
            {
                request.SetupFinalization = null;
            }
            
             // populate SignupCallback
            var requestSignupCallbackIsNull = true;
            request.SignupCallback = new Amazon.SocialMessaging.Model.WhatsAppSignupCallback();
            System.String requestSignupCallback_signupCallback_AccessToken = null;
            if (cmdletContext.SignupCallback_AccessToken != null)
            {
                requestSignupCallback_signupCallback_AccessToken = cmdletContext.SignupCallback_AccessToken;
            }
            if (requestSignupCallback_signupCallback_AccessToken != null)
            {
                request.SignupCallback.AccessToken = requestSignupCallback_signupCallback_AccessToken;
                requestSignupCallbackIsNull = false;
            }
            System.String requestSignupCallback_signupCallback_CallbackUrl = null;
            if (cmdletContext.SignupCallback_CallbackUrl != null)
            {
                requestSignupCallback_signupCallback_CallbackUrl = cmdletContext.SignupCallback_CallbackUrl;
            }
            if (requestSignupCallback_signupCallback_CallbackUrl != null)
            {
                request.SignupCallback.CallbackUrl = requestSignupCallback_signupCallback_CallbackUrl;
                requestSignupCallbackIsNull = false;
            }
             // determine if request.SignupCallback should be set to null
            if (requestSignupCallbackIsNull)
            {
                request.SignupCallback = null;
            }
            
            CmdletOutput output;
            
            // issue call
            var client = Client ?? CreateClient(_CurrentCredentials, _RegionEndpoint);
            try
            {
                var response = CallAWSServiceOperation(client, request);
                object pipelineOutput = null;
                pipelineOutput = cmdletContext.Select(response, this);
                output = new CmdletOutput
                {
                    PipelineOutput = pipelineOutput,
                    ServiceResponse = response
                };
            }
            catch (Exception e)
            {
                output = new CmdletOutput { ErrorResponse = e };
            }
            
            return output;
        }
        
        public ExecutorContext CreateContext()
        {
            return new CmdletContext();
        }
        
        #endregion
        
        #region AWS Service Operation Call
        
        private Amazon.SocialMessaging.Model.AssociateWhatsAppBusinessAccountResponse CallAWSServiceOperation(IAmazonSocialMessaging client, Amazon.SocialMessaging.Model.AssociateWhatsAppBusinessAccountRequest request)
        {
            Utils.Common.WriteVerboseEndpointMessage(this, client.Config, "AWS End User Messaging Social", "AssociateWhatsAppBusinessAccount");
            try
            {
                #if DESKTOP
                return client.AssociateWhatsAppBusinessAccount(request);
                #elif CORECLR
                return client.AssociateWhatsAppBusinessAccountAsync(request).GetAwaiter().GetResult();
                #else
                        #error "Unknown build edition"
                #endif
            }
            catch (AmazonServiceException exc)
            {
                var webException = exc.InnerException as System.Net.WebException;
                if (webException != null)
                {
                    throw new Exception(Utils.Common.FormatNameResolutionFailureMessage(client.Config, webException.Message), webException);
                }
                throw;
            }
        }
        
        #endregion
        
        internal partial class CmdletContext : ExecutorContext
        {
            public System.String SetupFinalization_AssociateInProgressToken { get; set; }
            public System.String SetupFinalization_PhoneNumberParent { get; set; }
            public List<Amazon.SocialMessaging.Model.WabaPhoneNumberSetupFinalization> SetupFinalization_PhoneNumber { get; set; }
            public List<Amazon.SocialMessaging.Model.WhatsAppBusinessAccountEventDestination> Waba_EventDestination { get; set; }
            public System.String Waba_Id { get; set; }
            public List<Amazon.SocialMessaging.Model.Tag> Waba_Tag { get; set; }
            public System.String SignupCallback_AccessToken { get; set; }
            public System.String SignupCallback_CallbackUrl { get; set; }
            public System.Func<Amazon.SocialMessaging.Model.AssociateWhatsAppBusinessAccountResponse, ConnectSOCIALWhatsAppBusinessAccountCmdlet, object> Select { get; set; } =
                (response, cmdlet) => response;
        }
        
    }
}
