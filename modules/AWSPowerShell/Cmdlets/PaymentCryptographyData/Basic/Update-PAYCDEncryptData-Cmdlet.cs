/*******************************************************************************
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 *  this file except in compliance with the License. A copy of the License is located at
 *
 *  http://aws.amazon.com/apache2.0
 *
 *  or in the "license" file accompanying this file.
 *  This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 *  CONDITIONS OF ANY KIND, either express or implied. See the License for the
 *  specific language governing permissions and limitations under the License.
 * *****************************************************************************
 *
 *  AWS Tools for Windows (TM) PowerShell (TM)
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;
using System.Text;
using Amazon.PowerShell.Common;
using Amazon.Runtime;
using Amazon.PaymentCryptographyData;
using Amazon.PaymentCryptographyData.Model;

namespace Amazon.PowerShell.Cmdlets.PAYCD
{
    /// <summary>
    /// Re-encrypt ciphertext using DUKPT or Symmetric data encryption keys. 
    /// 
    ///  
    /// <para>
    /// You can either generate an encryption key within Amazon Web Services Payment Cryptography
    /// by calling <a href="https://docs.aws.amazon.com/payment-cryptography/latest/APIReference/API_CreateKey.html">CreateKey</a>
    /// or import your own encryption key by calling <a href="https://docs.aws.amazon.com/payment-cryptography/latest/APIReference/API_ImportKey.html">ImportKey</a>.
    /// The <c>KeyArn</c> for use with this operation must be in a compatible key state with
    /// <c>KeyModesOfUse</c> set to <c>Encrypt</c>. 
    /// </para><para>
    /// This operation also supports dynamic keys, allowing you to pass a dynamic encryption
    /// key as a TR-31 WrappedKeyBlock. This can be used when key material is frequently rotated,
    /// such as during every card transaction, and there is need to avoid importing short-lived
    /// keys into Amazon Web Services Payment Cryptography. To re-encrypt using dynamic keys,
    /// the <c>keyARN</c> is the Key Encryption Key (KEK) of the TR-31 wrapped encryption
    /// key material. The incoming wrapped key shall have a key purpose of D0 with a mode
    /// of use of B or D. For more information, see <a href="https://docs.aws.amazon.com/payment-cryptography/latest/userguide/use-cases-acquirers-dynamickeys.html">Using
    /// Dynamic Keys</a> in the <i>Amazon Web Services Payment Cryptography User Guide</i>.
    /// </para><para>
    /// For symmetric and DUKPT encryption, Amazon Web Services Payment Cryptography supports
    /// <c>TDES</c> and <c>AES</c> algorithms. To encrypt using DUKPT, a DUKPT key must already
    /// exist within your account with <c>KeyModesOfUse</c> set to <c>DeriveKey</c> or a new
    /// DUKPT can be generated by calling <a href="https://docs.aws.amazon.com/payment-cryptography/latest/APIReference/API_CreateKey.html">CreateKey</a>.
    /// </para><para>
    /// For information about valid keys for this operation, see <a href="https://docs.aws.amazon.com/payment-cryptography/latest/userguide/keys-validattributes.html">Understanding
    /// key attributes</a> and <a href="https://docs.aws.amazon.com/payment-cryptography/latest/userguide/crypto-ops-validkeys-ops.html">Key
    /// types for specific data operations</a> in the <i>Amazon Web Services Payment Cryptography
    /// User Guide</i>. 
    /// </para><para><b>Cross-account use</b>: This operation can't be used across different Amazon Web
    /// Services accounts.
    /// </para><para><b>Related operations:</b></para><ul><li><para><a>DecryptData</a></para></li><li><para><a>EncryptData</a></para></li><li><para><a href="https://docs.aws.amazon.com/payment-cryptography/latest/APIReference/API_GetPublicKeyCertificate.html">GetPublicCertificate</a></para></li><li><para><a href="https://docs.aws.amazon.com/payment-cryptography/latest/APIReference/API_ImportKey.html">ImportKey</a></para></li></ul>
    /// </summary>
    [Cmdlet("Update", "PAYCDEncryptData", SupportsShouldProcess = true, ConfirmImpact = ConfirmImpact.Medium)]
    [OutputType("Amazon.PaymentCryptographyData.Model.ReEncryptDataResponse")]
    [AWSCmdlet("Calls the Payment Cryptography Data ReEncryptData API operation.", Operation = new[] {"ReEncryptData"}, SelectReturnType = typeof(Amazon.PaymentCryptographyData.Model.ReEncryptDataResponse))]
    [AWSCmdletOutput("Amazon.PaymentCryptographyData.Model.ReEncryptDataResponse",
        "This cmdlet returns an Amazon.PaymentCryptographyData.Model.ReEncryptDataResponse object containing multiple properties."
    )]
    public partial class UpdatePAYCDEncryptDataCmdlet : AmazonPaymentCryptographyDataClientCmdlet, IExecutor
    {
        
        protected override bool IsSensitiveRequest { get; set; } = true;
        
        protected override bool IsSensitiveResponse { get; set; } = true;
        
        protected override bool IsGeneratedCmdlet { get; set; } = true;
        
        #region Parameter IncomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_CertificateAuthorityPublicKeyIdentifier
        /// <summary>
        /// <para>
        /// <para>The <c>keyArn</c> of the certificate that signed the client's <c>PublicKeyCertificate</c>.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public System.String IncomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_CertificateAuthorityPublicKeyIdentifier { get; set; }
        #endregion
        
        #region Parameter OutgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_CertificateAuthorityPublicKeyIdentifier
        /// <summary>
        /// <para>
        /// <para>The <c>keyArn</c> of the certificate that signed the client's <c>PublicKeyCertificate</c>.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public System.String OutgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_CertificateAuthorityPublicKeyIdentifier { get; set; }
        #endregion
        
        #region Parameter CipherText
        /// <summary>
        /// <para>
        /// <para>Ciphertext to be encrypted. The minimum allowed length is 16 bytes and maximum allowed
        /// length is 4096 bytes.</para>
        /// </para>
        /// </summary>
        #if !MODULAR
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        #else
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true, Mandatory = true)]
        [System.Management.Automation.AllowEmptyString]
        [System.Management.Automation.AllowNull]
        #endif
        [Amazon.PowerShell.Common.AWSRequiredParameter]
        public System.String CipherText { get; set; }
        #endregion
        
        #region Parameter IncomingEncryptionAttributes_Dukpt_DukptKeyDerivationType
        /// <summary>
        /// <para>
        /// <para>The key type encrypted using DUKPT from a Base Derivation Key (BDK) and Key Serial
        /// Number (KSN). This must be less than or equal to the strength of the BDK. For example,
        /// you can't use <c>AES_128</c> as a derivation type for a BDK of <c>AES_128</c> or <c>TDES_2KEY</c></para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [AWSConstantClassSource("Amazon.PaymentCryptographyData.DukptDerivationType")]
        public Amazon.PaymentCryptographyData.DukptDerivationType IncomingEncryptionAttributes_Dukpt_DukptKeyDerivationType { get; set; }
        #endregion
        
        #region Parameter OutgoingEncryptionAttributes_Dukpt_DukptKeyDerivationType
        /// <summary>
        /// <para>
        /// <para>The key type encrypted using DUKPT from a Base Derivation Key (BDK) and Key Serial
        /// Number (KSN). This must be less than or equal to the strength of the BDK. For example,
        /// you can't use <c>AES_128</c> as a derivation type for a BDK of <c>AES_128</c> or <c>TDES_2KEY</c></para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [AWSConstantClassSource("Amazon.PaymentCryptographyData.DukptDerivationType")]
        public Amazon.PaymentCryptographyData.DukptDerivationType OutgoingEncryptionAttributes_Dukpt_DukptKeyDerivationType { get; set; }
        #endregion
        
        #region Parameter IncomingEncryptionAttributes_Dukpt_DukptKeyVariant
        /// <summary>
        /// <para>
        /// <para>The type of use of DUKPT, which can be incoming data decryption, outgoing data encryption,
        /// or both.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [AWSConstantClassSource("Amazon.PaymentCryptographyData.DukptKeyVariant")]
        public Amazon.PaymentCryptographyData.DukptKeyVariant IncomingEncryptionAttributes_Dukpt_DukptKeyVariant { get; set; }
        #endregion
        
        #region Parameter OutgoingEncryptionAttributes_Dukpt_DukptKeyVariant
        /// <summary>
        /// <para>
        /// <para>The type of use of DUKPT, which can be incoming data decryption, outgoing data encryption,
        /// or both.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [AWSConstantClassSource("Amazon.PaymentCryptographyData.DukptKeyVariant")]
        public Amazon.PaymentCryptographyData.DukptKeyVariant OutgoingEncryptionAttributes_Dukpt_DukptKeyVariant { get; set; }
        #endregion
        
        #region Parameter IncomingKeyIdentifier
        /// <summary>
        /// <para>
        /// <para>The <c>keyARN</c> of the encryption key of incoming ciphertext data.</para><para>When a WrappedKeyBlock is provided, this value will be the identifier to the key wrapping
        /// key. Otherwise, it is the key identifier used to perform the operation.</para>
        /// </para>
        /// </summary>
        #if !MODULAR
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        #else
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true, Mandatory = true)]
        [System.Management.Automation.AllowEmptyString]
        [System.Management.Automation.AllowNull]
        #endif
        [Amazon.PowerShell.Common.AWSRequiredParameter]
        public System.String IncomingKeyIdentifier { get; set; }
        #endregion
        
        #region Parameter IncomingEncryptionAttributes_Dukpt_InitializationVector
        /// <summary>
        /// <para>
        /// <para>An input used to provide the intial state. If no value is provided, Amazon Web Services
        /// Payment Cryptography defaults it to zero.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public System.String IncomingEncryptionAttributes_Dukpt_InitializationVector { get; set; }
        #endregion
        
        #region Parameter IncomingEncryptionAttributes_Symmetric_InitializationVector
        /// <summary>
        /// <para>
        /// <para>An input used to provide the intial state. If no value is provided, Amazon Web Services
        /// Payment Cryptography defaults it to zero.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public System.String IncomingEncryptionAttributes_Symmetric_InitializationVector { get; set; }
        #endregion
        
        #region Parameter OutgoingEncryptionAttributes_Dukpt_InitializationVector
        /// <summary>
        /// <para>
        /// <para>An input used to provide the intial state. If no value is provided, Amazon Web Services
        /// Payment Cryptography defaults it to zero.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public System.String OutgoingEncryptionAttributes_Dukpt_InitializationVector { get; set; }
        #endregion
        
        #region Parameter OutgoingEncryptionAttributes_Symmetric_InitializationVector
        /// <summary>
        /// <para>
        /// <para>An input used to provide the intial state. If no value is provided, Amazon Web Services
        /// Payment Cryptography defaults it to zero.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public System.String OutgoingEncryptionAttributes_Symmetric_InitializationVector { get; set; }
        #endregion
        
        #region Parameter IncomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyAlgorithm
        /// <summary>
        /// <para>
        /// <para>The key algorithm of the derived ECDH key.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [AWSConstantClassSource("Amazon.PaymentCryptographyData.SymmetricKeyAlgorithm")]
        public Amazon.PaymentCryptographyData.SymmetricKeyAlgorithm IncomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyAlgorithm { get; set; }
        #endregion
        
        #region Parameter OutgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyAlgorithm
        /// <summary>
        /// <para>
        /// <para>The key algorithm of the derived ECDH key.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [AWSConstantClassSource("Amazon.PaymentCryptographyData.SymmetricKeyAlgorithm")]
        public Amazon.PaymentCryptographyData.SymmetricKeyAlgorithm OutgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyAlgorithm { get; set; }
        #endregion
        
        #region Parameter IncomingWrappedKey_KeyCheckValueAlgorithm
        /// <summary>
        /// <para>
        /// <para>The algorithm that Amazon Web Services Payment Cryptography uses to calculate the
        /// key check value (KCV). It is used to validate the key integrity.</para><para>For TDES keys, the KCV is computed by encrypting 8 bytes, each with value of zero,
        /// with the key to be checked and retaining the 3 highest order bytes of the encrypted
        /// result. For AES keys, the KCV is computed using a CMAC algorithm where the input data
        /// is 16 bytes of zero and retaining the 3 highest order bytes of the encrypted result.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [AWSConstantClassSource("Amazon.PaymentCryptographyData.KeyCheckValueAlgorithm")]
        public Amazon.PaymentCryptographyData.KeyCheckValueAlgorithm IncomingWrappedKey_KeyCheckValueAlgorithm { get; set; }
        #endregion
        
        #region Parameter OutgoingWrappedKey_KeyCheckValueAlgorithm
        /// <summary>
        /// <para>
        /// <para>The algorithm that Amazon Web Services Payment Cryptography uses to calculate the
        /// key check value (KCV). It is used to validate the key integrity.</para><para>For TDES keys, the KCV is computed by encrypting 8 bytes, each with value of zero,
        /// with the key to be checked and retaining the 3 highest order bytes of the encrypted
        /// result. For AES keys, the KCV is computed using a CMAC algorithm where the input data
        /// is 16 bytes of zero and retaining the 3 highest order bytes of the encrypted result.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [AWSConstantClassSource("Amazon.PaymentCryptographyData.KeyCheckValueAlgorithm")]
        public Amazon.PaymentCryptographyData.KeyCheckValueAlgorithm OutgoingWrappedKey_KeyCheckValueAlgorithm { get; set; }
        #endregion
        
        #region Parameter IncomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyDerivationFunction
        /// <summary>
        /// <para>
        /// <para>The key derivation function to use for deriving a key using ECDH.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [AWSConstantClassSource("Amazon.PaymentCryptographyData.KeyDerivationFunction")]
        public Amazon.PaymentCryptographyData.KeyDerivationFunction IncomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyDerivationFunction { get; set; }
        #endregion
        
        #region Parameter OutgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyDerivationFunction
        /// <summary>
        /// <para>
        /// <para>The key derivation function to use for deriving a key using ECDH.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [AWSConstantClassSource("Amazon.PaymentCryptographyData.KeyDerivationFunction")]
        public Amazon.PaymentCryptographyData.KeyDerivationFunction OutgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyDerivationFunction { get; set; }
        #endregion
        
        #region Parameter IncomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyDerivationHashAlgorithm
        /// <summary>
        /// <para>
        /// <para>The hash type to use for deriving a key using ECDH.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [AWSConstantClassSource("Amazon.PaymentCryptographyData.KeyDerivationHashAlgorithm")]
        public Amazon.PaymentCryptographyData.KeyDerivationHashAlgorithm IncomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyDerivationHashAlgorithm { get; set; }
        #endregion
        
        #region Parameter OutgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyDerivationHashAlgorithm
        /// <summary>
        /// <para>
        /// <para>The hash type to use for deriving a key using ECDH.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [AWSConstantClassSource("Amazon.PaymentCryptographyData.KeyDerivationHashAlgorithm")]
        public Amazon.PaymentCryptographyData.KeyDerivationHashAlgorithm OutgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyDerivationHashAlgorithm { get; set; }
        #endregion
        
        #region Parameter IncomingEncryptionAttributes_Dukpt_KeySerialNumber
        /// <summary>
        /// <para>
        /// <para>The unique identifier known as Key Serial Number (KSN) that comes from an encrypting
        /// device using DUKPT encryption method. The KSN is derived from the encrypting device
        /// unique identifier and an internal transaction counter.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public System.String IncomingEncryptionAttributes_Dukpt_KeySerialNumber { get; set; }
        #endregion
        
        #region Parameter OutgoingEncryptionAttributes_Dukpt_KeySerialNumber
        /// <summary>
        /// <para>
        /// <para>The unique identifier known as Key Serial Number (KSN) that comes from an encrypting
        /// device using DUKPT encryption method. The KSN is derived from the encrypting device
        /// unique identifier and an internal transaction counter.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public System.String OutgoingEncryptionAttributes_Dukpt_KeySerialNumber { get; set; }
        #endregion
        
        #region Parameter IncomingEncryptionAttributes_Dukpt_Mode
        /// <summary>
        /// <para>
        /// <para>The block cipher method to use for encryption.</para><para>The default is CBC.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [AWSConstantClassSource("Amazon.PaymentCryptographyData.DukptEncryptionMode")]
        public Amazon.PaymentCryptographyData.DukptEncryptionMode IncomingEncryptionAttributes_Dukpt_Mode { get; set; }
        #endregion
        
        #region Parameter IncomingEncryptionAttributes_Symmetric_Mode
        /// <summary>
        /// <para>
        /// <para>The block cipher method to use for encryption.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [AWSConstantClassSource("Amazon.PaymentCryptographyData.EncryptionMode")]
        public Amazon.PaymentCryptographyData.EncryptionMode IncomingEncryptionAttributes_Symmetric_Mode { get; set; }
        #endregion
        
        #region Parameter OutgoingEncryptionAttributes_Dukpt_Mode
        /// <summary>
        /// <para>
        /// <para>The block cipher method to use for encryption.</para><para>The default is CBC.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [AWSConstantClassSource("Amazon.PaymentCryptographyData.DukptEncryptionMode")]
        public Amazon.PaymentCryptographyData.DukptEncryptionMode OutgoingEncryptionAttributes_Dukpt_Mode { get; set; }
        #endregion
        
        #region Parameter OutgoingEncryptionAttributes_Symmetric_Mode
        /// <summary>
        /// <para>
        /// <para>The block cipher method to use for encryption.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [AWSConstantClassSource("Amazon.PaymentCryptographyData.EncryptionMode")]
        public Amazon.PaymentCryptographyData.EncryptionMode OutgoingEncryptionAttributes_Symmetric_Mode { get; set; }
        #endregion
        
        #region Parameter OutgoingKeyIdentifier
        /// <summary>
        /// <para>
        /// <para>The <c>keyARN</c> of the encryption key of outgoing ciphertext data after encryption
        /// by Amazon Web Services Payment Cryptography.</para>
        /// </para>
        /// </summary>
        #if !MODULAR
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        #else
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true, Mandatory = true)]
        [System.Management.Automation.AllowEmptyString]
        [System.Management.Automation.AllowNull]
        #endif
        [Amazon.PowerShell.Common.AWSRequiredParameter]
        public System.String OutgoingKeyIdentifier { get; set; }
        #endregion
        
        #region Parameter IncomingEncryptionAttributes_Symmetric_PaddingType
        /// <summary>
        /// <para>
        /// <para>The padding to be included with the data.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [AWSConstantClassSource("Amazon.PaymentCryptographyData.PaddingType")]
        public Amazon.PaymentCryptographyData.PaddingType IncomingEncryptionAttributes_Symmetric_PaddingType { get; set; }
        #endregion
        
        #region Parameter OutgoingEncryptionAttributes_Symmetric_PaddingType
        /// <summary>
        /// <para>
        /// <para>The padding to be included with the data.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [AWSConstantClassSource("Amazon.PaymentCryptographyData.PaddingType")]
        public Amazon.PaymentCryptographyData.PaddingType OutgoingEncryptionAttributes_Symmetric_PaddingType { get; set; }
        #endregion
        
        #region Parameter IncomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_PublicKeyCertificate
        /// <summary>
        /// <para>
        /// <para>The client's public key certificate in PEM format (base64 encoded) to use for ECDH
        /// key derivation.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public System.String IncomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_PublicKeyCertificate { get; set; }
        #endregion
        
        #region Parameter OutgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_PublicKeyCertificate
        /// <summary>
        /// <para>
        /// <para>The client's public key certificate in PEM format (base64 encoded) to use for ECDH
        /// key derivation.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public System.String OutgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_PublicKeyCertificate { get; set; }
        #endregion
        
        #region Parameter IncomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_SharedInformation
        /// <summary>
        /// <para>
        /// <para>A byte string containing information that binds the ECDH derived key to the two parties
        /// involved or to the context of the key.</para><para>It may include details like identities of the two parties deriving the key, context
        /// of the operation, session IDs, and optionally a nonce. It must not contain zero bytes,
        /// and re-using shared information for multiple ECDH key derivations is not recommended.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public System.String IncomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_SharedInformation { get; set; }
        #endregion
        
        #region Parameter OutgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_SharedInformation
        /// <summary>
        /// <para>
        /// <para>A byte string containing information that binds the ECDH derived key to the two parties
        /// involved or to the context of the key.</para><para>It may include details like identities of the two parties deriving the key, context
        /// of the operation, session IDs, and optionally a nonce. It must not contain zero bytes,
        /// and re-using shared information for multiple ECDH key derivations is not recommended.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public System.String OutgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_SharedInformation { get; set; }
        #endregion
        
        #region Parameter IncomingWrappedKey_WrappedKeyMaterial_Tr31KeyBlock
        /// <summary>
        /// <para>
        /// <para>The TR-31 wrapped key block.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public System.String IncomingWrappedKey_WrappedKeyMaterial_Tr31KeyBlock { get; set; }
        #endregion
        
        #region Parameter OutgoingWrappedKey_WrappedKeyMaterial_Tr31KeyBlock
        /// <summary>
        /// <para>
        /// <para>The TR-31 wrapped key block.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public System.String OutgoingWrappedKey_WrappedKeyMaterial_Tr31KeyBlock { get; set; }
        #endregion
        
        #region Parameter Select
        /// <summary>
        /// Use the -Select parameter to control the cmdlet output. The default value is '*'.
        /// Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.PaymentCryptographyData.Model.ReEncryptDataResponse).
        /// Specifying the name of a property of type Amazon.PaymentCryptographyData.Model.ReEncryptDataResponse will result in that property being returned.
        /// Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public string Select { get; set; } = "*";
        #endregion
        
        #region Parameter Force
        /// <summary>
        /// This parameter overrides confirmation prompts to force 
        /// the cmdlet to continue its operation. This parameter should always
        /// be used with caution.
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public SwitchParameter Force { get; set; }
        #endregion
        
        protected override void ProcessRecord()
        {
            this._AWSSignerType = "v4";
            base.ProcessRecord();
            
            var resourceIdentifiersText = string.Empty;
            if (!ConfirmShouldProceed(this.Force.IsPresent, resourceIdentifiersText, "Update-PAYCDEncryptData (ReEncryptData)"))
            {
                return;
            }
            
            var context = new CmdletContext();
            
            // allow for manipulation of parameters prior to loading into context
            PreExecutionContextLoad(context);
            
            if (ParameterWasBound(nameof(this.Select)))
            {
                context.Select = CreateSelectDelegate<Amazon.PaymentCryptographyData.Model.ReEncryptDataResponse, UpdatePAYCDEncryptDataCmdlet>(Select) ??
                    throw new System.ArgumentException("Invalid value for -Select parameter.", nameof(this.Select));
            }
            context.CipherText = this.CipherText;
            #if MODULAR
            if (this.CipherText == null && ParameterWasBound(nameof(this.CipherText)))
            {
                WriteWarning("You are passing $null as a value for parameter CipherText which is marked as required. In case you believe this parameter was incorrectly marked as required, report this by opening an issue at https://github.com/aws/aws-tools-for-powershell/issues.");
            }
            #endif
            context.IncomingEncryptionAttributes_Dukpt_DukptKeyDerivationType = this.IncomingEncryptionAttributes_Dukpt_DukptKeyDerivationType;
            context.IncomingEncryptionAttributes_Dukpt_DukptKeyVariant = this.IncomingEncryptionAttributes_Dukpt_DukptKeyVariant;
            context.IncomingEncryptionAttributes_Dukpt_InitializationVector = this.IncomingEncryptionAttributes_Dukpt_InitializationVector;
            context.IncomingEncryptionAttributes_Dukpt_KeySerialNumber = this.IncomingEncryptionAttributes_Dukpt_KeySerialNumber;
            context.IncomingEncryptionAttributes_Dukpt_Mode = this.IncomingEncryptionAttributes_Dukpt_Mode;
            context.IncomingEncryptionAttributes_Symmetric_InitializationVector = this.IncomingEncryptionAttributes_Symmetric_InitializationVector;
            context.IncomingEncryptionAttributes_Symmetric_Mode = this.IncomingEncryptionAttributes_Symmetric_Mode;
            context.IncomingEncryptionAttributes_Symmetric_PaddingType = this.IncomingEncryptionAttributes_Symmetric_PaddingType;
            context.IncomingKeyIdentifier = this.IncomingKeyIdentifier;
            #if MODULAR
            if (this.IncomingKeyIdentifier == null && ParameterWasBound(nameof(this.IncomingKeyIdentifier)))
            {
                WriteWarning("You are passing $null as a value for parameter IncomingKeyIdentifier which is marked as required. In case you believe this parameter was incorrectly marked as required, report this by opening an issue at https://github.com/aws/aws-tools-for-powershell/issues.");
            }
            #endif
            context.IncomingWrappedKey_KeyCheckValueAlgorithm = this.IncomingWrappedKey_KeyCheckValueAlgorithm;
            context.IncomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_CertificateAuthorityPublicKeyIdentifier = this.IncomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_CertificateAuthorityPublicKeyIdentifier;
            context.IncomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyAlgorithm = this.IncomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyAlgorithm;
            context.IncomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyDerivationFunction = this.IncomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyDerivationFunction;
            context.IncomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyDerivationHashAlgorithm = this.IncomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyDerivationHashAlgorithm;
            context.IncomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_PublicKeyCertificate = this.IncomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_PublicKeyCertificate;
            context.IncomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_SharedInformation = this.IncomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_SharedInformation;
            context.IncomingWrappedKey_WrappedKeyMaterial_Tr31KeyBlock = this.IncomingWrappedKey_WrappedKeyMaterial_Tr31KeyBlock;
            context.OutgoingEncryptionAttributes_Dukpt_DukptKeyDerivationType = this.OutgoingEncryptionAttributes_Dukpt_DukptKeyDerivationType;
            context.OutgoingEncryptionAttributes_Dukpt_DukptKeyVariant = this.OutgoingEncryptionAttributes_Dukpt_DukptKeyVariant;
            context.OutgoingEncryptionAttributes_Dukpt_InitializationVector = this.OutgoingEncryptionAttributes_Dukpt_InitializationVector;
            context.OutgoingEncryptionAttributes_Dukpt_KeySerialNumber = this.OutgoingEncryptionAttributes_Dukpt_KeySerialNumber;
            context.OutgoingEncryptionAttributes_Dukpt_Mode = this.OutgoingEncryptionAttributes_Dukpt_Mode;
            context.OutgoingEncryptionAttributes_Symmetric_InitializationVector = this.OutgoingEncryptionAttributes_Symmetric_InitializationVector;
            context.OutgoingEncryptionAttributes_Symmetric_Mode = this.OutgoingEncryptionAttributes_Symmetric_Mode;
            context.OutgoingEncryptionAttributes_Symmetric_PaddingType = this.OutgoingEncryptionAttributes_Symmetric_PaddingType;
            context.OutgoingKeyIdentifier = this.OutgoingKeyIdentifier;
            #if MODULAR
            if (this.OutgoingKeyIdentifier == null && ParameterWasBound(nameof(this.OutgoingKeyIdentifier)))
            {
                WriteWarning("You are passing $null as a value for parameter OutgoingKeyIdentifier which is marked as required. In case you believe this parameter was incorrectly marked as required, report this by opening an issue at https://github.com/aws/aws-tools-for-powershell/issues.");
            }
            #endif
            context.OutgoingWrappedKey_KeyCheckValueAlgorithm = this.OutgoingWrappedKey_KeyCheckValueAlgorithm;
            context.OutgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_CertificateAuthorityPublicKeyIdentifier = this.OutgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_CertificateAuthorityPublicKeyIdentifier;
            context.OutgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyAlgorithm = this.OutgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyAlgorithm;
            context.OutgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyDerivationFunction = this.OutgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyDerivationFunction;
            context.OutgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyDerivationHashAlgorithm = this.OutgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyDerivationHashAlgorithm;
            context.OutgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_PublicKeyCertificate = this.OutgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_PublicKeyCertificate;
            context.OutgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_SharedInformation = this.OutgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_SharedInformation;
            context.OutgoingWrappedKey_WrappedKeyMaterial_Tr31KeyBlock = this.OutgoingWrappedKey_WrappedKeyMaterial_Tr31KeyBlock;
            
            // allow further manipulation of loaded context prior to processing
            PostExecutionContextLoad(context);
            
            var output = Execute(context) as CmdletOutput;
            ProcessOutput(output);
        }
        
        #region IExecutor Members
        
        public object Execute(ExecutorContext context)
        {
            var cmdletContext = context as CmdletContext;
            // create request
            var request = new Amazon.PaymentCryptographyData.Model.ReEncryptDataRequest();
            
            if (cmdletContext.CipherText != null)
            {
                request.CipherText = cmdletContext.CipherText;
            }
            
             // populate IncomingEncryptionAttributes
            var requestIncomingEncryptionAttributesIsNull = true;
            request.IncomingEncryptionAttributes = new Amazon.PaymentCryptographyData.Model.ReEncryptionAttributes();
            Amazon.PaymentCryptographyData.Model.SymmetricEncryptionAttributes requestIncomingEncryptionAttributes_incomingEncryptionAttributes_Symmetric = null;
            
             // populate Symmetric
            var requestIncomingEncryptionAttributes_incomingEncryptionAttributes_SymmetricIsNull = true;
            requestIncomingEncryptionAttributes_incomingEncryptionAttributes_Symmetric = new Amazon.PaymentCryptographyData.Model.SymmetricEncryptionAttributes();
            System.String requestIncomingEncryptionAttributes_incomingEncryptionAttributes_Symmetric_incomingEncryptionAttributes_Symmetric_InitializationVector = null;
            if (cmdletContext.IncomingEncryptionAttributes_Symmetric_InitializationVector != null)
            {
                requestIncomingEncryptionAttributes_incomingEncryptionAttributes_Symmetric_incomingEncryptionAttributes_Symmetric_InitializationVector = cmdletContext.IncomingEncryptionAttributes_Symmetric_InitializationVector;
            }
            if (requestIncomingEncryptionAttributes_incomingEncryptionAttributes_Symmetric_incomingEncryptionAttributes_Symmetric_InitializationVector != null)
            {
                requestIncomingEncryptionAttributes_incomingEncryptionAttributes_Symmetric.InitializationVector = requestIncomingEncryptionAttributes_incomingEncryptionAttributes_Symmetric_incomingEncryptionAttributes_Symmetric_InitializationVector;
                requestIncomingEncryptionAttributes_incomingEncryptionAttributes_SymmetricIsNull = false;
            }
            Amazon.PaymentCryptographyData.EncryptionMode requestIncomingEncryptionAttributes_incomingEncryptionAttributes_Symmetric_incomingEncryptionAttributes_Symmetric_Mode = null;
            if (cmdletContext.IncomingEncryptionAttributes_Symmetric_Mode != null)
            {
                requestIncomingEncryptionAttributes_incomingEncryptionAttributes_Symmetric_incomingEncryptionAttributes_Symmetric_Mode = cmdletContext.IncomingEncryptionAttributes_Symmetric_Mode;
            }
            if (requestIncomingEncryptionAttributes_incomingEncryptionAttributes_Symmetric_incomingEncryptionAttributes_Symmetric_Mode != null)
            {
                requestIncomingEncryptionAttributes_incomingEncryptionAttributes_Symmetric.Mode = requestIncomingEncryptionAttributes_incomingEncryptionAttributes_Symmetric_incomingEncryptionAttributes_Symmetric_Mode;
                requestIncomingEncryptionAttributes_incomingEncryptionAttributes_SymmetricIsNull = false;
            }
            Amazon.PaymentCryptographyData.PaddingType requestIncomingEncryptionAttributes_incomingEncryptionAttributes_Symmetric_incomingEncryptionAttributes_Symmetric_PaddingType = null;
            if (cmdletContext.IncomingEncryptionAttributes_Symmetric_PaddingType != null)
            {
                requestIncomingEncryptionAttributes_incomingEncryptionAttributes_Symmetric_incomingEncryptionAttributes_Symmetric_PaddingType = cmdletContext.IncomingEncryptionAttributes_Symmetric_PaddingType;
            }
            if (requestIncomingEncryptionAttributes_incomingEncryptionAttributes_Symmetric_incomingEncryptionAttributes_Symmetric_PaddingType != null)
            {
                requestIncomingEncryptionAttributes_incomingEncryptionAttributes_Symmetric.PaddingType = requestIncomingEncryptionAttributes_incomingEncryptionAttributes_Symmetric_incomingEncryptionAttributes_Symmetric_PaddingType;
                requestIncomingEncryptionAttributes_incomingEncryptionAttributes_SymmetricIsNull = false;
            }
             // determine if requestIncomingEncryptionAttributes_incomingEncryptionAttributes_Symmetric should be set to null
            if (requestIncomingEncryptionAttributes_incomingEncryptionAttributes_SymmetricIsNull)
            {
                requestIncomingEncryptionAttributes_incomingEncryptionAttributes_Symmetric = null;
            }
            if (requestIncomingEncryptionAttributes_incomingEncryptionAttributes_Symmetric != null)
            {
                request.IncomingEncryptionAttributes.Symmetric = requestIncomingEncryptionAttributes_incomingEncryptionAttributes_Symmetric;
                requestIncomingEncryptionAttributesIsNull = false;
            }
            Amazon.PaymentCryptographyData.Model.DukptEncryptionAttributes requestIncomingEncryptionAttributes_incomingEncryptionAttributes_Dukpt = null;
            
             // populate Dukpt
            var requestIncomingEncryptionAttributes_incomingEncryptionAttributes_DukptIsNull = true;
            requestIncomingEncryptionAttributes_incomingEncryptionAttributes_Dukpt = new Amazon.PaymentCryptographyData.Model.DukptEncryptionAttributes();
            Amazon.PaymentCryptographyData.DukptDerivationType requestIncomingEncryptionAttributes_incomingEncryptionAttributes_Dukpt_incomingEncryptionAttributes_Dukpt_DukptKeyDerivationType = null;
            if (cmdletContext.IncomingEncryptionAttributes_Dukpt_DukptKeyDerivationType != null)
            {
                requestIncomingEncryptionAttributes_incomingEncryptionAttributes_Dukpt_incomingEncryptionAttributes_Dukpt_DukptKeyDerivationType = cmdletContext.IncomingEncryptionAttributes_Dukpt_DukptKeyDerivationType;
            }
            if (requestIncomingEncryptionAttributes_incomingEncryptionAttributes_Dukpt_incomingEncryptionAttributes_Dukpt_DukptKeyDerivationType != null)
            {
                requestIncomingEncryptionAttributes_incomingEncryptionAttributes_Dukpt.DukptKeyDerivationType = requestIncomingEncryptionAttributes_incomingEncryptionAttributes_Dukpt_incomingEncryptionAttributes_Dukpt_DukptKeyDerivationType;
                requestIncomingEncryptionAttributes_incomingEncryptionAttributes_DukptIsNull = false;
            }
            Amazon.PaymentCryptographyData.DukptKeyVariant requestIncomingEncryptionAttributes_incomingEncryptionAttributes_Dukpt_incomingEncryptionAttributes_Dukpt_DukptKeyVariant = null;
            if (cmdletContext.IncomingEncryptionAttributes_Dukpt_DukptKeyVariant != null)
            {
                requestIncomingEncryptionAttributes_incomingEncryptionAttributes_Dukpt_incomingEncryptionAttributes_Dukpt_DukptKeyVariant = cmdletContext.IncomingEncryptionAttributes_Dukpt_DukptKeyVariant;
            }
            if (requestIncomingEncryptionAttributes_incomingEncryptionAttributes_Dukpt_incomingEncryptionAttributes_Dukpt_DukptKeyVariant != null)
            {
                requestIncomingEncryptionAttributes_incomingEncryptionAttributes_Dukpt.DukptKeyVariant = requestIncomingEncryptionAttributes_incomingEncryptionAttributes_Dukpt_incomingEncryptionAttributes_Dukpt_DukptKeyVariant;
                requestIncomingEncryptionAttributes_incomingEncryptionAttributes_DukptIsNull = false;
            }
            System.String requestIncomingEncryptionAttributes_incomingEncryptionAttributes_Dukpt_incomingEncryptionAttributes_Dukpt_InitializationVector = null;
            if (cmdletContext.IncomingEncryptionAttributes_Dukpt_InitializationVector != null)
            {
                requestIncomingEncryptionAttributes_incomingEncryptionAttributes_Dukpt_incomingEncryptionAttributes_Dukpt_InitializationVector = cmdletContext.IncomingEncryptionAttributes_Dukpt_InitializationVector;
            }
            if (requestIncomingEncryptionAttributes_incomingEncryptionAttributes_Dukpt_incomingEncryptionAttributes_Dukpt_InitializationVector != null)
            {
                requestIncomingEncryptionAttributes_incomingEncryptionAttributes_Dukpt.InitializationVector = requestIncomingEncryptionAttributes_incomingEncryptionAttributes_Dukpt_incomingEncryptionAttributes_Dukpt_InitializationVector;
                requestIncomingEncryptionAttributes_incomingEncryptionAttributes_DukptIsNull = false;
            }
            System.String requestIncomingEncryptionAttributes_incomingEncryptionAttributes_Dukpt_incomingEncryptionAttributes_Dukpt_KeySerialNumber = null;
            if (cmdletContext.IncomingEncryptionAttributes_Dukpt_KeySerialNumber != null)
            {
                requestIncomingEncryptionAttributes_incomingEncryptionAttributes_Dukpt_incomingEncryptionAttributes_Dukpt_KeySerialNumber = cmdletContext.IncomingEncryptionAttributes_Dukpt_KeySerialNumber;
            }
            if (requestIncomingEncryptionAttributes_incomingEncryptionAttributes_Dukpt_incomingEncryptionAttributes_Dukpt_KeySerialNumber != null)
            {
                requestIncomingEncryptionAttributes_incomingEncryptionAttributes_Dukpt.KeySerialNumber = requestIncomingEncryptionAttributes_incomingEncryptionAttributes_Dukpt_incomingEncryptionAttributes_Dukpt_KeySerialNumber;
                requestIncomingEncryptionAttributes_incomingEncryptionAttributes_DukptIsNull = false;
            }
            Amazon.PaymentCryptographyData.DukptEncryptionMode requestIncomingEncryptionAttributes_incomingEncryptionAttributes_Dukpt_incomingEncryptionAttributes_Dukpt_Mode = null;
            if (cmdletContext.IncomingEncryptionAttributes_Dukpt_Mode != null)
            {
                requestIncomingEncryptionAttributes_incomingEncryptionAttributes_Dukpt_incomingEncryptionAttributes_Dukpt_Mode = cmdletContext.IncomingEncryptionAttributes_Dukpt_Mode;
            }
            if (requestIncomingEncryptionAttributes_incomingEncryptionAttributes_Dukpt_incomingEncryptionAttributes_Dukpt_Mode != null)
            {
                requestIncomingEncryptionAttributes_incomingEncryptionAttributes_Dukpt.Mode = requestIncomingEncryptionAttributes_incomingEncryptionAttributes_Dukpt_incomingEncryptionAttributes_Dukpt_Mode;
                requestIncomingEncryptionAttributes_incomingEncryptionAttributes_DukptIsNull = false;
            }
             // determine if requestIncomingEncryptionAttributes_incomingEncryptionAttributes_Dukpt should be set to null
            if (requestIncomingEncryptionAttributes_incomingEncryptionAttributes_DukptIsNull)
            {
                requestIncomingEncryptionAttributes_incomingEncryptionAttributes_Dukpt = null;
            }
            if (requestIncomingEncryptionAttributes_incomingEncryptionAttributes_Dukpt != null)
            {
                request.IncomingEncryptionAttributes.Dukpt = requestIncomingEncryptionAttributes_incomingEncryptionAttributes_Dukpt;
                requestIncomingEncryptionAttributesIsNull = false;
            }
             // determine if request.IncomingEncryptionAttributes should be set to null
            if (requestIncomingEncryptionAttributesIsNull)
            {
                request.IncomingEncryptionAttributes = null;
            }
            if (cmdletContext.IncomingKeyIdentifier != null)
            {
                request.IncomingKeyIdentifier = cmdletContext.IncomingKeyIdentifier;
            }
            
             // populate IncomingWrappedKey
            var requestIncomingWrappedKeyIsNull = true;
            request.IncomingWrappedKey = new Amazon.PaymentCryptographyData.Model.WrappedKey();
            Amazon.PaymentCryptographyData.KeyCheckValueAlgorithm requestIncomingWrappedKey_incomingWrappedKey_KeyCheckValueAlgorithm = null;
            if (cmdletContext.IncomingWrappedKey_KeyCheckValueAlgorithm != null)
            {
                requestIncomingWrappedKey_incomingWrappedKey_KeyCheckValueAlgorithm = cmdletContext.IncomingWrappedKey_KeyCheckValueAlgorithm;
            }
            if (requestIncomingWrappedKey_incomingWrappedKey_KeyCheckValueAlgorithm != null)
            {
                request.IncomingWrappedKey.KeyCheckValueAlgorithm = requestIncomingWrappedKey_incomingWrappedKey_KeyCheckValueAlgorithm;
                requestIncomingWrappedKeyIsNull = false;
            }
            Amazon.PaymentCryptographyData.Model.WrappedKeyMaterial requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial = null;
            
             // populate WrappedKeyMaterial
            var requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterialIsNull = true;
            requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial = new Amazon.PaymentCryptographyData.Model.WrappedKeyMaterial();
            System.String requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial_incomingWrappedKey_WrappedKeyMaterial_Tr31KeyBlock = null;
            if (cmdletContext.IncomingWrappedKey_WrappedKeyMaterial_Tr31KeyBlock != null)
            {
                requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial_incomingWrappedKey_WrappedKeyMaterial_Tr31KeyBlock = cmdletContext.IncomingWrappedKey_WrappedKeyMaterial_Tr31KeyBlock;
            }
            if (requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial_incomingWrappedKey_WrappedKeyMaterial_Tr31KeyBlock != null)
            {
                requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial.Tr31KeyBlock = requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial_incomingWrappedKey_WrappedKeyMaterial_Tr31KeyBlock;
                requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterialIsNull = false;
            }
            Amazon.PaymentCryptographyData.Model.EcdhDerivationAttributes requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey = null;
            
             // populate DiffieHellmanSymmetricKey
            var requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKeyIsNull = true;
            requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey = new Amazon.PaymentCryptographyData.Model.EcdhDerivationAttributes();
            System.String requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_CertificateAuthorityPublicKeyIdentifier = null;
            if (cmdletContext.IncomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_CertificateAuthorityPublicKeyIdentifier != null)
            {
                requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_CertificateAuthorityPublicKeyIdentifier = cmdletContext.IncomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_CertificateAuthorityPublicKeyIdentifier;
            }
            if (requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_CertificateAuthorityPublicKeyIdentifier != null)
            {
                requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey.CertificateAuthorityPublicKeyIdentifier = requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_CertificateAuthorityPublicKeyIdentifier;
                requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKeyIsNull = false;
            }
            Amazon.PaymentCryptographyData.SymmetricKeyAlgorithm requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyAlgorithm = null;
            if (cmdletContext.IncomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyAlgorithm != null)
            {
                requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyAlgorithm = cmdletContext.IncomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyAlgorithm;
            }
            if (requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyAlgorithm != null)
            {
                requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey.KeyAlgorithm = requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyAlgorithm;
                requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKeyIsNull = false;
            }
            Amazon.PaymentCryptographyData.KeyDerivationFunction requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyDerivationFunction = null;
            if (cmdletContext.IncomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyDerivationFunction != null)
            {
                requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyDerivationFunction = cmdletContext.IncomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyDerivationFunction;
            }
            if (requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyDerivationFunction != null)
            {
                requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey.KeyDerivationFunction = requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyDerivationFunction;
                requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKeyIsNull = false;
            }
            Amazon.PaymentCryptographyData.KeyDerivationHashAlgorithm requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyDerivationHashAlgorithm = null;
            if (cmdletContext.IncomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyDerivationHashAlgorithm != null)
            {
                requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyDerivationHashAlgorithm = cmdletContext.IncomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyDerivationHashAlgorithm;
            }
            if (requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyDerivationHashAlgorithm != null)
            {
                requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey.KeyDerivationHashAlgorithm = requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyDerivationHashAlgorithm;
                requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKeyIsNull = false;
            }
            System.String requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_PublicKeyCertificate = null;
            if (cmdletContext.IncomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_PublicKeyCertificate != null)
            {
                requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_PublicKeyCertificate = cmdletContext.IncomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_PublicKeyCertificate;
            }
            if (requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_PublicKeyCertificate != null)
            {
                requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey.PublicKeyCertificate = requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_PublicKeyCertificate;
                requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKeyIsNull = false;
            }
            System.String requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_SharedInformation = null;
            if (cmdletContext.IncomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_SharedInformation != null)
            {
                requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_SharedInformation = cmdletContext.IncomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_SharedInformation;
            }
            if (requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_SharedInformation != null)
            {
                requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey.SharedInformation = requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_SharedInformation;
                requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKeyIsNull = false;
            }
             // determine if requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey should be set to null
            if (requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKeyIsNull)
            {
                requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey = null;
            }
            if (requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey != null)
            {
                requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial.DiffieHellmanSymmetricKey = requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial_incomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey;
                requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterialIsNull = false;
            }
             // determine if requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial should be set to null
            if (requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterialIsNull)
            {
                requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial = null;
            }
            if (requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial != null)
            {
                request.IncomingWrappedKey.WrappedKeyMaterial = requestIncomingWrappedKey_incomingWrappedKey_WrappedKeyMaterial;
                requestIncomingWrappedKeyIsNull = false;
            }
             // determine if request.IncomingWrappedKey should be set to null
            if (requestIncomingWrappedKeyIsNull)
            {
                request.IncomingWrappedKey = null;
            }
            
             // populate OutgoingEncryptionAttributes
            var requestOutgoingEncryptionAttributesIsNull = true;
            request.OutgoingEncryptionAttributes = new Amazon.PaymentCryptographyData.Model.ReEncryptionAttributes();
            Amazon.PaymentCryptographyData.Model.SymmetricEncryptionAttributes requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_Symmetric = null;
            
             // populate Symmetric
            var requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_SymmetricIsNull = true;
            requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_Symmetric = new Amazon.PaymentCryptographyData.Model.SymmetricEncryptionAttributes();
            System.String requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_Symmetric_outgoingEncryptionAttributes_Symmetric_InitializationVector = null;
            if (cmdletContext.OutgoingEncryptionAttributes_Symmetric_InitializationVector != null)
            {
                requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_Symmetric_outgoingEncryptionAttributes_Symmetric_InitializationVector = cmdletContext.OutgoingEncryptionAttributes_Symmetric_InitializationVector;
            }
            if (requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_Symmetric_outgoingEncryptionAttributes_Symmetric_InitializationVector != null)
            {
                requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_Symmetric.InitializationVector = requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_Symmetric_outgoingEncryptionAttributes_Symmetric_InitializationVector;
                requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_SymmetricIsNull = false;
            }
            Amazon.PaymentCryptographyData.EncryptionMode requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_Symmetric_outgoingEncryptionAttributes_Symmetric_Mode = null;
            if (cmdletContext.OutgoingEncryptionAttributes_Symmetric_Mode != null)
            {
                requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_Symmetric_outgoingEncryptionAttributes_Symmetric_Mode = cmdletContext.OutgoingEncryptionAttributes_Symmetric_Mode;
            }
            if (requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_Symmetric_outgoingEncryptionAttributes_Symmetric_Mode != null)
            {
                requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_Symmetric.Mode = requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_Symmetric_outgoingEncryptionAttributes_Symmetric_Mode;
                requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_SymmetricIsNull = false;
            }
            Amazon.PaymentCryptographyData.PaddingType requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_Symmetric_outgoingEncryptionAttributes_Symmetric_PaddingType = null;
            if (cmdletContext.OutgoingEncryptionAttributes_Symmetric_PaddingType != null)
            {
                requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_Symmetric_outgoingEncryptionAttributes_Symmetric_PaddingType = cmdletContext.OutgoingEncryptionAttributes_Symmetric_PaddingType;
            }
            if (requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_Symmetric_outgoingEncryptionAttributes_Symmetric_PaddingType != null)
            {
                requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_Symmetric.PaddingType = requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_Symmetric_outgoingEncryptionAttributes_Symmetric_PaddingType;
                requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_SymmetricIsNull = false;
            }
             // determine if requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_Symmetric should be set to null
            if (requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_SymmetricIsNull)
            {
                requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_Symmetric = null;
            }
            if (requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_Symmetric != null)
            {
                request.OutgoingEncryptionAttributes.Symmetric = requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_Symmetric;
                requestOutgoingEncryptionAttributesIsNull = false;
            }
            Amazon.PaymentCryptographyData.Model.DukptEncryptionAttributes requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_Dukpt = null;
            
             // populate Dukpt
            var requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_DukptIsNull = true;
            requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_Dukpt = new Amazon.PaymentCryptographyData.Model.DukptEncryptionAttributes();
            Amazon.PaymentCryptographyData.DukptDerivationType requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_Dukpt_outgoingEncryptionAttributes_Dukpt_DukptKeyDerivationType = null;
            if (cmdletContext.OutgoingEncryptionAttributes_Dukpt_DukptKeyDerivationType != null)
            {
                requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_Dukpt_outgoingEncryptionAttributes_Dukpt_DukptKeyDerivationType = cmdletContext.OutgoingEncryptionAttributes_Dukpt_DukptKeyDerivationType;
            }
            if (requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_Dukpt_outgoingEncryptionAttributes_Dukpt_DukptKeyDerivationType != null)
            {
                requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_Dukpt.DukptKeyDerivationType = requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_Dukpt_outgoingEncryptionAttributes_Dukpt_DukptKeyDerivationType;
                requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_DukptIsNull = false;
            }
            Amazon.PaymentCryptographyData.DukptKeyVariant requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_Dukpt_outgoingEncryptionAttributes_Dukpt_DukptKeyVariant = null;
            if (cmdletContext.OutgoingEncryptionAttributes_Dukpt_DukptKeyVariant != null)
            {
                requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_Dukpt_outgoingEncryptionAttributes_Dukpt_DukptKeyVariant = cmdletContext.OutgoingEncryptionAttributes_Dukpt_DukptKeyVariant;
            }
            if (requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_Dukpt_outgoingEncryptionAttributes_Dukpt_DukptKeyVariant != null)
            {
                requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_Dukpt.DukptKeyVariant = requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_Dukpt_outgoingEncryptionAttributes_Dukpt_DukptKeyVariant;
                requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_DukptIsNull = false;
            }
            System.String requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_Dukpt_outgoingEncryptionAttributes_Dukpt_InitializationVector = null;
            if (cmdletContext.OutgoingEncryptionAttributes_Dukpt_InitializationVector != null)
            {
                requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_Dukpt_outgoingEncryptionAttributes_Dukpt_InitializationVector = cmdletContext.OutgoingEncryptionAttributes_Dukpt_InitializationVector;
            }
            if (requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_Dukpt_outgoingEncryptionAttributes_Dukpt_InitializationVector != null)
            {
                requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_Dukpt.InitializationVector = requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_Dukpt_outgoingEncryptionAttributes_Dukpt_InitializationVector;
                requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_DukptIsNull = false;
            }
            System.String requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_Dukpt_outgoingEncryptionAttributes_Dukpt_KeySerialNumber = null;
            if (cmdletContext.OutgoingEncryptionAttributes_Dukpt_KeySerialNumber != null)
            {
                requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_Dukpt_outgoingEncryptionAttributes_Dukpt_KeySerialNumber = cmdletContext.OutgoingEncryptionAttributes_Dukpt_KeySerialNumber;
            }
            if (requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_Dukpt_outgoingEncryptionAttributes_Dukpt_KeySerialNumber != null)
            {
                requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_Dukpt.KeySerialNumber = requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_Dukpt_outgoingEncryptionAttributes_Dukpt_KeySerialNumber;
                requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_DukptIsNull = false;
            }
            Amazon.PaymentCryptographyData.DukptEncryptionMode requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_Dukpt_outgoingEncryptionAttributes_Dukpt_Mode = null;
            if (cmdletContext.OutgoingEncryptionAttributes_Dukpt_Mode != null)
            {
                requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_Dukpt_outgoingEncryptionAttributes_Dukpt_Mode = cmdletContext.OutgoingEncryptionAttributes_Dukpt_Mode;
            }
            if (requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_Dukpt_outgoingEncryptionAttributes_Dukpt_Mode != null)
            {
                requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_Dukpt.Mode = requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_Dukpt_outgoingEncryptionAttributes_Dukpt_Mode;
                requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_DukptIsNull = false;
            }
             // determine if requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_Dukpt should be set to null
            if (requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_DukptIsNull)
            {
                requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_Dukpt = null;
            }
            if (requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_Dukpt != null)
            {
                request.OutgoingEncryptionAttributes.Dukpt = requestOutgoingEncryptionAttributes_outgoingEncryptionAttributes_Dukpt;
                requestOutgoingEncryptionAttributesIsNull = false;
            }
             // determine if request.OutgoingEncryptionAttributes should be set to null
            if (requestOutgoingEncryptionAttributesIsNull)
            {
                request.OutgoingEncryptionAttributes = null;
            }
            if (cmdletContext.OutgoingKeyIdentifier != null)
            {
                request.OutgoingKeyIdentifier = cmdletContext.OutgoingKeyIdentifier;
            }
            
             // populate OutgoingWrappedKey
            var requestOutgoingWrappedKeyIsNull = true;
            request.OutgoingWrappedKey = new Amazon.PaymentCryptographyData.Model.WrappedKey();
            Amazon.PaymentCryptographyData.KeyCheckValueAlgorithm requestOutgoingWrappedKey_outgoingWrappedKey_KeyCheckValueAlgorithm = null;
            if (cmdletContext.OutgoingWrappedKey_KeyCheckValueAlgorithm != null)
            {
                requestOutgoingWrappedKey_outgoingWrappedKey_KeyCheckValueAlgorithm = cmdletContext.OutgoingWrappedKey_KeyCheckValueAlgorithm;
            }
            if (requestOutgoingWrappedKey_outgoingWrappedKey_KeyCheckValueAlgorithm != null)
            {
                request.OutgoingWrappedKey.KeyCheckValueAlgorithm = requestOutgoingWrappedKey_outgoingWrappedKey_KeyCheckValueAlgorithm;
                requestOutgoingWrappedKeyIsNull = false;
            }
            Amazon.PaymentCryptographyData.Model.WrappedKeyMaterial requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial = null;
            
             // populate WrappedKeyMaterial
            var requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterialIsNull = true;
            requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial = new Amazon.PaymentCryptographyData.Model.WrappedKeyMaterial();
            System.String requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial_outgoingWrappedKey_WrappedKeyMaterial_Tr31KeyBlock = null;
            if (cmdletContext.OutgoingWrappedKey_WrappedKeyMaterial_Tr31KeyBlock != null)
            {
                requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial_outgoingWrappedKey_WrappedKeyMaterial_Tr31KeyBlock = cmdletContext.OutgoingWrappedKey_WrappedKeyMaterial_Tr31KeyBlock;
            }
            if (requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial_outgoingWrappedKey_WrappedKeyMaterial_Tr31KeyBlock != null)
            {
                requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial.Tr31KeyBlock = requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial_outgoingWrappedKey_WrappedKeyMaterial_Tr31KeyBlock;
                requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterialIsNull = false;
            }
            Amazon.PaymentCryptographyData.Model.EcdhDerivationAttributes requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey = null;
            
             // populate DiffieHellmanSymmetricKey
            var requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKeyIsNull = true;
            requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey = new Amazon.PaymentCryptographyData.Model.EcdhDerivationAttributes();
            System.String requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_CertificateAuthorityPublicKeyIdentifier = null;
            if (cmdletContext.OutgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_CertificateAuthorityPublicKeyIdentifier != null)
            {
                requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_CertificateAuthorityPublicKeyIdentifier = cmdletContext.OutgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_CertificateAuthorityPublicKeyIdentifier;
            }
            if (requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_CertificateAuthorityPublicKeyIdentifier != null)
            {
                requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey.CertificateAuthorityPublicKeyIdentifier = requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_CertificateAuthorityPublicKeyIdentifier;
                requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKeyIsNull = false;
            }
            Amazon.PaymentCryptographyData.SymmetricKeyAlgorithm requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyAlgorithm = null;
            if (cmdletContext.OutgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyAlgorithm != null)
            {
                requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyAlgorithm = cmdletContext.OutgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyAlgorithm;
            }
            if (requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyAlgorithm != null)
            {
                requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey.KeyAlgorithm = requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyAlgorithm;
                requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKeyIsNull = false;
            }
            Amazon.PaymentCryptographyData.KeyDerivationFunction requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyDerivationFunction = null;
            if (cmdletContext.OutgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyDerivationFunction != null)
            {
                requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyDerivationFunction = cmdletContext.OutgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyDerivationFunction;
            }
            if (requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyDerivationFunction != null)
            {
                requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey.KeyDerivationFunction = requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyDerivationFunction;
                requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKeyIsNull = false;
            }
            Amazon.PaymentCryptographyData.KeyDerivationHashAlgorithm requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyDerivationHashAlgorithm = null;
            if (cmdletContext.OutgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyDerivationHashAlgorithm != null)
            {
                requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyDerivationHashAlgorithm = cmdletContext.OutgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyDerivationHashAlgorithm;
            }
            if (requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyDerivationHashAlgorithm != null)
            {
                requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey.KeyDerivationHashAlgorithm = requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyDerivationHashAlgorithm;
                requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKeyIsNull = false;
            }
            System.String requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_PublicKeyCertificate = null;
            if (cmdletContext.OutgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_PublicKeyCertificate != null)
            {
                requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_PublicKeyCertificate = cmdletContext.OutgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_PublicKeyCertificate;
            }
            if (requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_PublicKeyCertificate != null)
            {
                requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey.PublicKeyCertificate = requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_PublicKeyCertificate;
                requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKeyIsNull = false;
            }
            System.String requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_SharedInformation = null;
            if (cmdletContext.OutgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_SharedInformation != null)
            {
                requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_SharedInformation = cmdletContext.OutgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_SharedInformation;
            }
            if (requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_SharedInformation != null)
            {
                requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey.SharedInformation = requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_SharedInformation;
                requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKeyIsNull = false;
            }
             // determine if requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey should be set to null
            if (requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKeyIsNull)
            {
                requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey = null;
            }
            if (requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey != null)
            {
                requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial.DiffieHellmanSymmetricKey = requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial_outgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey;
                requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterialIsNull = false;
            }
             // determine if requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial should be set to null
            if (requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterialIsNull)
            {
                requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial = null;
            }
            if (requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial != null)
            {
                request.OutgoingWrappedKey.WrappedKeyMaterial = requestOutgoingWrappedKey_outgoingWrappedKey_WrappedKeyMaterial;
                requestOutgoingWrappedKeyIsNull = false;
            }
             // determine if request.OutgoingWrappedKey should be set to null
            if (requestOutgoingWrappedKeyIsNull)
            {
                request.OutgoingWrappedKey = null;
            }
            
            CmdletOutput output;
            
            // issue call
            var client = Client ?? CreateClient(_CurrentCredentials, _RegionEndpoint);
            try
            {
                var response = CallAWSServiceOperation(client, request);
                object pipelineOutput = null;
                pipelineOutput = cmdletContext.Select(response, this);
                output = new CmdletOutput
                {
                    PipelineOutput = pipelineOutput,
                    ServiceResponse = response
                };
            }
            catch (Exception e)
            {
                output = new CmdletOutput { ErrorResponse = e };
            }
            
            return output;
        }
        
        public ExecutorContext CreateContext()
        {
            return new CmdletContext();
        }
        
        #endregion
        
        #region AWS Service Operation Call
        
        private Amazon.PaymentCryptographyData.Model.ReEncryptDataResponse CallAWSServiceOperation(IAmazonPaymentCryptographyData client, Amazon.PaymentCryptographyData.Model.ReEncryptDataRequest request)
        {
            Utils.Common.WriteVerboseEndpointMessage(this, client.Config, "Payment Cryptography Data", "ReEncryptData");
            try
            {
                #if DESKTOP
                return client.ReEncryptData(request);
                #elif CORECLR
                return client.ReEncryptDataAsync(request).GetAwaiter().GetResult();
                #else
                        #error "Unknown build edition"
                #endif
            }
            catch (AmazonServiceException exc)
            {
                var webException = exc.InnerException as System.Net.WebException;
                if (webException != null)
                {
                    throw new Exception(Utils.Common.FormatNameResolutionFailureMessage(client.Config, webException.Message), webException);
                }
                throw;
            }
        }
        
        #endregion
        
        internal partial class CmdletContext : ExecutorContext
        {
            public System.String CipherText { get; set; }
            public Amazon.PaymentCryptographyData.DukptDerivationType IncomingEncryptionAttributes_Dukpt_DukptKeyDerivationType { get; set; }
            public Amazon.PaymentCryptographyData.DukptKeyVariant IncomingEncryptionAttributes_Dukpt_DukptKeyVariant { get; set; }
            public System.String IncomingEncryptionAttributes_Dukpt_InitializationVector { get; set; }
            public System.String IncomingEncryptionAttributes_Dukpt_KeySerialNumber { get; set; }
            public Amazon.PaymentCryptographyData.DukptEncryptionMode IncomingEncryptionAttributes_Dukpt_Mode { get; set; }
            public System.String IncomingEncryptionAttributes_Symmetric_InitializationVector { get; set; }
            public Amazon.PaymentCryptographyData.EncryptionMode IncomingEncryptionAttributes_Symmetric_Mode { get; set; }
            public Amazon.PaymentCryptographyData.PaddingType IncomingEncryptionAttributes_Symmetric_PaddingType { get; set; }
            public System.String IncomingKeyIdentifier { get; set; }
            public Amazon.PaymentCryptographyData.KeyCheckValueAlgorithm IncomingWrappedKey_KeyCheckValueAlgorithm { get; set; }
            public System.String IncomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_CertificateAuthorityPublicKeyIdentifier { get; set; }
            public Amazon.PaymentCryptographyData.SymmetricKeyAlgorithm IncomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyAlgorithm { get; set; }
            public Amazon.PaymentCryptographyData.KeyDerivationFunction IncomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyDerivationFunction { get; set; }
            public Amazon.PaymentCryptographyData.KeyDerivationHashAlgorithm IncomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyDerivationHashAlgorithm { get; set; }
            public System.String IncomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_PublicKeyCertificate { get; set; }
            public System.String IncomingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_SharedInformation { get; set; }
            public System.String IncomingWrappedKey_WrappedKeyMaterial_Tr31KeyBlock { get; set; }
            public Amazon.PaymentCryptographyData.DukptDerivationType OutgoingEncryptionAttributes_Dukpt_DukptKeyDerivationType { get; set; }
            public Amazon.PaymentCryptographyData.DukptKeyVariant OutgoingEncryptionAttributes_Dukpt_DukptKeyVariant { get; set; }
            public System.String OutgoingEncryptionAttributes_Dukpt_InitializationVector { get; set; }
            public System.String OutgoingEncryptionAttributes_Dukpt_KeySerialNumber { get; set; }
            public Amazon.PaymentCryptographyData.DukptEncryptionMode OutgoingEncryptionAttributes_Dukpt_Mode { get; set; }
            public System.String OutgoingEncryptionAttributes_Symmetric_InitializationVector { get; set; }
            public Amazon.PaymentCryptographyData.EncryptionMode OutgoingEncryptionAttributes_Symmetric_Mode { get; set; }
            public Amazon.PaymentCryptographyData.PaddingType OutgoingEncryptionAttributes_Symmetric_PaddingType { get; set; }
            public System.String OutgoingKeyIdentifier { get; set; }
            public Amazon.PaymentCryptographyData.KeyCheckValueAlgorithm OutgoingWrappedKey_KeyCheckValueAlgorithm { get; set; }
            public System.String OutgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_CertificateAuthorityPublicKeyIdentifier { get; set; }
            public Amazon.PaymentCryptographyData.SymmetricKeyAlgorithm OutgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyAlgorithm { get; set; }
            public Amazon.PaymentCryptographyData.KeyDerivationFunction OutgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyDerivationFunction { get; set; }
            public Amazon.PaymentCryptographyData.KeyDerivationHashAlgorithm OutgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_KeyDerivationHashAlgorithm { get; set; }
            public System.String OutgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_PublicKeyCertificate { get; set; }
            public System.String OutgoingWrappedKey_WrappedKeyMaterial_DiffieHellmanSymmetricKey_SharedInformation { get; set; }
            public System.String OutgoingWrappedKey_WrappedKeyMaterial_Tr31KeyBlock { get; set; }
            public System.Func<Amazon.PaymentCryptographyData.Model.ReEncryptDataResponse, UpdatePAYCDEncryptDataCmdlet, object> Select { get; set; } =
                (response, cmdlet) => response;
        }
        
    }
}
