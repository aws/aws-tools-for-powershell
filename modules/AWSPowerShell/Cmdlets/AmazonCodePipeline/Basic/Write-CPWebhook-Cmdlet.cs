/*******************************************************************************
 *  Copyright 2012-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 *  this file except in compliance with the License. A copy of the License is located at
 *
 *  http://aws.amazon.com/apache2.0
 *
 *  or in the "license" file accompanying this file.
 *  This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 *  CONDITIONS OF ANY KIND, either express or implied. See the License for the
 *  specific language governing permissions and limitations under the License.
 * *****************************************************************************
 *
 *  AWS Tools for Windows (TM) PowerShell (TM)
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;
using System.Text;
using Amazon.PowerShell.Common;
using Amazon.Runtime;
using Amazon.CodePipeline;
using Amazon.CodePipeline.Model;

namespace Amazon.PowerShell.Cmdlets.CP
{
    /// <summary>
    /// Defines a webhook and returns a unique webhook URL generated by CodePipeline. This
    /// URL can be supplied to third party source hosting providers to call every time there's
    /// a code change. When CodePipeline receives a POST request on this URL, the pipeline
    /// defined in the webhook is started as long as the POST request satisfied the authentication
    /// and filtering requirements supplied when defining the webhook. RegisterWebhookWithThirdParty
    /// and DeregisterWebhookWithThirdParty APIs can be used to automatically configure supported
    /// third parties to call the generated webhook URL.
    /// </summary>
    [Cmdlet("Write", "CPWebhook", SupportsShouldProcess = true, ConfirmImpact = ConfirmImpact.Medium)]
    [OutputType("Amazon.CodePipeline.Model.ListWebhookItem")]
    [AWSCmdlet("Calls the AWS CodePipeline PutWebhook API operation.", Operation = new[] {"PutWebhook"})]
    [AWSCmdletOutput("Amazon.CodePipeline.Model.ListWebhookItem",
        "This cmdlet returns a ListWebhookItem object.",
        "The service call response (type Amazon.CodePipeline.Model.PutWebhookResponse) can also be referenced from properties attached to the cmdlet entry in the $AWSHistory stack."
    )]
    public partial class WriteCPWebhookCmdlet : AmazonCodePipelineClientCmdlet, IExecutor
    {
        
        #region Parameter AuthenticationConfiguration_AllowedIPRange
        /// <summary>
        /// <para>
        /// <para>The property used to configure acceptance of webhooks within a specific IP range.
        /// For IP, only the AllowedIPRange property must be set, and this property must be set
        /// to a valid CIDR range.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter]
        [Alias("Webhook_AuthenticationConfiguration_AllowedIPRange")]
        public System.String AuthenticationConfiguration_AllowedIPRange { get; set; }
        #endregion
        
        #region Parameter Webhook_Authentication
        /// <summary>
        /// <para>
        /// <para>Supported options are GITHUB_HMAC, IP and UNAUTHENTICATED.</para><ul><li><para> GITHUB_HMAC implements the authentication scheme described here: https://developer.github.com/webhooks/securing/</para></li><li><para> IP will reject webhooks trigger requests unless they originate from an IP within
        /// the IP range whitelisted in the authentication configuration.</para></li><li><para> UNAUTHENTICATED will accept all webhook trigger requests regardless of origin.</para></li></ul>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter]
        [AWSConstantClassSource("Amazon.CodePipeline.WebhookAuthenticationType")]
        public Amazon.CodePipeline.WebhookAuthenticationType Webhook_Authentication { get; set; }
        #endregion
        
        #region Parameter Webhook_Filter
        /// <summary>
        /// <para>
        /// <para>A list of rules applied to the body/payload sent in the POST request to a webhook
        /// URL. All defined rules must pass for the request to be accepted and the pipeline started.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter]
        [Alias("Webhook_Filters")]
        public Amazon.CodePipeline.Model.WebhookFilterRule[] Webhook_Filter { get; set; }
        #endregion
        
        #region Parameter Webhook_Name
        /// <summary>
        /// <para>
        /// <para>The name of the webhook.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(Position = 0, ValueFromPipeline = true)]
        public System.String Webhook_Name { get; set; }
        #endregion
        
        #region Parameter AuthenticationConfiguration_SecretToken
        /// <summary>
        /// <para>
        /// <para>The property used to configure GitHub authentication. For GITHUB_HMAC, only the SecretToken
        /// property must be set.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter]
        [Alias("Webhook_AuthenticationConfiguration_SecretToken")]
        public System.String AuthenticationConfiguration_SecretToken { get; set; }
        #endregion
        
        #region Parameter Webhook_TargetAction
        /// <summary>
        /// <para>
        /// <para>The name of the action in a pipeline you want to connect to the webhook. The action
        /// must be from the source (first) stage of the pipeline.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter]
        public System.String Webhook_TargetAction { get; set; }
        #endregion
        
        #region Parameter Webhook_TargetPipeline
        /// <summary>
        /// <para>
        /// <para>The name of the pipeline you want to connect to the webhook.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter]
        public System.String Webhook_TargetPipeline { get; set; }
        #endregion
        
        #region Parameter Force
        /// <summary>
        /// This parameter overrides confirmation prompts to force 
        /// the cmdlet to continue its operation. This parameter should always
        /// be used with caution.
        /// </summary>
        [System.Management.Automation.Parameter]
        public SwitchParameter Force { get; set; }
        #endregion
        
        protected override void ProcessRecord()
        {
            base.ProcessRecord();
            
            var resourceIdentifiersText = FormatParameterValuesForConfirmationMsg("Webhook_Name", MyInvocation.BoundParameters);
            if (!ConfirmShouldProceed(this.Force.IsPresent, resourceIdentifiersText, "Write-CPWebhook (PutWebhook)"))
            {
                return;
            }
            
            var context = new CmdletContext
            {
                Region = this.Region,
                Credentials = this.CurrentCredentials
            };
            
            // allow for manipulation of parameters prior to loading into context
            PreExecutionContextLoad(context);
            
            context.Webhook_Authentication = this.Webhook_Authentication;
            context.Webhook_AuthenticationConfiguration_AllowedIPRange = this.AuthenticationConfiguration_AllowedIPRange;
            context.Webhook_AuthenticationConfiguration_SecretToken = this.AuthenticationConfiguration_SecretToken;
            if (this.Webhook_Filter != null)
            {
                context.Webhook_Filters = new List<Amazon.CodePipeline.Model.WebhookFilterRule>(this.Webhook_Filter);
            }
            context.Webhook_Name = this.Webhook_Name;
            context.Webhook_TargetAction = this.Webhook_TargetAction;
            context.Webhook_TargetPipeline = this.Webhook_TargetPipeline;
            
            // allow further manipulation of loaded context prior to processing
            PostExecutionContextLoad(context);
            
            var output = Execute(context) as CmdletOutput;
            ProcessOutput(output);
        }
        
        #region IExecutor Members
        
        public object Execute(ExecutorContext context)
        {
            var cmdletContext = context as CmdletContext;
            // create request
            var request = new Amazon.CodePipeline.Model.PutWebhookRequest();
            
            
             // populate Webhook
            bool requestWebhookIsNull = true;
            request.Webhook = new Amazon.CodePipeline.Model.WebhookDefinition();
            Amazon.CodePipeline.WebhookAuthenticationType requestWebhook_webhook_Authentication = null;
            if (cmdletContext.Webhook_Authentication != null)
            {
                requestWebhook_webhook_Authentication = cmdletContext.Webhook_Authentication;
            }
            if (requestWebhook_webhook_Authentication != null)
            {
                request.Webhook.Authentication = requestWebhook_webhook_Authentication;
                requestWebhookIsNull = false;
            }
            List<Amazon.CodePipeline.Model.WebhookFilterRule> requestWebhook_webhook_Filter = null;
            if (cmdletContext.Webhook_Filters != null)
            {
                requestWebhook_webhook_Filter = cmdletContext.Webhook_Filters;
            }
            if (requestWebhook_webhook_Filter != null)
            {
                request.Webhook.Filters = requestWebhook_webhook_Filter;
                requestWebhookIsNull = false;
            }
            System.String requestWebhook_webhook_Name = null;
            if (cmdletContext.Webhook_Name != null)
            {
                requestWebhook_webhook_Name = cmdletContext.Webhook_Name;
            }
            if (requestWebhook_webhook_Name != null)
            {
                request.Webhook.Name = requestWebhook_webhook_Name;
                requestWebhookIsNull = false;
            }
            System.String requestWebhook_webhook_TargetAction = null;
            if (cmdletContext.Webhook_TargetAction != null)
            {
                requestWebhook_webhook_TargetAction = cmdletContext.Webhook_TargetAction;
            }
            if (requestWebhook_webhook_TargetAction != null)
            {
                request.Webhook.TargetAction = requestWebhook_webhook_TargetAction;
                requestWebhookIsNull = false;
            }
            System.String requestWebhook_webhook_TargetPipeline = null;
            if (cmdletContext.Webhook_TargetPipeline != null)
            {
                requestWebhook_webhook_TargetPipeline = cmdletContext.Webhook_TargetPipeline;
            }
            if (requestWebhook_webhook_TargetPipeline != null)
            {
                request.Webhook.TargetPipeline = requestWebhook_webhook_TargetPipeline;
                requestWebhookIsNull = false;
            }
            Amazon.CodePipeline.Model.WebhookAuthConfiguration requestWebhook_webhook_AuthenticationConfiguration = null;
            
             // populate AuthenticationConfiguration
            bool requestWebhook_webhook_AuthenticationConfigurationIsNull = true;
            requestWebhook_webhook_AuthenticationConfiguration = new Amazon.CodePipeline.Model.WebhookAuthConfiguration();
            System.String requestWebhook_webhook_AuthenticationConfiguration_authenticationConfiguration_AllowedIPRange = null;
            if (cmdletContext.Webhook_AuthenticationConfiguration_AllowedIPRange != null)
            {
                requestWebhook_webhook_AuthenticationConfiguration_authenticationConfiguration_AllowedIPRange = cmdletContext.Webhook_AuthenticationConfiguration_AllowedIPRange;
            }
            if (requestWebhook_webhook_AuthenticationConfiguration_authenticationConfiguration_AllowedIPRange != null)
            {
                requestWebhook_webhook_AuthenticationConfiguration.AllowedIPRange = requestWebhook_webhook_AuthenticationConfiguration_authenticationConfiguration_AllowedIPRange;
                requestWebhook_webhook_AuthenticationConfigurationIsNull = false;
            }
            System.String requestWebhook_webhook_AuthenticationConfiguration_authenticationConfiguration_SecretToken = null;
            if (cmdletContext.Webhook_AuthenticationConfiguration_SecretToken != null)
            {
                requestWebhook_webhook_AuthenticationConfiguration_authenticationConfiguration_SecretToken = cmdletContext.Webhook_AuthenticationConfiguration_SecretToken;
            }
            if (requestWebhook_webhook_AuthenticationConfiguration_authenticationConfiguration_SecretToken != null)
            {
                requestWebhook_webhook_AuthenticationConfiguration.SecretToken = requestWebhook_webhook_AuthenticationConfiguration_authenticationConfiguration_SecretToken;
                requestWebhook_webhook_AuthenticationConfigurationIsNull = false;
            }
             // determine if requestWebhook_webhook_AuthenticationConfiguration should be set to null
            if (requestWebhook_webhook_AuthenticationConfigurationIsNull)
            {
                requestWebhook_webhook_AuthenticationConfiguration = null;
            }
            if (requestWebhook_webhook_AuthenticationConfiguration != null)
            {
                request.Webhook.AuthenticationConfiguration = requestWebhook_webhook_AuthenticationConfiguration;
                requestWebhookIsNull = false;
            }
             // determine if request.Webhook should be set to null
            if (requestWebhookIsNull)
            {
                request.Webhook = null;
            }
            
            CmdletOutput output;
            
            // issue call
            var client = Client ?? CreateClient(context.Credentials, context.Region);
            try
            {
                var response = CallAWSServiceOperation(client, request);
                Dictionary<string, object> notes = null;
                object pipelineOutput = response.Webhook;
                output = new CmdletOutput
                {
                    PipelineOutput = pipelineOutput,
                    ServiceResponse = response,
                    Notes = notes
                };
            }
            catch (Exception e)
            {
                output = new CmdletOutput { ErrorResponse = e };
            }
            
            return output;
        }
        
        public ExecutorContext CreateContext()
        {
            return new CmdletContext();
        }
        
        #endregion
        
        #region AWS Service Operation Call
        
        private Amazon.CodePipeline.Model.PutWebhookResponse CallAWSServiceOperation(IAmazonCodePipeline client, Amazon.CodePipeline.Model.PutWebhookRequest request)
        {
            Utils.Common.WriteVerboseEndpointMessage(this, client.Config, "AWS CodePipeline", "PutWebhook");
            try
            {
                #if DESKTOP
                return client.PutWebhook(request);
                #elif CORECLR
                // todo: handle AggregateException and extract true service exception for rethrow
                var task = client.PutWebhookAsync(request);
                return task.Result;
                #else
                        #error "Unknown build edition"
                #endif
            }
            catch (AmazonServiceException exc)
            {
                var webException = exc.InnerException as System.Net.WebException;
                if (webException != null)
                {
                    throw new Exception(Utils.Common.FormatNameResolutionFailureMessage(client.Config, webException.Message), webException);
                }
                throw;
            }
        }
        
        #endregion
        
        internal partial class CmdletContext : ExecutorContext
        {
            public Amazon.CodePipeline.WebhookAuthenticationType Webhook_Authentication { get; set; }
            public System.String Webhook_AuthenticationConfiguration_AllowedIPRange { get; set; }
            public System.String Webhook_AuthenticationConfiguration_SecretToken { get; set; }
            public List<Amazon.CodePipeline.Model.WebhookFilterRule> Webhook_Filters { get; set; }
            public System.String Webhook_Name { get; set; }
            public System.String Webhook_TargetAction { get; set; }
            public System.String Webhook_TargetPipeline { get; set; }
        }
        
    }
}
