/*******************************************************************************
 *  Copyright 2012-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 *  this file except in compliance with the License. A copy of the License is located at
 *
 *  http://aws.amazon.com/apache2.0
 *
 *  or in the "license" file accompanying this file.
 *  This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 *  CONDITIONS OF ANY KIND, either express or implied. See the License for the
 *  specific language governing permissions and limitations under the License.
 * *****************************************************************************
 *
 *  AWS Tools for Windows (TM) PowerShell (TM)
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;
using System.Text;
using Amazon.PowerShell.Common;
using Amazon.Runtime;
using Amazon.RoboMaker;
using Amazon.RoboMaker.Model;

namespace Amazon.PowerShell.Cmdlets.ROBO
{
    /// <summary>
    /// Creates a simulation job.
    /// 
    ///  <note><para>
    /// After 90 days, simulation jobs expire and will be deleted. They will no longer be
    /// accessible. 
    /// </para></note>
    /// </summary>
    [Cmdlet("New", "ROBOSimulationJob", SupportsShouldProcess = true, ConfirmImpact = ConfirmImpact.Medium)]
    [OutputType("Amazon.RoboMaker.Model.CreateSimulationJobResponse")]
    [AWSCmdlet("Calls the AWS RoboMaker CreateSimulationJob API operation.", Operation = new[] {"CreateSimulationJob"})]
    [AWSCmdletOutput("Amazon.RoboMaker.Model.CreateSimulationJobResponse",
        "This cmdlet returns a Amazon.RoboMaker.Model.CreateSimulationJobResponse object containing multiple properties. The object can also be referenced from properties attached to the cmdlet entry in the $AWSHistory stack."
    )]
    public partial class NewROBOSimulationJobCmdlet : AmazonRoboMakerClientCmdlet, IExecutor
    {
        
        #region Parameter ClientRequestToken
        /// <summary>
        /// <para>
        /// <para>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
        /// request.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter]
        public System.String ClientRequestToken { get; set; }
        #endregion
        
        #region Parameter FailureBehavior
        /// <summary>
        /// <para>
        /// <para>The failure behavior the simulation job.</para><dl><dt>Continue</dt><dd><para>Restart the simulation job in the same host instance.</para></dd><dt>Fail</dt><dd><para>Stop the simulation job and terminate the instance.</para></dd></dl>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter]
        [AWSConstantClassSource("Amazon.RoboMaker.FailureBehavior")]
        public Amazon.RoboMaker.FailureBehavior FailureBehavior { get; set; }
        #endregion
        
        #region Parameter IamRole
        /// <summary>
        /// <para>
        /// <para>The IAM role name that allows the simulation instance to call the AWS APIs that are
        /// specified in its associated policies on your behalf. This is how credentials are passed
        /// in to your simulation job. </para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(Position = 0, ValueFromPipeline = true)]
        public System.String IamRole { get; set; }
        #endregion
        
        #region Parameter MaxJobDurationInSecond
        /// <summary>
        /// <para>
        /// <para>The maximum simulation job duration in seconds (up to 14 days or 1,209,600 seconds.
        /// When <code>maxJobDurationInSeconds</code> is reached, the simulation job will status
        /// will transition to <code>Completed</code>.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter]
        [Alias("MaxJobDurationInSeconds")]
        public System.Int64 MaxJobDurationInSecond { get; set; }
        #endregion
        
        #region Parameter OutputLocation
        /// <summary>
        /// <para>
        /// <para>Location for output files generated by the simulation job.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter]
        public Amazon.RoboMaker.Model.OutputLocation OutputLocation { get; set; }
        #endregion
        
        #region Parameter RobotApplication
        /// <summary>
        /// <para>
        /// <para>The robot application to use in the simulation job.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter]
        [Alias("RobotApplications")]
        public Amazon.RoboMaker.Model.RobotApplicationConfig[] RobotApplication { get; set; }
        #endregion
        
        #region Parameter SimulationApplication
        /// <summary>
        /// <para>
        /// <para>The simulation application to use in the simulation job.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter]
        [Alias("SimulationApplications")]
        public Amazon.RoboMaker.Model.SimulationApplicationConfig[] SimulationApplication { get; set; }
        #endregion
        
        #region Parameter Tag
        /// <summary>
        /// <para>
        /// <para>A map that contains tag keys and tag values that are attached to the simulation job.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter]
        [Alias("Tags")]
        public System.Collections.Hashtable Tag { get; set; }
        #endregion
        
        #region Parameter VpcConfig
        /// <summary>
        /// <para>
        /// <para>If your simulation job accesses resources in a VPC, you provide this parameter identifying
        /// the list of security group IDs and subnet IDs. These must belong to the same VPC.
        /// You must provide at least one security group and one subnet ID. </para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter]
        public Amazon.RoboMaker.Model.VPCConfig VpcConfig { get; set; }
        #endregion
        
        #region Parameter Force
        /// <summary>
        /// This parameter overrides confirmation prompts to force 
        /// the cmdlet to continue its operation. This parameter should always
        /// be used with caution.
        /// </summary>
        [System.Management.Automation.Parameter]
        public SwitchParameter Force { get; set; }
        #endregion
        
        protected override void ProcessRecord()
        {
            base.ProcessRecord();
            
            var resourceIdentifiersText = FormatParameterValuesForConfirmationMsg("IamRole", MyInvocation.BoundParameters);
            if (!ConfirmShouldProceed(this.Force.IsPresent, resourceIdentifiersText, "New-ROBOSimulationJob (CreateSimulationJob)"))
            {
                return;
            }
            
            var context = new CmdletContext
            {
                Region = this.Region,
                Credentials = this.CurrentCredentials
            };
            
            // allow for manipulation of parameters prior to loading into context
            PreExecutionContextLoad(context);
            
            context.ClientRequestToken = this.ClientRequestToken;
            context.FailureBehavior = this.FailureBehavior;
            context.IamRole = this.IamRole;
            if (ParameterWasBound("MaxJobDurationInSecond"))
                context.MaxJobDurationInSeconds = this.MaxJobDurationInSecond;
            context.OutputLocation = this.OutputLocation;
            if (this.RobotApplication != null)
            {
                context.RobotApplications = new List<Amazon.RoboMaker.Model.RobotApplicationConfig>(this.RobotApplication);
            }
            if (this.SimulationApplication != null)
            {
                context.SimulationApplications = new List<Amazon.RoboMaker.Model.SimulationApplicationConfig>(this.SimulationApplication);
            }
            if (this.Tag != null)
            {
                context.Tags = new Dictionary<System.String, System.String>(StringComparer.Ordinal);
                foreach (var hashKey in this.Tag.Keys)
                {
                    context.Tags.Add((String)hashKey, (String)(this.Tag[hashKey]));
                }
            }
            context.VpcConfig = this.VpcConfig;
            
            // allow further manipulation of loaded context prior to processing
            PostExecutionContextLoad(context);
            
            var output = Execute(context) as CmdletOutput;
            ProcessOutput(output);
        }
        
        #region IExecutor Members
        
        public object Execute(ExecutorContext context)
        {
            var cmdletContext = context as CmdletContext;
            // create request
            var request = new Amazon.RoboMaker.Model.CreateSimulationJobRequest();
            
            if (cmdletContext.ClientRequestToken != null)
            {
                request.ClientRequestToken = cmdletContext.ClientRequestToken;
            }
            if (cmdletContext.FailureBehavior != null)
            {
                request.FailureBehavior = cmdletContext.FailureBehavior;
            }
            if (cmdletContext.IamRole != null)
            {
                request.IamRole = cmdletContext.IamRole;
            }
            if (cmdletContext.MaxJobDurationInSeconds != null)
            {
                request.MaxJobDurationInSeconds = cmdletContext.MaxJobDurationInSeconds.Value;
            }
            if (cmdletContext.OutputLocation != null)
            {
                request.OutputLocation = cmdletContext.OutputLocation;
            }
            if (cmdletContext.RobotApplications != null)
            {
                request.RobotApplications = cmdletContext.RobotApplications;
            }
            if (cmdletContext.SimulationApplications != null)
            {
                request.SimulationApplications = cmdletContext.SimulationApplications;
            }
            if (cmdletContext.Tags != null)
            {
                request.Tags = cmdletContext.Tags;
            }
            if (cmdletContext.VpcConfig != null)
            {
                request.VpcConfig = cmdletContext.VpcConfig;
            }
            
            CmdletOutput output;
            
            // issue call
            var client = Client ?? CreateClient(context.Credentials, context.Region);
            try
            {
                var response = CallAWSServiceOperation(client, request);
                Dictionary<string, object> notes = null;
                object pipelineOutput = response;
                output = new CmdletOutput
                {
                    PipelineOutput = pipelineOutput,
                    ServiceResponse = response,
                    Notes = notes
                };
            }
            catch (Exception e)
            {
                output = new CmdletOutput { ErrorResponse = e };
            }
            
            return output;
        }
        
        public ExecutorContext CreateContext()
        {
            return new CmdletContext();
        }
        
        #endregion
        
        #region AWS Service Operation Call
        
        private Amazon.RoboMaker.Model.CreateSimulationJobResponse CallAWSServiceOperation(IAmazonRoboMaker client, Amazon.RoboMaker.Model.CreateSimulationJobRequest request)
        {
            Utils.Common.WriteVerboseEndpointMessage(this, client.Config, "AWS RoboMaker", "CreateSimulationJob");
            try
            {
                #if DESKTOP
                return client.CreateSimulationJob(request);
                #elif CORECLR
                return client.CreateSimulationJobAsync(request).GetAwaiter().GetResult();
                #else
                        #error "Unknown build edition"
                #endif
            }
            catch (AmazonServiceException exc)
            {
                var webException = exc.InnerException as System.Net.WebException;
                if (webException != null)
                {
                    throw new Exception(Utils.Common.FormatNameResolutionFailureMessage(client.Config, webException.Message), webException);
                }
                throw;
            }
        }
        
        #endregion
        
        internal partial class CmdletContext : ExecutorContext
        {
            public System.String ClientRequestToken { get; set; }
            public Amazon.RoboMaker.FailureBehavior FailureBehavior { get; set; }
            public System.String IamRole { get; set; }
            public System.Int64? MaxJobDurationInSeconds { get; set; }
            public Amazon.RoboMaker.Model.OutputLocation OutputLocation { get; set; }
            public List<Amazon.RoboMaker.Model.RobotApplicationConfig> RobotApplications { get; set; }
            public List<Amazon.RoboMaker.Model.SimulationApplicationConfig> SimulationApplications { get; set; }
            public Dictionary<System.String, System.String> Tags { get; set; }
            public Amazon.RoboMaker.Model.VPCConfig VpcConfig { get; set; }
        }
        
    }
}
