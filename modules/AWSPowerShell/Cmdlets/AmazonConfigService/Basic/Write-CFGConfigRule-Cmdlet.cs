/*******************************************************************************
 *  Copyright 2012-2015 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 *  this file except in compliance with the License. A copy of the License is located at
 *
 *  http://aws.amazon.com/apache2.0
 *
 *  or in the "license" file accompanying this file.
 *  This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 *  CONDITIONS OF ANY KIND, either express or implied. See the License for the
 *  specific language governing permissions and limitations under the License.
 * *****************************************************************************
 *
 *  AWS Tools for Windows (TM) PowerShell (TM)
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;
using System.Text;
using Amazon.PowerShell.Common;
using Amazon.Runtime;
using Amazon.ConfigService;
using Amazon.ConfigService.Model;

namespace Amazon.PowerShell.Cmdlets.CFG
{
    /// <summary>
    /// Adds or updates an AWS Config rule for evaluating whether your AWS resources comply
    /// with your desired configurations. 
    /// 
    ///  
    /// <para>
    /// You can use this action for customer managed Config rules and AWS managed Config rules.
    /// A customer managed Config rule is a custom rule that you develop and maintain. An
    /// AWS managed Config rule is a customizable, predefined rule that is provided by AWS
    /// Config.
    /// </para><para>
    /// If you are adding a new customer managed Config rule, you must first create the AWS
    /// Lambda function that the rule invokes to evaluate your resources. When you use the
    /// <code>PutConfigRule</code> action to add the rule to AWS Config, you must specify
    /// the Amazon Resource Name (ARN) that AWS Lambda assigns to the function. Specify the
    /// ARN for the <code>SourceIdentifier</code> key. This key is part of the <code>Source</code>
    /// object, which is part of the <code>ConfigRule</code> object. 
    /// </para><para>
    /// If you are adding a new AWS managed Config rule, specify the rule's identifier for
    /// the <code>SourceIdentifier</code> key. To reference AWS managed Config rule identifiers,
    /// see <a href="http://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_use-managed-rules.html">Using
    /// AWS Managed Config Rules</a>.
    /// </para><para>
    /// For any new rule that you add, specify the <code>ConfigRuleName</code> in the <code>ConfigRule</code>
    /// object. Do not specify the <code>ConfigRuleArn</code> or the <code>ConfigRuleId</code>.
    /// These values are generated by AWS Config for new rules.
    /// </para><para>
    /// If you are updating a rule that you have added previously, specify the rule's <code>ConfigRuleName</code>,
    /// <code>ConfigRuleId</code>, or <code>ConfigRuleArn</code> in the <code>ConfigRule</code>
    /// data type that you use in this request.
    /// </para><para>
    /// The maximum number of rules that AWS Config supports is 25.
    /// </para><para>
    /// For more information about developing and using AWS Config rules, see <a href="http://docs.aws.amazon.com/config/latest/developerguide/evaluate-config.html">Evaluating
    /// AWS Resource Configurations with AWS Config</a> in the <i>AWS Config Developer Guide</i>.
    /// </para>
    /// </summary>
    [Cmdlet("Write", "CFGConfigRule", SupportsShouldProcess = true, ConfirmImpact = ConfirmImpact.Medium)]
    [OutputType("None","System.String")]
    [AWSCmdlet("Invokes the PutConfigRule operation against AWS Config.", Operation = new[] {"PutConfigRule"})]
    [AWSCmdletOutput("None or System.String",
        "When you use the PassThru parameter, this cmdlet outputs the value supplied to the ConfigRule_ConfigRuleName parameter. Otherwise, this cmdlet does not return any output. " +
        "The service response (type Amazon.ConfigService.Model.PutConfigRuleResponse) can be referenced from properties attached to the cmdlet entry in the $AWSHistory stack."
    )]
    public class WriteCFGConfigRuleCmdlet : AmazonConfigServiceClientCmdlet, IExecutor
    {
        /// <summary>
        /// <para>
        /// <para>The IDs of only those AWS resources that you want AWS Config to evaluate against the
        /// rule. If you specify a resource ID, you must specify one resource type for <code>ComplianceResourceTypes</code>.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter]
        [Alias("ConfigRule_Scope_ComplianceResourceId")]
        public System.String Scope_ComplianceResourceId { get; set; }
        
        /// <summary>
        /// <para>
        /// <para>The resource types of only those AWS resources that you want AWS Config to evaluate
        /// against the rule. You can specify only one type if you also specify resource IDs for
        /// <code>ComplianceResourceId</code>.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter]
        [Alias("ConfigRule_Scope_ComplianceResourceTypes")]
        public System.String[] Scope_ComplianceResourceType { get; set; }
        
        /// <summary>
        /// <para>
        /// <para>The Amazon Resource Name (ARN) of the AWS Config rule.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter]
        public System.String ConfigRule_ConfigRuleArn { get; set; }
        
        /// <summary>
        /// <para>
        /// <para>The ID of the AWS Config rule.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter]
        public System.String ConfigRule_ConfigRuleId { get; set; }
        
        /// <summary>
        /// <para>
        /// <para>The name that you assign to the AWS Config rule. The name is required if you are adding
        /// a new rule.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(Position = 0, ValueFromPipeline = true)]
        public System.String ConfigRule_ConfigRuleName { get; set; }
        
        /// <summary>
        /// <para>
        /// <para>Indicates whether the AWS Config rule is active or currently being deleted by AWS
        /// Config.</para><para>AWS Config sets the state of a rule to <code>DELETING</code> temporarily after you
        /// use the <code>DeleteConfigRule</code> request to delete the rule. After AWS Config
        /// finishes deleting a rule, the rule and all of its evaluations are erased and no longer
        /// available.</para><para>You cannot add a rule to AWS Config that has the state set to <code>DELETING</code>.
        /// If you want to delete a rule, you must use the <code>DeleteConfigRule</code> request.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter]
        public Amazon.ConfigService.ConfigRuleState ConfigRule_ConfigRuleState { get; set; }
        
        /// <summary>
        /// <para>
        /// <para>The description that you provide for the AWS Config rule.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter]
        public System.String ConfigRule_Description { get; set; }
        
        /// <summary>
        /// <para>
        /// <para>A string in JSON format that is passed to the AWS Config rule Lambda function.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter]
        [Alias("ConfigRule_InputParameters")]
        public System.String ConfigRule_InputParameter { get; set; }
        
        /// <summary>
        /// <para>
        /// <para>The maximum frequency at which the AWS Config rule runs evaluations.</para><para>If your rule is periodic, meaning it runs an evaluation when AWS Config delivers a
        /// configuration snapshot, then it cannot run evaluations more frequently than AWS Config
        /// delivers the snapshots. For periodic rules, set the value of the <code>MaximumExecutionFrequency</code>
        /// key to be equal to or greater than the value of the <code>deliveryFrequency</code>
        /// key, which is part of <code>ConfigSnapshotDeliveryProperties</code>. To update the
        /// frequency with which AWS Config delivers your snapshots, use the <code>PutDeliveryChannel</code>
        /// action.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter]
        public Amazon.ConfigService.MaximumExecutionFrequency ConfigRule_MaximumExecutionFrequency { get; set; }
        
        /// <summary>
        /// <para>
        /// <para>Provides the source and type of the event that causes AWS Config to evaluate your
        /// AWS resources.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter]
        [Alias("ConfigRule_Source_SourceDetails")]
        public Amazon.ConfigService.Model.SourceDetail[] Source_SourceDetail { get; set; }
        
        /// <summary>
        /// <para>
        /// <para>For AWS managed Config rules, a pre-defined identifier from a list. To reference the
        /// list, see <a href="http://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_use-managed-rules.html">Using
        /// AWS Managed Config Rules</a>.</para><para>For customer managed Config rules, the identifier is the Amazon Resource Name (ARN)
        /// of the rule's AWS Lambda function.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter]
        [Alias("ConfigRule_Source_SourceIdentifier")]
        public System.String Source_SourceIdentifier { get; set; }
        
        /// <summary>
        /// <para>
        /// <para>The tag key that is applied to only those AWS resources that you want AWS Config to
        /// evaluate against the rule.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter]
        [Alias("ConfigRule_Scope_TagKey")]
        public System.String Scope_TagKey { get; set; }
        
        /// <summary>
        /// <para>
        /// <para>The tag value applied to only those AWS resources that you want AWS Config to evaluate
        /// against the rule. If you specify a value for <code>TagValue</code>, you must also
        /// specify a value for <code>TagKey</code>.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter]
        [Alias("ConfigRule_Scope_TagValue")]
        public System.String Scope_TagValue { get; set; }
        
        /// <summary>
        /// <para>
        /// <para>Indicates whether AWS or the customer owns and manages the AWS Config rule.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter]
        [Alias("ConfigRule_Source_Owner")]
        public Amazon.ConfigService.Owner Source_Owner { get; set; }
        
        /// <summary>
        /// Returns the value passed to the ConfigRule_ConfigRuleName parameter.
        /// By default, this cmdlet does not generate any output.
        /// </summary>
        [System.Management.Automation.Parameter]
        public SwitchParameter PassThru { get; set; }
        
        /// <summary>
        /// This parameter overrides confirmation prompts to force 
        /// the cmdlet to continue its operation. This parameter should always
        /// be used with caution.
        /// </summary>
        [System.Management.Automation.Parameter]
        public SwitchParameter Force { get; set; }
        
        
        protected override void ProcessRecord()
        {
            base.ProcessRecord();
            
            var resourceIdentifiersText = FormatParameterValuesForConfirmationMsg("ConfigRule_ConfigRuleName", MyInvocation.BoundParameters);
            if (!ConfirmShouldProceed(this.Force.IsPresent, resourceIdentifiersText, "Write-CFGConfigRule (PutConfigRule)"))
            {
                return;
            }
            
            var context = new CmdletContext
            {
                Region = this.Region,
                Credentials = this.CurrentCredentials
            };
            
            context.ConfigRule_ConfigRuleArn = this.ConfigRule_ConfigRuleArn;
            context.ConfigRule_ConfigRuleId = this.ConfigRule_ConfigRuleId;
            context.ConfigRule_ConfigRuleName = this.ConfigRule_ConfigRuleName;
            context.ConfigRule_ConfigRuleState = this.ConfigRule_ConfigRuleState;
            context.ConfigRule_Description = this.ConfigRule_Description;
            context.ConfigRule_InputParameters = this.ConfigRule_InputParameter;
            context.ConfigRule_MaximumExecutionFrequency = this.ConfigRule_MaximumExecutionFrequency;
            context.ConfigRule_Scope_ComplianceResourceId = this.Scope_ComplianceResourceId;
            if (this.Scope_ComplianceResourceType != null)
            {
                context.ConfigRule_Scope_ComplianceResourceTypes = new List<System.String>(this.Scope_ComplianceResourceType);
            }
            context.ConfigRule_Scope_TagKey = this.Scope_TagKey;
            context.ConfigRule_Scope_TagValue = this.Scope_TagValue;
            context.ConfigRule_Source_Owner = this.Source_Owner;
            if (this.Source_SourceDetail != null)
            {
                context.ConfigRule_Source_SourceDetails = new List<Amazon.ConfigService.Model.SourceDetail>(this.Source_SourceDetail);
            }
            context.ConfigRule_Source_SourceIdentifier = this.Source_SourceIdentifier;
            
            var output = Execute(context) as CmdletOutput;
            ProcessOutput(output);
        }
        
        #region IExecutor Members
        
        public object Execute(ExecutorContext context)
        {
            var cmdletContext = context as CmdletContext;
            // create request
            var request = new Amazon.ConfigService.Model.PutConfigRuleRequest();
            
            
             // populate ConfigRule
            bool requestConfigRuleIsNull = true;
            request.ConfigRule = new Amazon.ConfigService.Model.ConfigRule();
            System.String requestConfigRule_configRule_ConfigRuleArn = null;
            if (cmdletContext.ConfigRule_ConfigRuleArn != null)
            {
                requestConfigRule_configRule_ConfigRuleArn = cmdletContext.ConfigRule_ConfigRuleArn;
            }
            if (requestConfigRule_configRule_ConfigRuleArn != null)
            {
                request.ConfigRule.ConfigRuleArn = requestConfigRule_configRule_ConfigRuleArn;
                requestConfigRuleIsNull = false;
            }
            System.String requestConfigRule_configRule_ConfigRuleId = null;
            if (cmdletContext.ConfigRule_ConfigRuleId != null)
            {
                requestConfigRule_configRule_ConfigRuleId = cmdletContext.ConfigRule_ConfigRuleId;
            }
            if (requestConfigRule_configRule_ConfigRuleId != null)
            {
                request.ConfigRule.ConfigRuleId = requestConfigRule_configRule_ConfigRuleId;
                requestConfigRuleIsNull = false;
            }
            System.String requestConfigRule_configRule_ConfigRuleName = null;
            if (cmdletContext.ConfigRule_ConfigRuleName != null)
            {
                requestConfigRule_configRule_ConfigRuleName = cmdletContext.ConfigRule_ConfigRuleName;
            }
            if (requestConfigRule_configRule_ConfigRuleName != null)
            {
                request.ConfigRule.ConfigRuleName = requestConfigRule_configRule_ConfigRuleName;
                requestConfigRuleIsNull = false;
            }
            Amazon.ConfigService.ConfigRuleState requestConfigRule_configRule_ConfigRuleState = null;
            if (cmdletContext.ConfigRule_ConfigRuleState != null)
            {
                requestConfigRule_configRule_ConfigRuleState = cmdletContext.ConfigRule_ConfigRuleState;
            }
            if (requestConfigRule_configRule_ConfigRuleState != null)
            {
                request.ConfigRule.ConfigRuleState = requestConfigRule_configRule_ConfigRuleState;
                requestConfigRuleIsNull = false;
            }
            System.String requestConfigRule_configRule_Description = null;
            if (cmdletContext.ConfigRule_Description != null)
            {
                requestConfigRule_configRule_Description = cmdletContext.ConfigRule_Description;
            }
            if (requestConfigRule_configRule_Description != null)
            {
                request.ConfigRule.Description = requestConfigRule_configRule_Description;
                requestConfigRuleIsNull = false;
            }
            System.String requestConfigRule_configRule_InputParameter = null;
            if (cmdletContext.ConfigRule_InputParameters != null)
            {
                requestConfigRule_configRule_InputParameter = cmdletContext.ConfigRule_InputParameters;
            }
            if (requestConfigRule_configRule_InputParameter != null)
            {
                request.ConfigRule.InputParameters = requestConfigRule_configRule_InputParameter;
                requestConfigRuleIsNull = false;
            }
            Amazon.ConfigService.MaximumExecutionFrequency requestConfigRule_configRule_MaximumExecutionFrequency = null;
            if (cmdletContext.ConfigRule_MaximumExecutionFrequency != null)
            {
                requestConfigRule_configRule_MaximumExecutionFrequency = cmdletContext.ConfigRule_MaximumExecutionFrequency;
            }
            if (requestConfigRule_configRule_MaximumExecutionFrequency != null)
            {
                request.ConfigRule.MaximumExecutionFrequency = requestConfigRule_configRule_MaximumExecutionFrequency;
                requestConfigRuleIsNull = false;
            }
            Amazon.ConfigService.Model.Source requestConfigRule_configRule_Source = null;
            
             // populate Source
            bool requestConfigRule_configRule_SourceIsNull = true;
            requestConfigRule_configRule_Source = new Amazon.ConfigService.Model.Source();
            Amazon.ConfigService.Owner requestConfigRule_configRule_Source_source_Owner = null;
            if (cmdletContext.ConfigRule_Source_Owner != null)
            {
                requestConfigRule_configRule_Source_source_Owner = cmdletContext.ConfigRule_Source_Owner;
            }
            if (requestConfigRule_configRule_Source_source_Owner != null)
            {
                requestConfigRule_configRule_Source.Owner = requestConfigRule_configRule_Source_source_Owner;
                requestConfigRule_configRule_SourceIsNull = false;
            }
            List<Amazon.ConfigService.Model.SourceDetail> requestConfigRule_configRule_Source_source_SourceDetail = null;
            if (cmdletContext.ConfigRule_Source_SourceDetails != null)
            {
                requestConfigRule_configRule_Source_source_SourceDetail = cmdletContext.ConfigRule_Source_SourceDetails;
            }
            if (requestConfigRule_configRule_Source_source_SourceDetail != null)
            {
                requestConfigRule_configRule_Source.SourceDetails = requestConfigRule_configRule_Source_source_SourceDetail;
                requestConfigRule_configRule_SourceIsNull = false;
            }
            System.String requestConfigRule_configRule_Source_source_SourceIdentifier = null;
            if (cmdletContext.ConfigRule_Source_SourceIdentifier != null)
            {
                requestConfigRule_configRule_Source_source_SourceIdentifier = cmdletContext.ConfigRule_Source_SourceIdentifier;
            }
            if (requestConfigRule_configRule_Source_source_SourceIdentifier != null)
            {
                requestConfigRule_configRule_Source.SourceIdentifier = requestConfigRule_configRule_Source_source_SourceIdentifier;
                requestConfigRule_configRule_SourceIsNull = false;
            }
             // determine if requestConfigRule_configRule_Source should be set to null
            if (requestConfigRule_configRule_SourceIsNull)
            {
                requestConfigRule_configRule_Source = null;
            }
            if (requestConfigRule_configRule_Source != null)
            {
                request.ConfigRule.Source = requestConfigRule_configRule_Source;
                requestConfigRuleIsNull = false;
            }
            Amazon.ConfigService.Model.Scope requestConfigRule_configRule_Scope = null;
            
             // populate Scope
            bool requestConfigRule_configRule_ScopeIsNull = true;
            requestConfigRule_configRule_Scope = new Amazon.ConfigService.Model.Scope();
            System.String requestConfigRule_configRule_Scope_scope_ComplianceResourceId = null;
            if (cmdletContext.ConfigRule_Scope_ComplianceResourceId != null)
            {
                requestConfigRule_configRule_Scope_scope_ComplianceResourceId = cmdletContext.ConfigRule_Scope_ComplianceResourceId;
            }
            if (requestConfigRule_configRule_Scope_scope_ComplianceResourceId != null)
            {
                requestConfigRule_configRule_Scope.ComplianceResourceId = requestConfigRule_configRule_Scope_scope_ComplianceResourceId;
                requestConfigRule_configRule_ScopeIsNull = false;
            }
            List<System.String> requestConfigRule_configRule_Scope_scope_ComplianceResourceType = null;
            if (cmdletContext.ConfigRule_Scope_ComplianceResourceTypes != null)
            {
                requestConfigRule_configRule_Scope_scope_ComplianceResourceType = cmdletContext.ConfigRule_Scope_ComplianceResourceTypes;
            }
            if (requestConfigRule_configRule_Scope_scope_ComplianceResourceType != null)
            {
                requestConfigRule_configRule_Scope.ComplianceResourceTypes = requestConfigRule_configRule_Scope_scope_ComplianceResourceType;
                requestConfigRule_configRule_ScopeIsNull = false;
            }
            System.String requestConfigRule_configRule_Scope_scope_TagKey = null;
            if (cmdletContext.ConfigRule_Scope_TagKey != null)
            {
                requestConfigRule_configRule_Scope_scope_TagKey = cmdletContext.ConfigRule_Scope_TagKey;
            }
            if (requestConfigRule_configRule_Scope_scope_TagKey != null)
            {
                requestConfigRule_configRule_Scope.TagKey = requestConfigRule_configRule_Scope_scope_TagKey;
                requestConfigRule_configRule_ScopeIsNull = false;
            }
            System.String requestConfigRule_configRule_Scope_scope_TagValue = null;
            if (cmdletContext.ConfigRule_Scope_TagValue != null)
            {
                requestConfigRule_configRule_Scope_scope_TagValue = cmdletContext.ConfigRule_Scope_TagValue;
            }
            if (requestConfigRule_configRule_Scope_scope_TagValue != null)
            {
                requestConfigRule_configRule_Scope.TagValue = requestConfigRule_configRule_Scope_scope_TagValue;
                requestConfigRule_configRule_ScopeIsNull = false;
            }
             // determine if requestConfigRule_configRule_Scope should be set to null
            if (requestConfigRule_configRule_ScopeIsNull)
            {
                requestConfigRule_configRule_Scope = null;
            }
            if (requestConfigRule_configRule_Scope != null)
            {
                request.ConfigRule.Scope = requestConfigRule_configRule_Scope;
                requestConfigRuleIsNull = false;
            }
             // determine if request.ConfigRule should be set to null
            if (requestConfigRuleIsNull)
            {
                request.ConfigRule = null;
            }
            
            CmdletOutput output;
            
            // issue call
            var client = Client ?? CreateClient(context.Credentials, context.Region);
            try
            {
                var response = client.PutConfigRule(request);
                Dictionary<string, object> notes = null;
                object pipelineOutput = null;
                if (this.PassThru.IsPresent)
                    pipelineOutput = this.ConfigRule_ConfigRuleName;
                output = new CmdletOutput
                {
                    PipelineOutput = pipelineOutput,
                    ServiceResponse = response,
                    Notes = notes
                };
            }
            catch (Exception e)
            {
                output = new CmdletOutput { ErrorResponse = e };
            }
            
            return output;
        }
        
        public ExecutorContext CreateContext()
        {
            return new CmdletContext();
        }
        
        #endregion
        
        
        internal class CmdletContext : ExecutorContext
        {
            public System.String ConfigRule_ConfigRuleArn { get; set; }
            public System.String ConfigRule_ConfigRuleId { get; set; }
            public System.String ConfigRule_ConfigRuleName { get; set; }
            public Amazon.ConfigService.ConfigRuleState ConfigRule_ConfigRuleState { get; set; }
            public System.String ConfigRule_Description { get; set; }
            public System.String ConfigRule_InputParameters { get; set; }
            public Amazon.ConfigService.MaximumExecutionFrequency ConfigRule_MaximumExecutionFrequency { get; set; }
            public System.String ConfigRule_Scope_ComplianceResourceId { get; set; }
            public List<System.String> ConfigRule_Scope_ComplianceResourceTypes { get; set; }
            public System.String ConfigRule_Scope_TagKey { get; set; }
            public System.String ConfigRule_Scope_TagValue { get; set; }
            public Amazon.ConfigService.Owner ConfigRule_Source_Owner { get; set; }
            public List<Amazon.ConfigService.Model.SourceDetail> ConfigRule_Source_SourceDetails { get; set; }
            public System.String ConfigRule_Source_SourceIdentifier { get; set; }
        }
        
    }
}
