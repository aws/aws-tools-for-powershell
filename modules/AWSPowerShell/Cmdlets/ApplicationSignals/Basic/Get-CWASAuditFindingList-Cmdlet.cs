/*******************************************************************************
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 *  this file except in compliance with the License. A copy of the License is located at
 *
 *  http://aws.amazon.com/apache2.0
 *
 *  or in the "license" file accompanying this file.
 *  This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 *  CONDITIONS OF ANY KIND, either express or implied. See the License for the
 *  specific language governing permissions and limitations under the License.
 * *****************************************************************************
 *
 *  AWS Tools for Windows (TM) PowerShell (TM)
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;
using System.Text;
using Amazon.PowerShell.Common;
using Amazon.Runtime;
using Amazon.ApplicationSignals;
using Amazon.ApplicationSignals.Model;

namespace Amazon.PowerShell.Cmdlets.CWAS
{
    /// <summary>
    /// Returns a list of audit findings that provide automated analysis of service behavior
    /// and root cause analysis. These findings help identify the most significant observations
    /// about your services, including performance issues, anomalies, and potential problems.
    /// The findings are generated using heuristic algorithms based on established troubleshooting
    /// patterns.
    /// </summary>
    [Cmdlet("Get", "CWASAuditFindingList")]
    [OutputType("Amazon.ApplicationSignals.Model.AuditFinding")]
    [AWSCmdlet("Calls the Amazon CloudWatch Application Signals ListAuditFindings API operation.", Operation = new[] {"ListAuditFindings"}, SelectReturnType = typeof(Amazon.ApplicationSignals.Model.ListAuditFindingsResponse))]
    [AWSCmdletOutput("Amazon.ApplicationSignals.Model.AuditFinding or Amazon.ApplicationSignals.Model.ListAuditFindingsResponse",
        "This cmdlet returns a collection of Amazon.ApplicationSignals.Model.AuditFinding objects.",
        "The service call response (type Amazon.ApplicationSignals.Model.ListAuditFindingsResponse) can be returned by specifying '-Select *'."
    )]
    public partial class GetCWASAuditFindingListCmdlet : AmazonApplicationSignalsClientCmdlet, IExecutor
    {
        
        protected override bool IsGeneratedCmdlet { get; set; } = true;
        
        #region Parameter Auditor
        /// <summary>
        /// <para>
        /// <para>A list of auditor names to filter the findings by. Only findings generated by the
        /// specified auditors will be returned.</para><para>The following auditors are available for configuration:</para><ul><li><para><c>slo</c> - SloAuditor: Identifies SLO violations and detects breached thresholds
        /// during the Assessment phase.</para></li><li><para><c>operation_metric</c> - OperationMetricAuditor: Detects anomalies in service operation
        /// metrics from Application Signals RED metrics during the Assessment phase</para></li><li><para><c>service_quota</c> - ServiceQuotaAuditor: Monitors resource utilization against
        /// service quotas during the Assessment phase</para></li><li><para><c>trace</c> - TraceAuditor: Performs deep-dive analysis of distributed traces, correlating
        /// traces with breached SLOs or abnormal RED metrics during the Analysis phase</para></li><li><para><c>dependency_metric</c> - CriticalPathAuditor: Analyzes service dependency impacts
        /// and maps dependency relationships from Application Signals RED metrics during the
        /// Analysis phase</para></li><li><para><c>top_contributor</c> - TopContributorAuditor: Identifies infrastructure-level contributors
        /// to issues by analyzing EMF logs of Application Signals RED metrics during the Analysis
        /// phase</para></li><li><para><c>log</c> - LogAuditor: Extracts insights from application logs, categorizing error
        /// types and ranking severity by frequency during the Analysis phase</para></li></ul><note><para><c>InitAuditor</c> and <c>Summarizer</c> auditors are not configurable as they are
        /// automatically triggered during the audit process.</para></note>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [Alias("Auditors")]
        public System.String[] Auditor { get; set; }
        #endregion
        
        #region Parameter AuditTarget
        /// <summary>
        /// <para>
        /// <para>A list of audit targets to filter the findings by. You can specify services, SLOs,
        /// or service operations to limit the audit findings to specific entities.</para>
        /// </para>
        /// </summary>
        #if !MODULAR
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        #else
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true, Mandatory = true)]
        [System.Management.Automation.AllowEmptyCollection]
        [System.Management.Automation.AllowNull]
        #endif
        [Amazon.PowerShell.Common.AWSRequiredParameter]
        [Alias("AuditTargets")]
        public Amazon.ApplicationSignals.Model.AuditTarget[] AuditTarget { get; set; }
        #endregion
        
        #region Parameter EndTime
        /// <summary>
        /// <para>
        /// <para>The end of the time period to retrieve audit findings for. When used in a raw HTTP
        /// Query API, it is formatted as epoch time in seconds. For example, <c>1698778057</c></para>
        /// </para>
        /// </summary>
        #if !MODULAR
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        #else
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true, Mandatory = true)]
        [System.Management.Automation.AllowNull]
        #endif
        [Amazon.PowerShell.Common.AWSRequiredParameter]
        public System.DateTime? EndTime { get; set; }
        #endregion
        
        #region Parameter StartTime
        /// <summary>
        /// <para>
        /// <para>The start of the time period to retrieve audit findings for. When used in a raw HTTP
        /// Query API, it is formatted as epoch time in seconds. For example, <c>1698778057</c></para>
        /// </para>
        /// </summary>
        #if !MODULAR
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        #else
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true, Mandatory = true)]
        [System.Management.Automation.AllowNull]
        #endif
        [Amazon.PowerShell.Common.AWSRequiredParameter]
        public System.DateTime? StartTime { get; set; }
        #endregion
        
        #region Parameter MaxResult
        /// <summary>
        /// <para>
        /// <para>The maximum number of audit findings to return in one operation. If you omit this
        /// parameter, the default of 10 is used.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [Alias("MaxResults")]
        public System.Int32? MaxResult { get; set; }
        #endregion
        
        #region Parameter NextToken
        /// <summary>
        /// <para>
        /// <para>Include this value, if it was returned by the previous operation, to get the next
        /// set of audit findings.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public System.String NextToken { get; set; }
        #endregion
        
        #region Parameter Select
        /// <summary>
        /// Use the -Select parameter to control the cmdlet output. The default value is 'AuditFindings'.
        /// Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ApplicationSignals.Model.ListAuditFindingsResponse).
        /// Specifying the name of a property of type Amazon.ApplicationSignals.Model.ListAuditFindingsResponse will result in that property being returned.
        /// Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public string Select { get; set; } = "AuditFindings";
        #endregion
        
        protected override void ProcessRecord()
        {
            this._AWSSignerType = "v4";
            base.ProcessRecord();
            
            var context = new CmdletContext();
            
            // allow for manipulation of parameters prior to loading into context
            PreExecutionContextLoad(context);
            
            if (ParameterWasBound(nameof(this.Select)))
            {
                context.Select = CreateSelectDelegate<Amazon.ApplicationSignals.Model.ListAuditFindingsResponse, GetCWASAuditFindingListCmdlet>(Select) ??
                    throw new System.ArgumentException("Invalid value for -Select parameter.", nameof(this.Select));
            }
            if (this.Auditor != null)
            {
                context.Auditor = new List<System.String>(this.Auditor);
            }
            if (this.AuditTarget != null)
            {
                context.AuditTarget = new List<Amazon.ApplicationSignals.Model.AuditTarget>(this.AuditTarget);
            }
            #if MODULAR
            if (this.AuditTarget == null && ParameterWasBound(nameof(this.AuditTarget)))
            {
                WriteWarning("You are passing $null as a value for parameter AuditTarget which is marked as required. In case you believe this parameter was incorrectly marked as required, report this by opening an issue at https://github.com/aws/aws-tools-for-powershell/issues.");
            }
            #endif
            context.EndTime = this.EndTime;
            #if MODULAR
            if (this.EndTime == null && ParameterWasBound(nameof(this.EndTime)))
            {
                WriteWarning("You are passing $null as a value for parameter EndTime which is marked as required. In case you believe this parameter was incorrectly marked as required, report this by opening an issue at https://github.com/aws/aws-tools-for-powershell/issues.");
            }
            #endif
            context.MaxResult = this.MaxResult;
            context.NextToken = this.NextToken;
            context.StartTime = this.StartTime;
            #if MODULAR
            if (this.StartTime == null && ParameterWasBound(nameof(this.StartTime)))
            {
                WriteWarning("You are passing $null as a value for parameter StartTime which is marked as required. In case you believe this parameter was incorrectly marked as required, report this by opening an issue at https://github.com/aws/aws-tools-for-powershell/issues.");
            }
            #endif
            
            // allow further manipulation of loaded context prior to processing
            PostExecutionContextLoad(context);
            
            var output = Execute(context) as CmdletOutput;
            ProcessOutput(output);
        }
        
        #region IExecutor Members
        
        public object Execute(ExecutorContext context)
        {
            var cmdletContext = context as CmdletContext;
            // create request
            var request = new Amazon.ApplicationSignals.Model.ListAuditFindingsRequest();
            
            if (cmdletContext.Auditor != null)
            {
                request.Auditors = cmdletContext.Auditor;
            }
            if (cmdletContext.AuditTarget != null)
            {
                request.AuditTargets = cmdletContext.AuditTarget;
            }
            if (cmdletContext.EndTime != null)
            {
                request.EndTime = cmdletContext.EndTime.Value;
            }
            if (cmdletContext.MaxResult != null)
            {
                request.MaxResults = cmdletContext.MaxResult.Value;
            }
            if (cmdletContext.NextToken != null)
            {
                request.NextToken = cmdletContext.NextToken;
            }
            if (cmdletContext.StartTime != null)
            {
                request.StartTime = cmdletContext.StartTime.Value;
            }
            
            CmdletOutput output;
            
            // issue call
            var client = Client ?? CreateClient(_CurrentCredentials, _RegionEndpoint);
            try
            {
                var response = CallAWSServiceOperation(client, request);
                object pipelineOutput = null;
                pipelineOutput = cmdletContext.Select(response, this);
                output = new CmdletOutput
                {
                    PipelineOutput = pipelineOutput,
                    ServiceResponse = response
                };
            }
            catch (Exception e)
            {
                output = new CmdletOutput { ErrorResponse = e };
            }
            
            return output;
        }
        
        public ExecutorContext CreateContext()
        {
            return new CmdletContext();
        }
        
        #endregion
        
        #region AWS Service Operation Call
        
        private Amazon.ApplicationSignals.Model.ListAuditFindingsResponse CallAWSServiceOperation(IAmazonApplicationSignals client, Amazon.ApplicationSignals.Model.ListAuditFindingsRequest request)
        {
            Utils.Common.WriteVerboseEndpointMessage(this, client.Config, "Amazon CloudWatch Application Signals", "ListAuditFindings");
            try
            {
                #if DESKTOP
                return client.ListAuditFindings(request);
                #elif CORECLR
                return client.ListAuditFindingsAsync(request).GetAwaiter().GetResult();
                #else
                        #error "Unknown build edition"
                #endif
            }
            catch (AmazonServiceException exc)
            {
                var webException = exc.InnerException as System.Net.WebException;
                if (webException != null)
                {
                    throw new Exception(Utils.Common.FormatNameResolutionFailureMessage(client.Config, webException.Message), webException);
                }
                throw;
            }
        }
        
        #endregion
        
        internal partial class CmdletContext : ExecutorContext
        {
            public List<System.String> Auditor { get; set; }
            public List<Amazon.ApplicationSignals.Model.AuditTarget> AuditTarget { get; set; }
            public System.DateTime? EndTime { get; set; }
            public System.Int32? MaxResult { get; set; }
            public System.String NextToken { get; set; }
            public System.DateTime? StartTime { get; set; }
            public System.Func<Amazon.ApplicationSignals.Model.ListAuditFindingsResponse, GetCWASAuditFindingListCmdlet, object> Select { get; set; } =
                (response, cmdlet) => response.AuditFindings;
        }
        
    }
}
