<Project ToolsVersion="4.0" 
	DefaultTargets="full-build"
	xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

    <PropertyGroup>
        <InternalBuildTools Condition="'$(InternalBuildTools)'==''">..\..\AWSDotNetBuildTools</InternalBuildTools>
		<VSToolsPath Condition="'$(VSToolsPath)' == ''">C:\Program Files (x86)\MSBuild\Microsoft\VisualStudio\v14.0</VSToolsPath>
    </PropertyGroup>
    
	<Import Project="$(InternalBuildTools)\references.targets" Condition="Exists('$(InternalBuildTools)\references.targets')" />
	<Import Project="$(InternalBuildTools)\common.targets" Condition="Exists('$(InternalBuildTools)\common.targets')" />

	<Import Project="$(VSToolsPath)\DotNet\Microsoft.DotNet.Props" Condition="'$(VSToolsPath)' != ''" />
	<Import Project="$(VSToolsPath)\DotNet\Microsoft.DotNet.targets" Condition="'$(VSToolsPath)' != ''" />
	
    <PropertyGroup>
        <!-- perform a release build by default -->
        <Configuration Condition="'$(Configuration)'==''">Release</Configuration>
        
        <!-- path to the root of the repo artifacts; locations for output content will be inferred from this -->
        <RootPath Condition="'$(RootPath)'==''">$(MSBuildProjectDirectory)\..</RootPath>

        <!-- the relative location (to the project file) of the generator executable -->
        <GeneratorPath>$(RootPath)\generator\AWSPSGenerator\bin\$(Configuration)</GeneratorPath>
        <Generator>AWSPSGenerator.exe</Generator>
        
        <!-- expected location of SDK assemblies to be consumed by generator; these should have been fetched via
             the get-references (=> get-reference-sdk) target
        -->
        <SDKAssembliesFolder Condition="'$(SDKAssembliesFolder)'==''">$(RootPath)\Include\sdk\assemblies</SDKAssembliesFolder>
        
        <!-- the domain in which the China (Beijing), cn-north-1, doc assets are hosted (injected into docs) -->
        <CNNorth1RegionDocsDomain Condition="'$(CNNorth1RegionDocsDomain)'==''">docs.amazonaws.cn</CNNorth1RegionDocsDomain>
        
        <!-- build log containing results of generator analysis of service operations -->
        <CmdletAnalysisLog Condition="'$(CmdletAnalysisLog)'==''">$(RootPath)\logs\CmdletAnalysis.log</CmdletAnalysisLog>
        
        <!-- default to build break if analysis of cmdlet output does not match service operation configuration -->
        <BreakOnOutputMismatchError Condition="'$(BreakOnOutputMismatchError)'==''">true</BreakOnOutputMismatchError>
        
        <!-- default location for artifacts consolidation -->
        <Deployment Condition="'$(Deployment)'==''">$(RootPath)\Deployment</Deployment>
        <DocDeployment Condition="'$(DocDeployment)'==''">$(RootPath)\DocDeployment</DocDeployment>
           
        <RunTests Condition="'$(RunTests)'==''">false</RunTests>
        <RunKeyScan Condition="'$(RunKeyScan)'==''">false</RunKeyScan>
        
        <UpdateVersions Condition="'$(UpdateVersions)'==''">false</UpdateVersions>
		<AWSPowerShellPatchNumber Condition="'$(AWSPowerShellVersionNumber)'==''">0</AWSPowerShellPatchNumber>
		
		<!-- temp flag allows us to turn off the netcore build output if we're running in master branch,
		     until netcore sdk is merged back to master
		-->
		<BuildNetCoreModule Condition="'$(BuildNetCoreModule)'==''">false</BuildNetCoreModule>
		
		<SignModule Condition="'$(SignModule)'==''">false</SignModule>
    </PropertyGroup>
    
	<Target Name="full-build" 
            DependsOnTargets="clean;build-generator;get-references;create-cmdlets;update-version;clean-sdkpackages;build-modules;copy-artifacts;sign-script-artifacts;run-tests;create-help;keyscan;save-build">
		<Message Text="Generates and then builds all cmdlets and PowerShell deployment artifacts, including native and web help files."/>
	</Target>

    <Target Name="restore-nuget" DependsOnTargets="GetSDKToolingInfoTarget">
        <Message Text="Restore nuget packages"/>
        <Exec Command="..\solutions\.nuget\NuGet.exe restore ..\modules\AWSPowerShell\AWSPowerShell.csproj"/>
        
		<Exec Command="&quot;$(SDKToolingExe)&quot; restore" 
			WorkingDirectory="..\modules\AWSPowerShell"
			Condition="'$(BuildNetCoreModule)'" />		
    </Target>
	
    <Target Name="build-generator">
		<Message Text="Building AWS PowerShell generator"/>
		<Exec Command="$(devenv2013) /Rebuild $(Configuration) ..\solutions\AWSPowerShellGenerator.sln"/>
    </Target>
    
	<Target Name="create-cmdlets" DependsOnTargets="build-generator;get-references">
		<Message Text="Generating cmdlets for all services"/>
		<Exec Command="$(GeneratorPath)\$(Generator) -sdk $(SDKAssembliesFolder)\net35 -rp $(RootPath) -t cmdlets -al $(CmdletAnalysisLog)" />
	</Target>

	<Target Name="build-modules" DependsOnTargets="restore-nuget">
		<Message Text="Building AWSPowerShell module editions"/>
		<MSBuild Projects="..\solutions\AWSPowerShell.sln"
                 Targets="Clean;Build"
                 Properties="Configuration=$(Configuration);ResolveNuGetPackages=false" />		

		<Message Text="Generating custom view formats ps1xml file"/>
		<Exec Command="$(GeneratorPath)\$(Generator) -sdk $(SDKAssembliesFolder)\net35 -rp $(RootPath) -t formats -e desktop" />
		
		<!-- clone the generated file for coreclr too -->
        <Copy SourceFiles="$(Deployment)\AWSPowerShell\AWSPowerShell.Format.ps1xml" 
              DestinationFolder="$(Deployment)\AWSPowerShell.NetCore"
			  Condition="'$(BuildNetCoreModule)'"
			  />
		 
	</Target>
    
    <Target Name="create-help" DependsOnTargets="create-pshelp;create-webhelp" />
    
	<Target Name="create-pshelp" DependsOnTargets="build-modules">
		<Message Text="Generating native PowerShell help file"/>
		<Exec Command="$(GeneratorPath)\$(Generator) -sdk $(SDKAssembliesFolder)\net35 -rp $(RootPath) -t pshelp -e desktop" />

		<!-- clone the generated file for coreclr too -->
        <Copy SourceFiles="$(Deployment)\AWSPowerShell\AWSPowerShell.dll-Help.xml" 
              DestinationFolder="$(Deployment)\AWSPowerShell.NetCore"
			  Condition="'$(BuildNetCoreModule)'"
			  />
		 
	</Target>
    
	<Target Name="create-webhelp" DependsOnTargets="build-modules">
		<Message Text="Generating web cmdlet reference"/>
		<Exec Command="$(GeneratorPath)\$(Generator) -sdk $(SDKAssembliesFolder)\net35 -rp $(RootPath) -t webhelp -e desktop" />

        <CreateSitemapTask
            SourceFolder="$(DocDeployment)\docs"
            BaseUrl="http://docs.aws.amazon.com/powershell/latest/reference/"
            OutputFile="$(DocDeployment)\docs\sitemap.xml"
            WaitForDebugger="false"
            />
        
		<ItemGroup>
			<FilesToZip Include="$(DocDeployment)\docs\**" />
		</ItemGroup>
		<Zip
			InputDirectory="$(DocDeployment)\docs"
			OutputFileName="$(DocDeployment)\help.zip" />
    </Target>
    
    <Target Name="run-tests" DependsOnTargets="copy-artifacts" Condition="'$(RunTests)'">
        <Message Text="Running tests"/>
        
        <RemoveDir Directories="$(RootPath)\test\results" />
        <MakeDir Directories="$(RootPath)\test\results" />
        <Exec Command="powershell -NoProfile $(RootPath)\test\RunTests.ps1" WorkingDirectory="$(RootPath)\test" />
        
        <ItemGroup>
            <TestResults Include="$(RootPath)\test\results\*.*"/>
        </ItemGroup>
        <Copy SourceFiles="@(TestResults)" DestinationFolder="$(Deployment)" />
    </Target>
    
    <Target Name="copy-artifacts" DependsOnTargets="build-modules">
		<PropertyGroup>
			<BuildSourceFolder>bin\$(Configuration)\desktop\</BuildSourceFolder>
			<DeploymentFolder>$(Deployment)\AWSPowerShell\</DeploymentFolder>
		</PropertyGroup>
		
		<Message Text="Consolidating Desktop edition artifacts from $(BuildSourceFolder) to $(DeploymentFolder)"/>
	
        <ItemGroup>
            <SDKAssemblies Include="$(SDKAssembliesFolder)\net35\*.dll" 
                           Exclude="$(SDKAssembliesFolder)\net35\*.Glacier.*;$(SDKAssembliesFolder)\net35\*.CognitoSync.*;$(SDKAssembliesFolder)\net35\*.SimpleDB.*"/>
        </ItemGroup>
        
        <Copy SourceFiles="$(RootPath)\modules\AWSPowerShell\AWSPowerShell.psd1"
              DestinationFolder="$(DeploymentFolder)"/>
        <Copy SourceFiles="$(RootPath)\modules\AWSPowerShell\$(BuildSourceFolder)\AWSPowerShell.dll"
              DestinationFolder="$(DeploymentFolder)"/>
		<!-- the ndoc xml file is needed in separate build process to generate and push web docs to github -->
        <Copy SourceFiles="$(RootPath)\modules\AWSPowerShell\$(BuildSourceFolder)\AWSPowerShell.xml"
              DestinationFolder="$(DeploymentFolder)"/>
        <Copy SourceFiles="$(RootPath)\modules\AWSPowerShell\AWSPowerShell.TypeExtensions.ps1xml"
              DestinationFolder="$(DeploymentFolder)"/>
        <Copy SourceFiles="@(SDKAssemblies)"
              DestinationFolder="$(DeploymentFolder)"/>
        <Copy SourceFiles="$(RootPath)\ThirdParty\log4net.dll"
              DestinationFolder="$(DeploymentFolder)"/>
        <Copy SourceFiles="$(RootPath)\modules\AWSPowerShell\AWSAliases.ps1"
              DestinationFolder="$(DeploymentFolder)"/>
        <Copy SourceFiles="$(RootPath)\CHANGELOG.md"
              DestinationFolder="$(DeploymentFolder)"/>

        <Copy SourceFiles="$(RootPath)\modules\AWSPowerShell\AWSPowerShellCompleters.psm1"
              DestinationFolder="$(DeploymentFolder)"/>

    </Target>

	<Target Name="copy-coreclr-artifacts" DependsOnTargets="build-modules;" Condition="'$(BuildNetCoreModule)'">
		<PropertyGroup>
			<!-- <BuildSourceFolder>bin\$(Configuration)\coreclr\</BuildSourceFolder> -->
			<BuildSourceFolder>bin\$(Configuration)\coreclr\AWSPowerShell\bin\$(Configuration)\netstandard1.6\</BuildSourceFolder>
			<DeploymentFolder>$(Deployment)\AWSPowerShell.NetCore\</DeploymentFolder>
		</PropertyGroup>
		
		<Message Text="Consolidating CoreCLR edition artifacts from $(BuildSourceFolder) to $(DeploymentFolder)"/>
	
        <ItemGroup>
            <NetCoreSDKAssemblies Include="$(SDKAssembliesFolder)\netstandard1.3\*.dll" 
                           Exclude="$(SDKAssembliesFolder)\netstandard1.3\*.Glacier.*;$(SDKAssembliesFolder)\netstandard1.3\*.CognitoSync.*;$(SDKAssembliesFolder)\netstandard1.3\*.SimpleDB.*"/>
        </ItemGroup>
        
        <Copy SourceFiles="$(RootPath)\modules\AWSPowerShell\AWSPowerShell.NetCore.psd1"
              DestinationFolder="$(DeploymentFolder)"/>
        <Copy SourceFiles="$(RootPath)\modules\AWSPowerShell\$(BuildSourceFolder)\AWSPowerShell.NetCore.dll"
              DestinationFolder="$(DeploymentFolder)"/>

        <Copy SourceFiles="$(RootPath)\modules\AWSPowerShell\AWSPowerShell.TypeExtensions.ps1xml"
              DestinationFolder="$(DeploymentFolder)"/>
        <Copy SourceFiles="@(NetCoreSDKAssemblies)"
              DestinationFolder="$(DeploymentFolder)"/>
		<!--
        <Copy SourceFiles="$(RootPath)\ThirdParty\log4net.dll"
              DestinationFolder="$(DeploymentFolder)"/>
		-->
        <Copy SourceFiles="$(RootPath)\modules\AWSPowerShell\AWSAliases.ps1"
              DestinationFolder="$(DeploymentFolder)"/>
        <Copy SourceFiles="$(RootPath)\CHANGELOG.md"
              DestinationFolder="$(DeploymentFolder)"/>
              
		<Copy SourceFiles="$(RootPath)\modules\AWSPowerShell\AWSPowerShellCompleters.psm1"
        	  DestinationFolder="$(DeploymentFolder)"/>
			
    </Target>
	
	<Target Name="update-version" DependsOnTargets="build-tools" Condition="$(UpdateVersions)">	
        <!-- grab the logical SDK product version and use the first 3 components,
             appending our own patch number to make the final PowerShell version
        -->
         <GetSdkProductVersionTask 
            SdkVersionsFile="..\Include\sdk\_sdk-versions.json" 
            OutputFile="$(RootPath)\AWSSDK.v3.Info.xml" 
        />
        <XmlPeek
            XmlInputPath="$(RootPath)\AWSSDK.v3.Info.xml"
            Query="/output/version/text()">
            <Output TaskParameter="Result" PropertyName="SDKV3Version" />
        </XmlPeek>
        <Delete Files="$(RootPath)\AWSSDK.v3.Info.xml" />
	
        <PropertyGroup>
            <!-- see https://thedevstop.wordpress.com/2013/07/24/msbuild-string-manipulation-chaos/ -->
            <Major>$(SDKV3Version.Split('.')[0])</Major>
            <Minor>$(SDKV3Version.Split('.')[1])</Minor>
            <Build>$(SDKV3Version.Split('.')[2])</Build>        
            
            <AWSPowerShellVersionNumber>$(Major).$(Minor).$(Build).$(AWSPowerShellPatchNumber)</AWSPowerShellVersionNumber>
        </PropertyGroup>
        
		<UpdatePowerShellVersionTask
			RepositoryRoot="$(MSBuildProjectDirectory)\.."
            AssemblyInfoPaths="modules\AWSPowerShell"
			VersionNumber="$(AWSPowerShellVersionNumber)"
			/>
	</Target>

	<Target Name="sign-script-artifacts" Condition="$(SignModule)" DependsOnTargets="copy-artifacts">
		<PropertyGroup>
			<DesktopDeploymentFolder>$(Deployment)\AWSPowerShell\</DesktopDeploymentFolder>
			<NetCoreDeploymentFolder>$(Deployment)\AWSPowerShell.NetCore\</NetCoreDeploymentFolder>
			<SigningScriptArgs>-ExecutionPolicy Unrestricted -NoProfile -File $(MSBuildProjectDirectory)\AuthenticodeSign.ps1</SigningScriptArgs>
		</PropertyGroup>
		
		<Message Text="Authenticode signing module and script artifacts for Desktop edition" />
		<Exec LogStandardErrorAsError="true"
              Command="$(powershell) $(SigningScriptArgs) -ModuleFolder $(DesktopDeploymentFolder)" />
			  
		<Message Text="Authenticode signing module and script artifacts for NetCore edition" />
		<Exec LogStandardErrorAsError="true"
              Command="$(powershell) $(SigningScriptArgs) -ModuleFolder $(NetCoreDeploymentFolder)" 
			  Condition="'$(BuildNetCoreModule)'"/>
	</Target>
	
    <Target Name="keyscan" Condition="$(RunKeyScan)" DependsOnTargets="build-tools">
        <ItemGroup>
            <PrivateKeyException Include="generator\AWSPSGeneratorLib\HelpMaterials\Examples\EC2\New-EC2KeyPair.xml" />
            <PrivateKeyException Include="generator\AWSPSGeneratorLib\HelpMaterials\Examples\IAM\Get-IAMServerCertificate.xml" />
            <PrivateKeyException Include="generator\AWSPSGeneratorLib\HelpMaterials\Examples\IAM\Get-IAMSigningCertificate.xml" />
            <PrivateKeyException Include="generator\AWSPSGeneratorLib\HelpMaterials\Examples\IAM\Publish-IAMSigningCertificate.xml" />
            <PrivateKeyException Include="Deployment\AWSPowerShell\AWSPowerShell.dll-Help.xml" />
            <PrivateKeyException Include="Deployment\AWSPowerShell.NetCore\AWSPowerShell.dll-Help.xml" />
            <PrivateKeyException Include="DocDeployment\docs\items\New-EC2KeyPair.html" />
            <PrivateKeyException Include="DocDeployment\docs\items\Get-IAMServerCertificate.html" />
            <PrivateKeyException Include="DocDeployment\docs\items\Get-IAMSigningCertificate.html" />
            <PrivateKeyException Include="DocDeployment\docs\items\Publish-IAMSigningCertificate.html" />
			
		    <PrivateKeyException Include="Include\sdk\Models\acm-2015-12-08.normal.json" />
            <PrivateKeyException Include="Include\sdk\Models\ec2-2014-02-01.normal.json" />
            <PrivateKeyException Include="Include\sdk\Models\iam-2010-05-08.normal.json" />
		
        </ItemGroup>
        
        <ItemGroup>
            <FileException Include="test\temp\test-credentials-correct" />
			<FileException Include="Include\sdk\Models\elasticbeanstalk.examples.json" />
			<FileException Include="Include\sdk\Models\elasticbeanstalk.customizations.json" />
        </ItemGroup>
        
        <KeyScannerTask 
            Folder="$(MSBuildProjectDirectory)\.."
            FilePattern="**"
            PrivateKeyExceptions="@(PrivateKeyException)"
            FileExceptions="@(FileException)"
            ParallelScan="true"
            />
    </Target>
    
	<!-- Works around a bug in 'dotnet build' where it doesn't obey custom packages
	     folder (and doesn't support 'packages' property like 'dotnet restore' does).
		 MS plan to fix in 1.1 release. This bug can lead to us trying to build against
		 out-of-date sdk nuget packages, even though we've done a fetch of the last
		 staged sdk build.
	-->
	<Target Name="clean-sdkpackages" DependsOnTargets="build-tools">
		<Message Text="Cleaning SDK packages prior to package restore/module builds" />
		
		<CleanCachedSDKPackagesTask />

		<!-- For good measure, I'm also blowing away the local packages folder; it has
		     little perf impact on the build and ensures we get the correct packages 
		     from the sdk include feed at all times however we run restore.
		-->
		<RemoveDir Directories="$(MSBuildProjectDirectory)\..\packages" />
	</Target>
	
	<Target Name="save-build"  DependsOnTargets="build-tools">		
		<SaveBuildArtifactTask
			RepositoryRoot="$(MSBuildProjectDirectory)\.."
			BuildArtifactType="powershell"
			GitBranch="$(SaveReferenceGitBranch)"
			LocalArchiveRootFolder="$(LocalArchiveRootFolder)"
			/>
	</Target>
	
	<Target Name="get-references"  DependsOnTargets="build-tools">		
		<MSBuild Projects ="$(MSBuildProjectFullPath)" Targets="get-reference-sdk" Properties="TargetRepository=$(MSBuildProjectDirectory)\.."/>
	</Target>
</Project>