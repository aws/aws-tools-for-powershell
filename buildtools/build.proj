<Project ToolsVersion="4.0" DefaultTargets="full-build" 
    xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

    <PropertyGroup>
        <InternalBuildTools Condition="'$(InternalBuildTools)'==''">..\..\AWSDotNetBuildTools</InternalBuildTools>
    </PropertyGroup>

    <Import Project="$(InternalBuildTools)\references.targets" Condition="Exists('$(InternalBuildTools)\references.targets')" />
    <Import Project="$(InternalBuildTools)\common.targets" Condition="Exists('$(InternalBuildTools)\common.targets')" />

    <PropertyGroup>
        <!-- perform a release build by default -->
        <Configuration Condition="'$(Configuration)'==''">Release</Configuration>

        <!-- fetch sdk binaries by default; if set false, we'll build with what we have in Include folder -->
        <EnableGetReferences>false</EnableGetReferences>
        
        <!-- cleans all NuGet caches by default; if set false, cleaning the cache is skipped (this is useful when locally building with other projects open in Visual Studio or other projects building) -->
        <CleanNugetCache>true</CleanNugetCache>

        <!-- deletes the Include\sdk\NuGet and Include\sdk\ExtractedNuGet folders; set to false if the content of these folders is pre-filled in with the packages to be used by the build -->
        <CleanSdkReferences Condition="'$(CleanSdkReferences)'==''">true</CleanSdkReferences>

        <!-- path to the root of the repo artifacts; locations for output content will be inferred from this -->
        <RootPath Condition="'$(RootPath)'==''">$(MSBuildProjectDirectory)\..</RootPath>

        <!-- the relative location (to the project file) of the generator executable -->
        <GeneratorPath>$(RootPath)\generator\AWSPSGenerator\bin\$(Configuration)\net46</GeneratorPath>
        <Generator>AWSPSGenerator.exe</Generator>

        <!-- expected location of SDK assemblies to be consumed by generator; these should have been fetched via
             the get-references (=> get-reference-sdk) target
        -->
        <SDKNuGetFolder Condition="'$(SDKNuGetFolder)'==''">$(RootPath)\Include\sdk\nuget</SDKNuGetFolder>

        <!-- the domain in which the China (Beijing), cn-north-1, doc assets are hosted (injected into docs) -->
        <CNNorth1RegionDocsDomain Condition="'$(CNNorth1RegionDocsDomain)'==''">docs.amazonaws.cn</CNNorth1RegionDocsDomain>

        <!-- build log containing results of generator analysis of service operations -->
        <CmdletAnalysisLog Condition="'$(CmdletAnalysisLog)'==''">$(RootPath)\logs\CmdletAnalysis.log</CmdletAnalysisLog>

        <!-- default to build break if analysis of cmdlet output does not match service operation configuration -->
        <BreakOnOutputMismatchError Condition="'$(BreakOnOutputMismatchError)'==''">true</BreakOnOutputMismatchError>

        <!-- default to build break if we see unconfigured sdk client operations -->
        <BreakOnUnknownOperations Condition="'$(BreakOnUnknownOp)' == ''">true</BreakOnUnknownOperations>

        <!-- set to true to build without reflecting over the service client to generate cmdlets -->
        <SkipCmdletGeneration Condition="'$(SkipCmdletGeneration)'==''">false</SkipCmdletGeneration>
        
        <!-- set to false to skip generating the release notes draft -->
        <DraftReleaseNotes Condition="'$(DraftReleaseNotes)'==''">true</DraftReleaseNotes>

        <!-- default location for artifacts consolidation -->
        <Deployment Condition="'$(Deployment)'==''">$(RootPath)\Deployment</Deployment>
        <DesktopDeploymentArtifacts>$(Deployment)\AWSPowerShell\</DesktopDeploymentArtifacts>
        <NetCoreDeploymentArtifacts>$(Deployment)\AWSPowerShell.NetCore\</NetCoreDeploymentArtifacts>

        <DocDeployment Condition="'$(DocDeployment)'==''">$(RootPath)\DocDeployment</DocDeployment>

        <RunTests Condition="'$(RunTests)'==''">false</RunTests>
        <RunKeyScan Condition="'$(RunKeyScan)'==''">false</RunKeyScan>

        <UpdateVersions Condition="'$(UpdateVersions)'==''">false</UpdateVersions>
        <AWSPowerShellPatchNumber Condition="'$(AWSPowerShellVersionNumber)'==''">0</AWSPowerShellPatchNumber>

        <SignModule Condition="'$(SignModule)'==''">false</SignModule>
    </PropertyGroup>

    <Target Name="full-build" DependsOnTargets="clean;clean-sdk-references;get-references;build-generator;create-cmdlets;update-version;build-modules;copy-desktop-artifacts;draft-release-notes;copy-coreclr-artifacts;copy-tests;copy-postbuild-scripts;patch-manifests;sign-script-artifacts;create-help;run-tests;keyscan;save-build">
        <Message Text="Generates and then builds all cmdlets and PowerShell deployment artifacts, including native and web help files."/>
    </Target>

    <Target Name="clean-sdk-references" Condition="'$(CleanSdkReferences)'">
        <RemoveDir Directories="$(SDKNuGetFolder)\..\ExtractedNuGet" />
        <ItemGroup>
            <FilesToClean Include="$(SDKNuGetFolder)\**\*"/>
        </ItemGroup>
        <Delete Files="@(FilesToClean)" />
    
        <MakeDir Directories="$(SDKNuGetFolder)"/>
    </Target>

    <!-- If a package is cached in the global NuGet cache it will be used even if it is different (same version but different) than the one pointed to by NuGet.Config, for this reason it is best to clean the caches before restoring  -->
    <Target Name="clean-nuget-cache" Condition="'$(CleanNugetCache)'">
        <Message Text="Clean NuGet caches"/>
        <Exec Command="dotnet nuget locals all --clear" />
    </Target>

    <Target Name="build-generator" DependsOnTargets="clean-nuget-cache">
        <Message Text="Building AWS PowerShell generator"/>
        <Exec Command="dotnet build -c $(Configuration) --force --no-incremental --configfile ..\NuGet.Config --no-cache ..\solutions\AWSPowerShellGenerator.sln"/>    
    </Target>

    <Target Name="create-cmdlets" DependsOnTargets="build-generator;get-references">
        <Message Text="Generating cmdlets for all services"/>
        <Exec Command="$(GeneratorPath)\$(Generator) -sdk $(SDKNuGetFolder) -rp $(RootPath) -t cmdlets -al $(CmdletAnalysisLog) -bu $(BreakOnUnknownOperations) -scg $(SkipCmdletGeneration)" />
    </Target>

    <Target Name="build-modules" DependsOnTargets="build-desktop-module;build-netcore-module" />

    <Target Name="build-desktop-module" DependsOnTargets="clean-nuget-cache">
        <Message Text="Building AWSPowerShell desktop module edition"/>
        <Exec Command="dotnet build -c $(Configuration) -f net35 --force --no-incremental --configfile ..\NuGet.Config --no-cache ..\solutions\AWSPowerShell.sln"/>   

        <Message Text="Generating custom view formats ps1xml file"/>
        <Exec Command="$(GeneratorPath)\$(Generator) -sdk $(SDKNuGetFolder) -rp $(RootPath) -t formats -e desktop" />

        <!-- clone the generated file for coreclr too -->
        <Copy SourceFiles="$(DesktopDeploymentArtifacts)\AWSPowerShell.Format.ps1xml" DestinationFolder="$(NetCoreDeploymentArtifacts)" />
    </Target>

    <Target Name="build-netcore-module" DependsOnTargets="clean-nuget-cache">
        <Message Text="Building AWSPowerShell netcore module edition"/>
        <Exec Command="dotnet build -c $(Configuration) -f netstandard2.0  --force --no-incremental --configfile ..\NuGet.Config --no-cache ..\solutions\AWSPowerShell.sln"/>   
    </Target>

    <Target Name="create-help" DependsOnTargets="create-pshelp;create-webhelp" />

    <Target Name="create-pshelp" DependsOnTargets="build-modules">
        <Message Text="Generating native PowerShell help file"/>
        <Exec Command="$(GeneratorPath)\$(Generator) -sdk $(SDKNuGetFolder) -rp $(RootPath) -t pshelp -e desktop" />

        <!-- clone the generated file for coreclr too -->
        <Copy SourceFiles="$(DesktopDeploymentArtifacts)\AWSPowerShell.dll-Help.xml" DestinationFiles="$(NetCoreDeploymentArtifacts)\AWSPowerShell.NetCore.dll-Help.xml" />

    </Target>

    <Target Name="create-webhelp" DependsOnTargets="build-modules">
        <Message Text="Generating web cmdlet reference"/>
        <Exec Command="$(GeneratorPath)\$(Generator) -sdk $(SDKNuGetFolder) -rp $(RootPath) -t webhelp -e desktop" />

        <CreateSitemapTask SourceFolder="$(DocDeployment)\docs" BaseUrl="http://docs.aws.amazon.com/powershell/latest/reference/" OutputFile="$(DocDeployment)\docs\sitemap.xml" WaitForDebugger="false" />

        <ItemGroup>
            <FilesToZip Include="$(DocDeployment)\docs\**" />
        </ItemGroup>
        <Zip InputDirectory="$(DocDeployment)\docs" OutputFileName="$(DocDeployment)\help.zip" />
    </Target>

    <Target Name="run-tests" DependsOnTargets="copy-desktop-artifacts;copy-coreclr-artifacts" Condition="'$(RunTests)'">
        <Message Text="Running tests"/>

        <RemoveDir Directories="$(RootPath)\tests\results" />
        <MakeDir Directories="$(RootPath)\tests\results" />
        <Exec Command="powershell -NoProfile Invoke-Pester -EnableExit -OutputFile results\PesterResults.xml -OutputFormat NUnitXML -ExcludeTag Disabled" WorkingDirectory="$(RootPath)\tests" />

        <ItemGroup>
            <TestResults Include="$(RootPath)\test\results\*.*"/>
        </ItemGroup>
        <Copy SourceFiles="@(TestResults)" DestinationFolder="$(Deployment)" />
    </Target>

    <Target Name="copy-desktop-artifacts" DependsOnTargets="build-modules">
        <PropertyGroup>
            <BuildSourceFolder>bin\$(Configuration)\net35\</BuildSourceFolder>
        </PropertyGroup>

        <Message Text="Consolidating Desktop edition artifacts from $(BuildSourceFolder) to $(DesktopDeploymentArtifacts)"/>

        <ItemGroup>
            <SDKAssemblies Include="$(SDKNuGetFolder)\..\ExtractedNuGet\net35\AWSSDK.*.dll" />
        </ItemGroup>

        <Copy SourceFiles="$(RootPath)\modules\AWSPowerShell\AWSPowerShell.psd1" DestinationFolder="$(DesktopDeploymentArtifacts)"/>
        <Copy SourceFiles="$(RootPath)\modules\AWSPowerShell\$(BuildSourceFolder)\AWSPowerShell.dll" DestinationFolder="$(DesktopDeploymentArtifacts)"/>
        <!-- the ndoc xml file is needed in separate build process to generate and push web docs to github -->
        <Copy SourceFiles="$(RootPath)\modules\AWSPowerShell\$(BuildSourceFolder)\AWSPowerShell.xml" DestinationFolder="$(DesktopDeploymentArtifacts)"/>
        <Copy SourceFiles="$(RootPath)\modules\AWSPowerShell\AWSPowerShell.TypeExtensions.ps1xml" DestinationFolder="$(DesktopDeploymentArtifacts)"/>
        <Copy SourceFiles="@(SDKAssemblies)" DestinationFolder="$(DesktopDeploymentArtifacts)"/>
        <Copy SourceFiles="$(RootPath)\ThirdParty\log4net.dll" DestinationFolder="$(DesktopDeploymentArtifacts)"/>
        <Copy SourceFiles="$(RootPath)\modules\AWSPowerShell\AWSAliases.ps1" DestinationFolder="$(DesktopDeploymentArtifacts)"/>
        <Copy SourceFiles="$(RootPath)\CHANGELOG.txt" DestinationFolder="$(DesktopDeploymentArtifacts)"/>

        <Copy SourceFiles="$(RootPath)\modules\AWSPowerShell\AWSPowerShellCompleters.psm1" DestinationFolder="$(DesktopDeploymentArtifacts)"/>
        <Copy SourceFiles="$(RootPath)\modules\AWSPowerShell\AWSPowerShellLegacyAliases.psm1" DestinationFolder="$(DesktopDeploymentArtifacts)"/>

    </Target>

    <Target Name="copy-coreclr-artifacts" DependsOnTargets="build-modules">
        <PropertyGroup>
            <BuildSourceFolder>bin\$(Configuration)\netstandard2.0\</BuildSourceFolder>
        </PropertyGroup>

        <Message Text="Consolidating CoreCLR edition artifacts from $(BuildSourceFolder) to $(NetCoreDeploymentArtifacts)"/>

        <ItemGroup>
            <NetCoreSDKAssemblies Include="$(SDKNuGetFolder)\..\ExtractedNuGet\netstandard1.3\AWSSDK.*.dll" />
        </ItemGroup>

        <Copy SourceFiles="$(RootPath)\modules\AWSPowerShell\AWSPowerShell.NetCore.psd1" DestinationFolder="$(NetCoreDeploymentArtifacts)"/>
        <Copy SourceFiles="$(RootPath)\modules\AWSPowerShell\$(BuildSourceFolder)\AWSPowerShell.NetCore.dll" DestinationFolder="$(NetCoreDeploymentArtifacts)"/>

        <Copy SourceFiles="$(RootPath)\modules\AWSPowerShell\AWSPowerShell.TypeExtensions.ps1xml" DestinationFolder="$(NetCoreDeploymentArtifacts)"/>
        <Copy SourceFiles="@(NetCoreSDKAssemblies)" DestinationFolder="$(NetCoreDeploymentArtifacts)"/>
        
        <!-- <Copy SourceFiles="$(RootPath)\ThirdParty\log4net.dll" DestinationFolder="$(NetCoreDeploymentArtifacts)"/> -->
        <Copy SourceFiles="$(RootPath)\modules\AWSPowerShell\AWSAliases.ps1" DestinationFolder="$(NetCoreDeploymentArtifacts)"/>
        <Copy SourceFiles="$(RootPath)\CHANGELOG.txt" DestinationFolder="$(NetCoreDeploymentArtifacts)"/>

        <Copy SourceFiles="$(RootPath)\modules\AWSPowerShell\AWSPowerShellCompleters.psm1" DestinationFolder="$(NetCoreDeploymentArtifacts)"/>

        <Copy SourceFiles="$(RootPath)\modules\AWSPowerShell\AWSPowerShellLegacyAliases.psm1" DestinationFolder="$(NetCoreDeploymentArtifacts)"/>
    </Target>

    <Target Name="copy-tests">
        <PropertyGroup>
            <TestSourceFolder>$(RootPath)\Tests</TestSourceFolder>
        </PropertyGroup>

        <ItemGroup>
            <TestFiles Include="$(TestSourceFolder)\**\*.*" />
        </ItemGroup>

        <Copy SourceFiles="@(TestFiles)" DestinationFolder="$(RootPath)\Deployment\Tests\%(RecursiveDir)" />
    </Target>

    <Target Name="copy-postbuild-scripts">
        <ItemGroup>
            <PostBuildScripts Include="$(RootPath)\buildtools\Confirm-StagedArtifact.ps1" />
            <PostBuildScripts Include="$(RootPath)\buildtools\Publish-StagedArtifact.ps1" />
        </ItemGroup>

        <Copy SourceFiles="@(PostBuildScripts)" DestinationFolder="$(RootPath)\Deployment" />

    </Target>

    <Target Name="patch-manifests" DependsOnTargets="copy-desktop-artifacts;copy-coreclr-artifacts">
        <!-- TEMP DISABLE WHILE WE RESOLVE > 4000 CMDLETS LIMIT ISSUE
        <Message Text="Building manifest patch util for desktop module"/>
        <Exec Command="dotnet build -c $(Configuration) - -force - -no-incremental - -configfile ..\NuGet.Config - -no-cache ..\buildtools\Tools\DesktopManifestPatcher\DesktopManifestPatcher.sln"/>   

        <Message Text="Patching desktop manifest to declare exported cmdlets" />
        <Exec Command="$(RootPath)\buildtools\Tools\DesktopManifestPatcher\DesktopManifestPatcher\bin\$(Configuration)\net40\DesktopManifestPatcher.exe $(DesktopDeploymentArtifacts)" />
    
        <Message Text="Building manifest patch util for netcore module"/>
        <Exec Command="dotnet build -c $(Configuration) - -force - -no-incremental - -configfile ..\NuGet.Config - -no-cache ..\buildtools\Tools\NetCoreManifestPatcher\NetCoreManifestPatcher.sln"/>
        
        <Message Text="Patching netcore manifest to declare exported cmdlets" />
        <Exec Command="dotnet $(RootPath)\buildtools\Tools\NetCoreManifestPatcher\NetCoreManifestPatcher\bin\$(Configuration)\netcoreapp2.0\NetCoreManifestPatcher.dll $(NetCoreDeploymentArtifacts)" />
        -->
    </Target>

    <Target Name="update-version" DependsOnTargets="build-tools" Condition="$(UpdateVersions)">
        <!-- grab the logical SDK product version and use the first 3 components,
             appending our own patch number to make the final PowerShell version
        -->
        <GetSdkProductVersionTask SdkVersionsFile="..\Include\sdk\_sdk-versions.json" OutputFile="$(RootPath)\AWSSDK.v3.Info.xml" />
        <XmlPeek XmlInputPath="$(RootPath)\AWSSDK.v3.Info.xml" Query="/output/version/text()">
            <Output TaskParameter="Result" PropertyName="SDKV3Version" />
        </XmlPeek>
        <Delete Files="$(RootPath)\AWSSDK.v3.Info.xml" />

        <PropertyGroup>
            <!-- see https://thedevstop.wordpress.com/2013/07/24/msbuild-string-manipulation-chaos/ -->
            <Major>$(SDKV3Version.Split('.')[0])</Major>
            <Minor>$(SDKV3Version.Split('.')[1])</Minor>
            <Build>$(SDKV3Version.Split('.')[2])</Build>

            <AWSPowerShellVersionNumber>$(Major).$(Minor).$(Build).$(AWSPowerShellPatchNumber)</AWSPowerShellVersionNumber>
        </PropertyGroup>

        <UpdatePowerShellVersionTask RepositoryRoot="$(MSBuildProjectDirectory)\.." AssemblyInfoPaths="modules\AWSPowerShell" VersionNumber="$(AWSPowerShellVersionNumber)" />

        <!-- emit the version data into a json file that gets uploaded to S3. EC2 then
             reads this to know if it needs to update EC2 images during image prep.
        -->
        <PropertyGroup>
            <VersionFileArgs>$(AWSPowerShellVersionNumber) $(Deployment)\awspowershell_versioninfo.json</VersionFileArgs>
        </PropertyGroup>

        <Exec LogStandardErrorAsError="true" Command="$(powershell) -ExecutionPolicy Unrestricted -NoProfile -File $(MSBuildProjectDirectory)\WriteVersionsFile.ps1 $(VersionFileArgs)"/>
    </Target>
    
    <Target Name="sign-script-artifacts" Condition="$(SignModule)" DependsOnTargets="copy-desktop-artifacts;copy-coreclr-artifacts;patch-manifests">
        <PropertyGroup>
            <SigningScriptArgs>-ExecutionPolicy Unrestricted -NoProfile -Command "$(InternalBuildTools)\BuildScripts\Set-AuthenticodeSignature.ps1" -Filter "*.ps1","*.psm1","*.psd1","*.ps1xml"</SigningScriptArgs>
        </PropertyGroup>

        <Message Text="Authenticode signing module and script artifacts for Desktop edition" />
        <Exec LogStandardErrorAsError="true" Command="$(powershell) $(SigningScriptArgs) -Path $(DesktopDeploymentArtifacts)" />

        <Message Text="Authenticode signing module and script artifacts for NetCore edition" />
        <Exec LogStandardErrorAsError="true" Command="$(powershell) $(SigningScriptArgs) -Path $(NetCoreDeploymentArtifacts)" />
    </Target>

    <Target Name="keyscan" Condition="$(RunKeyScan)" DependsOnTargets="build-tools">
        <!-- note that paths to files for the scanner should be relative to build root -->
        <ItemGroup>
            <PrivateKeyException Include="generator\AWSPSGeneratorLib\HelpMaterials\Examples\EC2\New-EC2KeyPair.xml" />
            <PrivateKeyException Include="generator\AWSPSGeneratorLib\HelpMaterials\Examples\IAM\Get-IAMServerCertificate.xml" />
            <PrivateKeyException Include="generator\AWSPSGeneratorLib\HelpMaterials\Examples\IAM\Get-IAMSigningCertificate.xml" />
            <PrivateKeyException Include="generator\AWSPSGeneratorLib\HelpMaterials\Examples\IAM\Publish-IAMSigningCertificate.xml" />
            <PrivateKeyException Include="Deployment\AWSPowerShell\AWSPowerShell.dll-Help.xml" />
            <PrivateKeyException Include="Deployment\AWSPowerShell.NetCore\AWSPowerShell.NetCore.dll-Help.xml" />
            <PrivateKeyException Include="DocDeployment\docs\items\New-EC2KeyPair.html" />
            <PrivateKeyException Include="DocDeployment\docs\items\Get-IAMServerCertificate.html" />
            <PrivateKeyException Include="DocDeployment\docs\items\Get-IAMSigningCertificate.html" />
            <PrivateKeyException Include="DocDeployment\docs\items\Publish-IAMSigningCertificate.html" />

        </ItemGroup>

        <ItemGroup>
            <FileException Include="test\temp\test-credentials-correct" />

            <FileException Include="Include\sdk\Models\elasticbeanstalk.examples.json" />
            <FileException Include="Include\sdk\Models\elasticbeanstalk.customizations.json" />

            <FileException Include="Deployment\AWSPowerShell\AWSPowerShell.psd1" />
            <FileException Include="Deployment\AWSPowerShell\AWSPowerShell.TypeExtensions.ps1xml" />
            <FileException Include="Deployment\AWSPowerShell\AWSPowerShell.Format.ps1xml" />
            <FileException Include="Deployment\AWSPowerShell\AWSPowerShellCompleters.psm1" />
            <FileException Include="Deployment\AWSPowerShell\AWSPowerShellLegacyAliases.psm1" />
            <FileException Include="Deployment\AWSPowerShell\AWSAliases.ps1" />

            <FileException Include="Deployment\AWSPowerShell.NetCore\AWSPowerShell.NetCore.psd1" />
            <FileException Include="Deployment\AWSPowerShell.NetCore\AWSPowerShell.TypeExtensions.ps1xml" />
            <FileException Include="Deployment\AWSPowerShell.NetCore\AWSPowerShell.Format.ps1xml" />
            <FileException Include="Deployment\AWSPowerShell.NetCore\AWSPowerShellCompleters.psm1" />
            <FileException Include="Deployment\AWSPowerShell.NetCore\AWSPowerShellLegacyAliases.psm1" />
            <FileException Include="Deployment\AWSPowerShell.NetCore\AWSAliases.ps1" />
        </ItemGroup>

        <ItemGroup>
            <FolderException Include="Include\sdk\models"/>
        </ItemGroup>

        <KeyScannerTask Folder="$(MSBuildProjectDirectory)\.." FilePattern="**" PrivateKeyExceptions="@(PrivateKeyException)" FileExceptions="@(FileException)" FolderExceptions="@(FolderException)" ParallelScan="true" />
    </Target>

    <Target Name="save-build" DependsOnTargets="build-tools">
        <SaveBuildArtifactTask RepositoryRoot="$(MSBuildProjectDirectory)\.." BuildArtifactType="powershell" GitBranch="$(SaveReferenceGitBranch)" LocalArchiveRootFolder="$(LocalArchiveRootFolder)" />
    </Target>

    <Target Name="get-references" DependsOnTargets="build-tools" Condition="$(EnableGetReferences)">
        <MSBuild Projects ="$(MSBuildProjectFullPath)" Targets="get-reference-sdk" Properties="TargetRepository=$(MSBuildProjectDirectory)\.."/>
    </Target>
    
    <Target Name="draft-release-notes" Condition="$(DraftReleaseNotes)">
        <Exec Command="dotnet build -c Release --no-incremental PSReleaseNotesGenerator.sln" WorkingDirectory="$(InternalBuildTools)\PSReleaseNotesGenerator"/>
        <Exec Command="$(InternalBuildTools)\PSReleaseNotesGenerator\PSReleaseNotesGenerator\bin\Release\net46\PSReleaseNotesGenerator.exe -na $(DesktopDeploymentArtifacts)\AWSPowerShell.dll -mn AWSPowerShell -df ..\PSGalleryDownloads\ -an AWSPowerShell.dll -vf ..\Include\sdk\_sdk-versions.json > ..\ReleaseNotesDraft.txt"/>
    </Target>
</Project>